{
    "project": {},
    "files": {
        "autodoc/EventMapper.js": {
            "name": "autodoc/EventMapper.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "autodoc/VideoSurface.js": {
            "name": "autodoc/VideoSurface.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "autodoc/ViewSequence.js": {
            "name": "autodoc/ViewSequence.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "autodoc/utils.js": {
            "name": "autodoc/utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "core/Context.js": {
            "name": "core/Context.js",
            "modules": {},
            "classes": {
                "Context": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core/ElementAllocator.js": {
            "name": "core/ElementAllocator.js",
            "modules": {},
            "classes": {
                "ElementAllocator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core/Engine.js": {
            "name": "core/Engine.js",
            "modules": {},
            "classes": {
                "Engine": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core/Entity.js": {
            "name": "core/Entity.js",
            "modules": {},
            "classes": {
                "Entity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core/EventEmitter.js": {
            "name": "core/EventEmitter.js",
            "modules": {},
            "classes": {
                "EventEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core/EventHandler.js": {
            "name": "core/EventHandler.js",
            "modules": {},
            "classes": {
                "EventHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core/Group.js": {
            "name": "core/Group.js",
            "modules": {},
            "classes": {
                "Group": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core/Modifier.js": {
            "name": "core/Modifier.js",
            "modules": {},
            "classes": {
                "Modifier": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core/OptionsManager.js": {
            "name": "core/OptionsManager.js",
            "modules": {},
            "classes": {
                "OptionsManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core/RenderNode.js": {
            "name": "core/RenderNode.js",
            "modules": {},
            "classes": {
                "RenderNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core/Scene.js": {
            "name": "core/Scene.js",
            "modules": {},
            "classes": {
                "Scene": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core/SpecParser.js": {
            "name": "core/SpecParser.js",
            "modules": {},
            "classes": {
                "SpecParser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core/Surface.js": {
            "name": "core/Surface.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "core/Transform.js": {
            "name": "core/Transform.js",
            "modules": {},
            "classes": {
                "Transform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core/View.js": {
            "name": "core/View.js",
            "modules": {},
            "classes": {
                "View": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core/ViewSequence.js": {
            "name": "core/ViewSequence.js",
            "modules": {},
            "classes": {
                "ViewSequence": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "events/EventArbiter.js": {
            "name": "events/EventArbiter.js",
            "modules": {},
            "classes": {
                "EventArbiter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "events/EventFilter.js": {
            "name": "events/EventFilter.js",
            "modules": {},
            "classes": {
                "EventFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "events/EventMapper.js": {
            "name": "events/EventMapper.js",
            "modules": {},
            "classes": {
                "EventMapper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "inputs/FastClick.js": {
            "name": "inputs/FastClick.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "inputs/GenericSync.js": {
            "name": "inputs/GenericSync.js",
            "modules": {},
            "classes": {
                "GenericSync": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "inputs/MouseSync.js": {
            "name": "inputs/MouseSync.js",
            "modules": {},
            "classes": {
                "MouseSync": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "inputs/PinchSync.js": {
            "name": "inputs/PinchSync.js",
            "modules": {},
            "classes": {
                "PinchSync": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "inputs/RotateSync.js": {
            "name": "inputs/RotateSync.js",
            "modules": {},
            "classes": {
                "RotateSync": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "inputs/ScaleSync.js": {
            "name": "inputs/ScaleSync.js",
            "modules": {},
            "classes": {
                "ScaleSync": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "inputs/ScrollSync.js": {
            "name": "inputs/ScrollSync.js",
            "modules": {},
            "classes": {
                "ScrollSync": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "inputs/TouchSync.js": {
            "name": "inputs/TouchSync.js",
            "modules": {},
            "classes": {
                "TouchSync": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "inputs/TouchTracker.js": {
            "name": "inputs/TouchTracker.js",
            "modules": {},
            "classes": {
                "TouchTracker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "inputs/TwoFingerSync.js": {
            "name": "inputs/TwoFingerSync.js",
            "modules": {},
            "classes": {
                "TwoFingerSync": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "math/Matrix.js": {
            "name": "math/Matrix.js",
            "modules": {},
            "classes": {
                "Matrix": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "math/Quaternion.js": {
            "name": "math/Quaternion.js",
            "modules": {},
            "classes": {
                "Quaternion": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "math/Random.js": {
            "name": "math/Random.js",
            "modules": {},
            "classes": {
                "Random": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "math/Utilities.js": {
            "name": "math/Utilities.js",
            "modules": {},
            "classes": {
                "Utilities": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "math/Vector.js": {
            "name": "math/Vector.js",
            "modules": {},
            "classes": {
                "Vector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modifiers/Draggable.js": {
            "name": "modifiers/Draggable.js",
            "modules": {},
            "classes": {
                "Draggable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modifiers/Fader.js": {
            "name": "modifiers/Fader.js",
            "modules": {},
            "classes": {
                "Fader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modifiers/ModifierChain.js": {
            "name": "modifiers/ModifierChain.js",
            "modules": {},
            "classes": {
                "ModifierChain": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "modifiers/StateModifier.js": {
            "name": "modifiers/StateModifier.js",
            "modules": {},
            "classes": {
                "StateModifier": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/bodies/Body.js": {
            "name": "physics/bodies/Body.js",
            "modules": {},
            "classes": {
                "Body": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/bodies/Circle.js": {
            "name": "physics/bodies/Circle.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "physics/bodies/Particle.js": {
            "name": "physics/bodies/Particle.js",
            "modules": {},
            "classes": {
                "Particle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/bodies/Rectangle.js": {
            "name": "physics/bodies/Rectangle.js",
            "modules": {},
            "classes": {
                "Circle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/constraints/Collision.js": {
            "name": "physics/constraints/Collision.js",
            "modules": {},
            "classes": {
                "Collision": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/constraints/Constraint.js": {
            "name": "physics/constraints/Constraint.js",
            "modules": {},
            "classes": {
                "Constraint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/constraints/Curve.js": {
            "name": "physics/constraints/Curve.js",
            "modules": {},
            "classes": {
                "Curve": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/constraints/Distance.js": {
            "name": "physics/constraints/Distance.js",
            "modules": {},
            "classes": {
                "Distance": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/constraints/Snap.js": {
            "name": "physics/constraints/Snap.js",
            "modules": {},
            "classes": {
                "Snap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/constraints/Surface.js": {
            "name": "physics/constraints/Surface.js",
            "modules": {},
            "classes": {
                "Surface": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/constraints/Wall.js": {
            "name": "physics/constraints/Wall.js",
            "modules": {},
            "classes": {
                "Wall": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/constraints/Walls.js": {
            "name": "physics/constraints/Walls.js",
            "modules": {},
            "classes": {
                "Walls": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/forces/Drag.js": {
            "name": "physics/forces/Drag.js",
            "modules": {},
            "classes": {
                "Drag": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/forces/Force.js": {
            "name": "physics/forces/Force.js",
            "modules": {},
            "classes": {
                "Force": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/forces/Repulsion.js": {
            "name": "physics/forces/Repulsion.js",
            "modules": {},
            "classes": {
                "Repulsion": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/forces/RotationalDrag.js": {
            "name": "physics/forces/RotationalDrag.js",
            "modules": {},
            "classes": {
                "RotationalDrag": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/forces/RotationalSpring.js": {
            "name": "physics/forces/RotationalSpring.js",
            "modules": {},
            "classes": {
                "RotationalSpring": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/forces/Spring.js": {
            "name": "physics/forces/Spring.js",
            "modules": {},
            "classes": {
                "Spring": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/forces/VectorField.js": {
            "name": "physics/forces/VectorField.js",
            "modules": {},
            "classes": {
                "VectorField": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/integrators/SymplecticEuler.js": {
            "name": "physics/integrators/SymplecticEuler.js",
            "modules": {},
            "classes": {
                "SymplecticEuler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "physics/PhysicsEngine.js": {
            "name": "physics/PhysicsEngine.js",
            "modules": {},
            "classes": {
                "PhysicsEngine": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "surfaces/CanvasSurface.js": {
            "name": "surfaces/CanvasSurface.js",
            "modules": {},
            "classes": {
                "CanvasSurface": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "surfaces/ContainerSurface.js": {
            "name": "surfaces/ContainerSurface.js",
            "modules": {},
            "classes": {
                "ContainerSurface": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "surfaces/ImageSurface.js": {
            "name": "surfaces/ImageSurface.js",
            "modules": {},
            "classes": {
                "ImageSurface": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "surfaces/InputSurface.js": {
            "name": "surfaces/InputSurface.js",
            "modules": {},
            "classes": {
                "InputSurface": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "surfaces/VideoSurface.js": {
            "name": "surfaces/VideoSurface.js",
            "modules": {},
            "classes": {
                "VideoSurface": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "transitions/CachedMap.js": {
            "name": "transitions/CachedMap.js",
            "modules": {},
            "classes": {
                "CachedMap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "transitions/Easing.js": {
            "name": "transitions/Easing.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "transitions/MultipleTransition.js": {
            "name": "transitions/MultipleTransition.js",
            "modules": {},
            "classes": {
                "MultipleTransition": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "transitions/SnapTransition.js": {
            "name": "transitions/SnapTransition.js",
            "modules": {},
            "classes": {
                "SnapTransition": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "transitions/SpringTransition.js": {
            "name": "transitions/SpringTransition.js",
            "modules": {},
            "classes": {
                "SpringTransition": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "transitions/Transitionable.js": {
            "name": "transitions/Transitionable.js",
            "modules": {},
            "classes": {
                "Transitionable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "transitions/TransitionableTransform.js": {
            "name": "transitions/TransitionableTransform.js",
            "modules": {},
            "classes": {
                "TransitionableTransform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "transitions/TweenTransition.js": {
            "name": "transitions/TweenTransition.js",
            "modules": {},
            "classes": {
                "TweenTransition": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "transitions/WallTransition.js": {
            "name": "transitions/WallTransition.js",
            "modules": {},
            "classes": {
                "WallTransition": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utilities/KeyCodes.js": {
            "name": "utilities/KeyCodes.js",
            "modules": {},
            "classes": {
                "KeyCodes": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utilities/Timer.js": {
            "name": "utilities/Timer.js",
            "modules": {},
            "classes": {
                "Timer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utilities/Utility.js": {
            "name": "utilities/Utility.js",
            "modules": {},
            "classes": {
                "Utility": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "views/Deck.js": {
            "name": "views/Deck.js",
            "modules": {},
            "classes": {
                "Deck": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "views/EdgeSwapper.js": {
            "name": "views/EdgeSwapper.js",
            "modules": {},
            "classes": {
                "EdgeSwapper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "views/Flipper.js": {
            "name": "views/Flipper.js",
            "modules": {},
            "classes": {
                "Flipper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "views/GridLayout.js": {
            "name": "views/GridLayout.js",
            "modules": {},
            "classes": {
                "GridLayout": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "views/HeaderFooterLayout.js": {
            "name": "views/HeaderFooterLayout.js",
            "modules": {},
            "classes": {
                "HeaderFooterLayout": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "views/Lightbox.js": {
            "name": "views/Lightbox.js",
            "modules": {},
            "classes": {
                "Lightbox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "views/RenderController.js": {
            "name": "views/RenderController.js",
            "modules": {},
            "classes": {
                "RenderController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "views/ScrollContainer.js": {
            "name": "views/ScrollContainer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "views/Scroller.js": {
            "name": "views/Scroller.js",
            "modules": {},
            "classes": {
                "Scroller": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "views/Scrollview.js": {
            "name": "views/Scrollview.js",
            "modules": {},
            "classes": {
                "Scrollview": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "views/SequentialLayout.js": {
            "name": "views/SequentialLayout.js",
            "modules": {},
            "classes": {
                "ScrollContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "widgets/NavigationBar.js": {
            "name": "widgets/NavigationBar.js",
            "modules": {},
            "classes": {
                "NavigationBar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "widgets/Slider.js": {
            "name": "widgets/Slider.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "widgets/TabBar.js": {
            "name": "widgets/TabBar.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "widgets/ToggleButton.js": {
            "name": "widgets/ToggleButton.js",
            "modules": {},
            "classes": {
                "TabBar": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "EventMapper": {
            "name": "EventMapper",
            "shortname": "EventMapper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "events/EventMapper.js",
            "line": 13,
            "description": "EventMapper routes events to various event destinations\n based on custom logic.  The function signature is arbitrary.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mappingFunction",
                    "description": "function to determine where\n events are routed to.",
                    "type": "Function"
                }
            ]
        },
        "VideoSurface": {
            "name": "VideoSurface",
            "shortname": "VideoSurface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "surfaces/VideoSurface.js",
            "line": 13,
            "description": "Creates a famous surface containing video content. Currently adding\n  controls and manipulating the video are not supported through the\n  surface interface, but can be accomplished via standard JavaScript\n  manipulation of the video DOM element.\n  This extends the Surface class.",
            "extends": "Surface",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "default option overrides",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "size",
                            "description": "[width, height] in pixels",
                            "type": "Array.Number",
                            "optional": true
                        },
                        {
                            "name": "classes",
                            "description": "CSS classes to set on inner content",
                            "type": "Array.string",
                            "optional": true
                        },
                        {
                            "name": "properties",
                            "description": "string dictionary of HTML attributes to set on target div",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "content",
                            "description": "inner (HTML) content of surface",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "autoplay",
                            "description": "autoplay",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "ViewSequence": {
            "name": "ViewSequence",
            "shortname": "ViewSequence",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "core/ViewSequence.js",
            "line": 12,
            "description": "Helper object used to iterate through items sequentially. Used in\n  views that deal with layout.  A ViewSequence object conceptually points\n  to a node in a linked list.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options object, or content array.",
                    "type": "Object|Array",
                    "props": [
                        {
                            "name": "index",
                            "description": "starting index.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "array",
                            "description": "Array of elements to populate the ViewSequence",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "_",
                            "description": "Optional backing store (internal",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "loop",
                            "description": "Whether to wrap when accessing elements just past the end\n  (or beginning) of the sequence.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Context": {
            "name": "Context",
            "shortname": "Context",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "core/Context.js",
            "line": 23,
            "description": "The top-level container for a Famous-renderable piece of the document.\n  It is directly updated by the process-wide Engine object, and manages one\n  render tree root, which can contain other renderables.",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "container",
                    "description": "Element in which content will be inserted",
                    "type": "Node"
                }
            ]
        },
        "ElementAllocator": {
            "name": "ElementAllocator",
            "shortname": "ElementAllocator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "core/ElementAllocator.js",
            "line": 12,
            "description": "Internal helper object to Context that handles the process of\n  creating and allocating DOM elements within a managed div.\n  Private.",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "container",
                    "description": "document element in which Famo.us content will be inserted",
                    "type": "Node"
                }
            ]
        },
        "Engine": {
            "name": "Engine",
            "shortname": "Engine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "core/Engine.js",
            "line": 12,
            "description": "The singleton object initiated upon process\n  startup which manages all active Context instances, runs\n  the render dispatch loop, and acts as a listener and dispatcher\n  for events.  All methods are therefore static.\n\n  On static initialization, window.requestAnimationFrame is called with\n    the event loop function.\n\n  Note: Any window in which Engine runs will prevent default\n    scrolling behavior on the 'touchmove' event.",
            "static": 1
        },
        "Entity": {
            "name": "Entity",
            "shortname": "Entity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "core/Entity.js",
            "line": 11,
            "description": "A singleton that maintains a global registry of Surfaces.\n  Private.",
            "access": "private",
            "tagname": "",
            "static": 1
        },
        "EventEmitter": {
            "name": "EventEmitter",
            "shortname": "EventEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "core/EventEmitter.js",
            "line": 11,
            "description": "EventEmitter represents a channel for events.",
            "is_constructor": 1
        },
        "EventHandler": {
            "name": "EventHandler",
            "shortname": "EventHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "View",
                "Particle",
                "Constraint",
                "Force"
            ],
            "file": "core/EventHandler.js",
            "line": 13,
            "description": "EventHandler forwards received events to a set of provided callback functions.\nIt allows events to be captured, processed, and optionally piped through to other event handlers.",
            "extends": "EventEmitter",
            "is_constructor": 1
        },
        "Group": {
            "name": "Group",
            "shortname": "Group",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "core/Group.js",
            "line": 15,
            "description": "A Context designed to contain surfaces and set properties\n  to be applied to all of them at once.\n  This is primarily used for specific performance improvements in the rendering engine.\n  Private.",
            "access": "private",
            "tagname": "",
            "extends": "Surface",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Surface options array (see Surface})",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "Modifier": {
            "name": "Modifier",
            "shortname": "Modifier",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Particle"
            ],
            "file": "core/Modifier.js",
            "line": 17,
            "description": "A collection of visual changes to be\n    applied to another renderable component. This collection includes a\n    transform matrix, an opacity constant, a size, an origin specifier.\n    Modifier objects can be added to any RenderNode or object\n    capable of displaying renderables.  The Modifier's children and descendants\n    are transformed by the amounts specified in the Modifier's properties.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "transform",
                            "description": "affine transformation matrix",
                            "type": "Transform",
                            "optional": true
                        },
                        {
                            "name": "opacity",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "origin adjustment",
                            "type": "Array.Number",
                            "optional": true
                        },
                        {
                            "name": "size",
                            "description": "size to apply to descendants",
                            "type": "Array.Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "OptionsManager": {
            "name": "OptionsManager",
            "shortname": "OptionsManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "View"
            ],
            "file": "core/OptionsManager.js",
            "line": 13,
            "description": "A collection of methods for setting options which can be extended\nonto other classes.\n\n\n**** WARNING ****\nYou can only pass through objects that will compile into valid JSON.\n\nValid options:\n    Strings,\n    Arrays,\n    Objects,\n    Numbers,\n    Nested Objects,\n    Nested Arrays.\n\n  This excludes:\n      Document Fragments,\n      Functions",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "options dictionary",
                    "type": "Object"
                }
            ]
        },
        "RenderNode": {
            "name": "RenderNode",
            "shortname": "RenderNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "View"
            ],
            "file": "core/RenderNode.js",
            "line": 14,
            "description": "A wrapper for inserting a renderable component (like a Modifer or\n  Surface) into the render tree.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "Target renderable component",
                    "type": "Object"
                }
            ]
        },
        "Scene": {
            "name": "Scene",
            "shortname": "Scene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "core/Scene.js",
            "line": 15,
            "description": "Builds and renders a scene graph based on a declarative structure definition.\nSee the Scene examples in the examples distribution (http://github.com/Famous/examples.git).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "definition",
                    "description": "in the format of a render spec.",
                    "type": "Object"
                }
            ]
        },
        "SpecParser": {
            "name": "SpecParser",
            "shortname": "SpecParser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "core/SpecParser.js",
            "line": 14,
            "description": "This object translates the rendering instructions (\"render specs\")\n   that renderable components generate into document update\n   instructions (\"update specs\").  Private.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "Surface": {
            "name": "Surface",
            "shortname": "Surface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/constraints/Surface.js",
            "line": 14,
            "description": "A constraint that keeps a physics body on a given implicit surface\n  regardless of other physical forces are applied to it.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "default option overrides",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "size",
                            "description": "[width, height] in pixels",
                            "type": "Array.Number",
                            "optional": true
                        },
                        {
                            "name": "classes",
                            "description": "CSS classes to set on inner content",
                            "type": "Array.string",
                            "optional": true
                        },
                        {
                            "name": "properties",
                            "description": "string dictionary of HTML attributes to set on target div",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "content",
                            "description": "inner (HTML) content of surface",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Constraint"
        },
        "Transform": {
            "name": "Transform",
            "shortname": "Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "core/Transform.js",
            "line": 12,
            "description": "A high-performance static matrix math library used to calculate\n  affine transforms on surfaces and other renderables.\n  Famo.us uses 4x4 matrices corresponding directly to\n  WebKit matrices (column-major order).\n\n  The internal \"type\" of a Matrix is a 16-long float array in\n  row-major order, with:\n  elements [0],[1],[2],[4],[5],[6],[8],[9],[10] forming the 3x3\n        transformation matrix;\n  elements [12], [13], [14] corresponding to the t_x, t_y, t_z\n         translation;\n  elements [3], [7], [11] set to 0;\n  element [15] set to 1.\n  All methods are static.",
            "static": 1
        },
        "View": {
            "name": "View",
            "shortname": "View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "core/View.js",
            "line": 15,
            "description": "Useful for quickly creating elements within applications\n  with large event systems.  Consists of a RenderNode paired with\n  an input EventHandler and an output EventHandler.\n  Meant to be extended by the developer.",
            "uses": [
                "EventHandler",
                "OptionsManager",
                "RenderNode"
            ],
            "is_constructor": 1
        },
        "EventArbiter": {
            "name": "EventArbiter",
            "shortname": "EventArbiter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "events/EventArbiter.js",
            "line": 13,
            "description": "A switch which wraps several event destinations and\n redirects received events to at most one of them.\n Setting the 'mode' of the object dictates which one\n of these destinations will receive events.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "startMode",
                    "description": "initial setting of switch,",
                    "type": "Number | string"
                }
            ]
        },
        "EventFilter": {
            "name": "EventFilter",
            "shortname": "EventFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "events/EventFilter.js",
            "line": 13,
            "description": "EventFilter regulates the broadcasting of events based on\n a specified condition function of standard event type: function(type, data).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "condition",
                    "description": "function to determine whether or not\n   events are emitted.",
                    "type": "Function"
                }
            ]
        },
        "GenericSync": {
            "name": "GenericSync",
            "shortname": "GenericSync",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "inputs/GenericSync.js",
            "line": 17,
            "description": "Combines multiple types of event handling (e.g. touch, trackpad\n    scrolling) into one standardized interface for inclusion in\n    widgets. TouchSync and ScrollSync are enabled by default.\n    Emits 'start', 'update', and 'end' events as a union\n    of the input sync providers.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "legacyGetter",
                    "description": "position getter function object (Deprecated)",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "default options overrides, passed to all sync classes",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "syncClasses",
                            "description": "array of classes in inputs/ which\n  will feed input to GenericSync.",
                            "type": "Array.Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "MouseSync": {
            "name": "MouseSync",
            "shortname": "MouseSync",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "inputs/MouseSync.js",
            "line": 13,
            "description": "Handles piped in mouse drag events. Outputs an object with two\n  properties, position and velocity.\n  Emits 'start', 'update' and 'end' events with DOM event passthroughs,\n  with position, velocity, and a delta key.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "legacyGetter",
                    "description": "position getter object (deprecated)",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "default options overrides",
                    "type": "Object"
                }
            ]
        },
        "PinchSync": {
            "name": "PinchSync",
            "shortname": "PinchSync",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "inputs/PinchSync.js",
            "line": 13,
            "description": "Handles piped in two-finger touch events to change position via pinching / expanding.\n  Emits 'start', 'update' and 'end' events with\n  position, velocity, touch ids, and distance between fingers.",
            "extends": "TwoFingerSync",
            "is_constructor": 1,
            "params": [
                {
                    "name": "legacyGetter",
                    "description": "position getter object (deprecated)",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "default options overrides",
                    "type": "Object"
                }
            ]
        },
        "RotateSync": {
            "name": "RotateSync",
            "shortname": "RotateSync",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "inputs/RotateSync.js",
            "line": 13,
            "description": "Handles piped in two-finger touch events to increase or decrease scale via pinching / expanding.\n  Emits 'start', 'update' and 'end' events an object with position, velocity, touch ids, and angle.\n  Useful for determining a rotation factor from initial two-finger touch.",
            "extends": "TwoFingerSync",
            "is_constructor": 1,
            "params": [
                {
                    "name": "legacyGetter",
                    "description": "position getter object (deprecated)",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "default options overrides",
                    "type": "Object"
                }
            ]
        },
        "ScaleSync": {
            "name": "ScaleSync",
            "shortname": "ScaleSync",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "inputs/ScaleSync.js",
            "line": 13,
            "description": "Handles piped in two-finger touch events to increase or decrease scale via pinching / expanding.\n  Emits 'start', 'update' and 'end' events an object with position, velocity, touch ids, distance, and scale factor.\n  Useful for determining a scaling factor from initial two-finger touch.",
            "extends": "TwoFingerSync",
            "is_constructor": 1,
            "params": [
                {
                    "name": "legacyGetter",
                    "description": "position getter object (deprecated)",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "default options overrides",
                    "type": "Object"
                }
            ]
        },
        "ScrollSync": {
            "name": "ScrollSync",
            "shortname": "ScrollSync",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "inputs/ScrollSync.js",
            "line": 15,
            "description": "Handles piped in mousewheel events.\n  Emits 'start', 'update', and 'end' events with payloads including:\n  delta: change since last position,\n  position: accumulated deltas,\n  velocity: speed of change in pixels per ms,\n  slip: true (unused).\n\n  Can be used as delegate of GenericSync.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "legacyGetter",
                    "description": "position getter function (deprecated)",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "overrides of default options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "direction",
                            "description": "Pay attention to x changes (ScrollSync.DIRECTION_X),\n  y changes (ScrollSync.DIRECTION_Y) or both (undefined)",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "minimumEndSpeed",
                            "description": "End speed calculation floors at this number, in pixels per ms",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "rails",
                            "description": "whether to snap position calculations to nearest axis",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "scale",
                            "description": "scale outputs in by scalar or pair of scalars",
                            "type": "Number | Array.Number",
                            "optional": true
                        },
                        {
                            "name": "stallTime",
                            "description": "reset time for velocity calculation in ms",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "TouchSync": {
            "name": "TouchSync",
            "shortname": "TouchSync",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "inputs/TouchSync.js",
            "line": 14,
            "description": "Handles piped in touch events. Emits 'start', 'update', and 'events'\n  events with position, velocity, acceleration, and touch id.\n  Useful for dealing with inputs on touch devices.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "legacyGetter",
                    "description": "position getter function (deprecated)",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "default options overrides",
                    "type": "Object"
                }
            ]
        },
        "TouchTracker": {
            "name": "TouchTracker",
            "shortname": "TouchTracker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "inputs/TouchTracker.js",
            "line": 71,
            "description": "Helper to TouchSync – tracks piped in touch events, organizes touch\n  events by ID, and emits track events back to TouchSync.\n  Emits 'trackstart', 'trackmove', and 'trackend' events upstream.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "selective",
                    "description": "if false, save state for each touch.",
                    "type": "Boolean"
                }
            ]
        },
        "TwoFingerSync": {
            "name": "TwoFingerSync",
            "shortname": "TwoFingerSync",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "inputs/TwoFingerSync.js",
            "line": 13,
            "description": "Helper to PinchSync, RotateSync, and ScaleSync.  Generalized handling of\n  two-finger touch events.\n  This class is meant to be overridden and not used directly.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "legacyGetter",
                    "description": "position getter object (deprecated)",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "default options overrides",
                    "type": "Object",
                    "props": [
                        {
                            "name": "scale",
                            "description": "scale velocity by this factor",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Matrix": {
            "name": "Matrix",
            "shortname": "Matrix",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "math/Matrix.js",
            "line": 13,
            "description": "A library for using a 3x3 numerical matrix, represented as a two-level array.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "values",
                    "description": "array of rows",
                    "type": "Array.Array"
                }
            ]
        },
        "Quaternion": {
            "name": "Quaternion",
            "shortname": "Quaternion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "math/Quaternion.js",
            "line": 13,
            "description": "Docs: TODO",
            "is_constructor": 1,
            "params": [
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Random": {
            "name": "Random",
            "shortname": "Random",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "math/Random.js",
            "line": 22,
            "description": "Very simple uniform random number generator library wrapping Math.random().",
            "static": 1
        },
        "Utilities": {
            "name": "Utilities",
            "shortname": "Utilities",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "math/Utilities.js",
            "line": 11,
            "description": "A few static methods.",
            "static": 1
        },
        "Vector": {
            "name": "Vector",
            "shortname": "Vector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "math/Vector.js",
            "line": 12,
            "description": "Three-element floating point vector.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "x element value",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y element value",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z element value",
                    "type": "Number"
                }
            ]
        },
        "Draggable": {
            "name": "Draggable",
            "shortname": "Draggable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "modifiers/Draggable.js",
            "line": 19,
            "description": "Makes added render nodes responsive to drag beahvior.\n  Emits events 'dragstart', 'dragmove', 'dragend'.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "options configuration object.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "snapX",
                            "description": "grid width for snapping during drag",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "snapY",
                            "description": "grid height for snapping during drag",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "xRange",
                            "description": "maxmimum [negative, positive] x displacement from start of drag",
                            "type": "Array.Number",
                            "optional": true
                        },
                        {
                            "name": "yRange",
                            "description": "maxmimum [negative, positive] y displacement from start of drag",
                            "type": "Array.Number",
                            "optional": true
                        },
                        {
                            "name": "scale",
                            "description": "one pixel of input motion translates to this many pixels of output drag motion",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "projection",
                            "description": "User should set to Draggable._direction.x or\n   Draggable._direction.y to constrain to one axis.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Fader": {
            "name": "Fader",
            "shortname": "Fader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "modifiers/Fader.js",
            "line": 5,
            "description": "Modifier that allows you to fade the opacity of affected renderables in and out.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "options configuration object.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "cull",
                            "description": "Stops returning affected renderables up the tree when they're fully faded when true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "transition",
                            "description": "The main transition for showing and hiding.",
                            "type": "Transition",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "pulseInTransition",
                            "description": "Controls the transition to a pulsed state when the Fader instance's pulse\nmethod is called.",
                            "type": "Transition",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "pulseOutTransition",
                            "description": "the transition back from a pulsed state when the Fader instance's pulse\nmethod is called.",
                            "type": "Transition",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ]
        },
        "ModifierChain": {
            "name": "ModifierChain",
            "shortname": "ModifierChain",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "modifiers/ModifierChain.js",
            "line": 12,
            "description": "A class to add and remove a chain of modifiers\n  at a single point in the render tree",
            "is_constructor": 1
        },
        "StateModifier": {
            "name": "StateModifier",
            "shortname": "StateModifier",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "modifiers/StateModifier.js",
            "line": 16,
            "description": "A collection of visual changes to be\n  applied to another renderable component, strongly coupled with the state that defines\n  those changes. This collection includes a\n  transform matrix, an opacity constant, a size, an origin specifier.\n  StateModifier objects can be added to any RenderNode or object\n  capable of displaying renderables.  The StateModifier's children and descendants\n  are transformed by the amounts specified in the modifier's properties.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "transform",
                            "description": "affine transformation matrix",
                            "type": "Transform",
                            "optional": true
                        },
                        {
                            "name": "opacity",
                            "description": "",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "origin adjustment",
                            "type": "Array.Number",
                            "optional": true
                        },
                        {
                            "name": "size",
                            "description": "size to apply to descendants",
                            "type": "Array.Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Body": {
            "name": "Body",
            "shortname": "Body",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/bodies/Body.js",
            "line": 17,
            "description": "A unit controlled by the physics engine which extends the zero-dimensional\nParticle to include geometry. In addition to maintaining the state\nof a Particle its state includes orientation, angular velocity\nand angular momentum and responds to torque forces.",
            "extends": "Particle",
            "is_constructor": 1
        },
        "Circle": {
            "name": "Circle",
            "shortname": "Circle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/bodies/Rectangle.js",
            "line": 14,
            "description": "Implements a rectangular geometry for an Body with\nsize = [width, height].",
            "extends": "Body",
            "is_constructor": 1
        },
        "Particle": {
            "name": "Particle",
            "shortname": "Particle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Body"
            ],
            "file": "physics/bodies/Particle.js",
            "line": 16,
            "description": "A point body that is controlled by the Physics Engine. A particle has\n  position and velocity states that are updated by the Physics Engine.\n  Ultimately, a particle is a _special type of modifier, and can be added to\n  the Famous render tree like any other modifier.",
            "is_constructor": 1,
            "uses": [
                "EventHandler",
                "Modifier"
            ]
        },
        "Collision": {
            "name": "Collision",
            "shortname": "Collision",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/constraints/Collision.js",
            "line": 14,
            "description": "Allows for two circular bodies to collide and bounce off each other.",
            "is_constructor": 1,
            "extends": "Constraint",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Constraint": {
            "name": "Constraint",
            "shortname": "Constraint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/constraints/Constraint.js",
            "line": 13,
            "description": "Allows for two circular bodies to collide and bounce off each other.",
            "is_constructor": 1,
            "uses": [
                "EventHandler"
            ],
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Curve": {
            "name": "Curve",
            "shortname": "Curve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/constraints/Curve.js",
            "line": 14,
            "description": "A constraint that keeps a physics body on a given implicit curve\n  regardless of other physical forces are applied to it.\n\n  A curve constraint is two surface constraints in disguise, as a curve is\n  the intersection of two surfaces, and is essentially constrained to both",
            "is_constructor": 1,
            "extends": "Constraint",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Distance": {
            "name": "Distance",
            "shortname": "Distance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/constraints/Distance.js",
            "line": 14,
            "description": "A constraint that keeps a physics body a given distance away from a given\nanchor, or another attached body.",
            "is_constructor": 1,
            "extends": "Constraint",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Snap": {
            "name": "Snap",
            "shortname": "Snap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/constraints/Snap.js",
            "line": 14,
            "description": "A spring constraint is like a spring force, except that it is always\n  numerically stable (even for low periods), at the expense of introducing\n  damping (even with dampingRatio set to 0).\n\n  Use this if you need fast spring-like behavior, e.g., snapping",
            "is_constructor": 1,
            "extends": "Constraint",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Wall": {
            "name": "Wall",
            "shortname": "Wall",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Walls"
            ],
            "file": "physics/constraints/Wall.js",
            "line": 14,
            "description": "A wall describes an infinite two-dimensional plane that physics bodies\n  can collide with. To define a wall, you must give it a distance (from\n  the center of the physics engine's origin, and a normal defining the plane\n  of the wall.\n\n  (wall)\n    |\n    | (normal)     (origin)\n    | --->            *\n    |\n    |    (distance)\n    ...................\n          (100px)\n\n    e.g., Wall({normal : [1,0,0], distance : 100})\n    would be a wall 100 pixels to the left, whose normal points right",
            "is_constructor": 1,
            "extends": "Constraint",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Walls": {
            "name": "Walls",
            "shortname": "Walls",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/constraints/Walls.js",
            "line": 15,
            "description": "Walls combines one or more Wall primitives and exposes a simple API to\ninteract with several walls at once. A common use case would be to set up\na bounding box for a physics body, that would collide with each side.",
            "is_constructor": 1,
            "extends": "Constraint",
            "uses": [
                "Wall"
            ],
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Drag": {
            "name": "Drag",
            "shortname": "Drag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/forces/Drag.js",
            "line": 13,
            "description": "Drag is a force that opposes velocity. Attach it to the physics engine\nto slow down a physics body in motion.",
            "is_constructor": 1,
            "extends": "Force",
            "params": [
                {
                    "name": "options",
                    "description": "options to set on drag",
                    "type": "Object"
                }
            ]
        },
        "Force": {
            "name": "Force",
            "shortname": "Force",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/forces/Force.js",
            "line": 14,
            "description": "Force base class.",
            "uses": [
                "EventHandler"
            ],
            "is_constructor": 1
        },
        "Repulsion": {
            "name": "Repulsion",
            "shortname": "Repulsion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/forces/Repulsion.js",
            "line": 15,
            "description": "Repulsion is a force that repels (attracts) bodies away (towards)\n  each other. A repulsion of negative strength is attractive.",
            "is_constructor": 1,
            "extends": "Force",
            "params": [
                {
                    "name": "options",
                    "description": "overwrites default options",
                    "type": "Object"
                }
            ]
        },
        "RotationalDrag": {
            "name": "RotationalDrag",
            "shortname": "RotationalDrag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/forces/RotationalDrag.js",
            "line": 13,
            "description": "Rotational drag is a force that opposes angular velocity.\n  Attach it to a physics body to slow down its rotation.",
            "is_constructor": 1,
            "extends": "Force",
            "params": [
                {
                    "name": "options",
                    "description": "options to set on drag",
                    "type": "Object"
                }
            ]
        },
        "RotationalSpring": {
            "name": "RotationalSpring",
            "shortname": "RotationalSpring",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/forces/RotationalSpring.js",
            "line": 14,
            "description": "A force that rotates a physics body back to target Euler angles.\nJust as a spring translates a body to a particular X, Y, Z, location,\na rotational spring rotates a body to a particular X, Y, Z Euler angle.\n    Note: there is no physical agent that does this in the \"real world\"",
            "is_constructor": 1,
            "extends": "Spring",
            "params": [
                {
                    "name": "options",
                    "description": "options to set on drag",
                    "type": "Object"
                }
            ]
        },
        "Spring": {
            "name": "Spring",
            "shortname": "Spring",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/forces/Spring.js",
            "line": 14,
            "description": "A force that moves a physics body to a location with a spring motion.\n  The body can be moved to another physics body, or an anchor point.",
            "is_constructor": 1,
            "extends": "Force",
            "params": [
                {
                    "name": "options",
                    "description": "options to set on drag",
                    "type": "Object"
                }
            ]
        },
        "VectorField": {
            "name": "VectorField",
            "shortname": "VectorField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/forces/VectorField.js",
            "line": 14,
            "description": "A force that moves a physics body to a location with a spring motion.\n  The body can be moved to another physics body, or an anchor point.",
            "is_constructor": 1,
            "extends": "Force",
            "params": [
                {
                    "name": "options",
                    "description": "options to set on drag",
                    "type": "Object"
                }
            ]
        },
        "SymplecticEuler": {
            "name": "SymplecticEuler",
            "shortname": "SymplecticEuler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/integrators/SymplecticEuler.js",
            "line": 13,
            "description": "Ordinary Differential Equation (ODE) Integrator.\nManages updating a physics body's state over time.\n\n p = position, v = velocity, m = mass, f = force, dt = change in time\n\n     v <- v + dt * f / m\n     p <- p + dt * v\n\n q = orientation, w = angular velocity, L = angular momentum\n\n     L <- L + dt * t\n     q <- q + dt/2 * q * w",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options to set",
                    "type": "Object"
                }
            ]
        },
        "PhysicsEngine": {
            "name": "PhysicsEngine",
            "shortname": "PhysicsEngine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "physics/PhysicsEngine.js",
            "line": 11,
            "description": "The Physics Engine is responsible for mediating Bodies and their\ninteraction with forces and constraints. The Physics Engine handles the\nlogic of adding and removing bodies, updating their state of the over\ntime.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "optoins",
                    "description": "options",
                    "type": "Object"
                }
            ]
        },
        "CanvasSurface": {
            "name": "CanvasSurface",
            "shortname": "CanvasSurface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "surfaces/CanvasSurface.js",
            "line": 13,
            "description": "A surface containing an HTML5 Canvas element.\n  This extends the Surface class.",
            "extends": "Surface",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "canvasSize",
                            "description": "[width, height] for document element",
                            "type": "Array.Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "ContainerSurface": {
            "name": "ContainerSurface",
            "shortname": "ContainerSurface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "surfaces/ContainerSurface.js",
            "line": 15,
            "description": "ContainerSurface is an object designed to contain surfaces and\n  set properties to be applied to all of them at once.\n  This extends the Surface class.\n  A container surface will enforce these properties on the\n  surfaces it contains:\n\n  size (clips contained surfaces to its own width and height);\n\n  origin;\n\n  its own opacity and transform, which will be automatically\n  applied to  all Surfaces contained directly and indirectly.",
            "extends": "Surface",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options.size",
                    "description": "[width, height] in pixels",
                    "type": "Array.Number",
                    "optional": true
                },
                {
                    "name": "options.classes",
                    "description": "CSS classes to set on all inner content",
                    "type": "Array.string",
                    "optional": true
                },
                {
                    "name": "options.properties",
                    "description": "string dictionary of HTML attributes to set on target div",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "options.content",
                    "description": "inner (HTML) content of surface (should not be used)",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "ImageSurface": {
            "name": "ImageSurface",
            "shortname": "ImageSurface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "surfaces/ImageSurface.js",
            "line": 14,
            "description": "A surface containing image content.\n  This extends the Surface class.",
            "extends": "Surface",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "InputSurface": {
            "name": "InputSurface",
            "shortname": "InputSurface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "surfaces/InputSurface.js",
            "line": 13,
            "description": "A Famo.us surface in the form of an HTML input element.\n  This extends the Surface class.",
            "extends": "Surface",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "placeholder",
                            "description": "placeholder text hint that describes the expected value of an <input> element",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "description": "specifies the type of element to display (e.g. 'datetime', 'text', 'button', etc.)",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "value",
                            "description": "value of text",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "CachedMap": {
            "name": "CachedMap",
            "shortname": "CachedMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "transitions/CachedMap.js",
            "line": 11,
            "description": "A simple in-memory object cache.  Used as a helper for Views with\nprovider functions.",
            "is_constructor": 1
        },
        "MultipleTransition": {
            "name": "MultipleTransition",
            "shortname": "MultipleTransition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "transitions/MultipleTransition.js",
            "line": 13,
            "description": "Transition meta-method to support transitioning multiple\n  values with scalar-only methods.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "method",
                    "description": "Transionable class to multiplex",
                    "type": "Object"
                }
            ]
        },
        "SnapTransition": {
            "name": "SnapTransition",
            "shortname": "SnapTransition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "transitions/SnapTransition.js",
            "line": 16,
            "description": "SnapTransition is a method of transitioning between two values (numbers,\nor arrays of numbers). It is similar to SpringTransition except\nthe transition can be much faster and always has a damping effect.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "state",
                    "description": "Initial state",
                    "type": "Number|Array",
                    "optional": true,
                    "optdefault": "0"
                }
            ]
        },
        "SpringTransition": {
            "name": "SpringTransition",
            "shortname": "SpringTransition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "transitions/SpringTransition.js",
            "line": 16,
            "description": "SpringTransition is a method of transitioning between two values (numbers,\nor arrays of numbers) with a bounce. The transition will overshoot the target\nstate depending on the parameters of the transition.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "state",
                    "description": "Initial state",
                    "type": "Number|Array",
                    "optional": true,
                    "optdefault": "0"
                }
            ]
        },
        "Transitionable": {
            "name": "Transitionable",
            "shortname": "Transitionable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "transitions/Transitionable.js",
            "line": 14,
            "description": "A state maintainer for a smooth transition between\n   numerically-specified states. Example numeric states include floats or\n   Transform objects.\n\nAn initial state is set with the constructor or set(startState). A\n   corresponding end state and transition are set with set(endState,\n   transition). Subsequent calls to set(endState, transition) begin at\n   the last state. Calls to get(timestamp) provide the interpolated state\n   along the way.\n\nNote that there is no event loop here - calls to get() are the only way\n   to find state projected to the current (or provided) time and are\n   the only way to trigger callbacks. Usually this kind of object would\n   be part of the render() path of a visible component.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "start!~YUIDOC_LINE~!",
                    "description": "beginning state",
                    "type": "number|Array.Number|Object.<number|string, number>"
                }
            ]
        },
        "TransitionableTransform": {
            "name": "TransitionableTransform",
            "shortname": "TransitionableTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "transitions/TransitionableTransform.js",
            "line": 15,
            "description": "A class for transitioning the state of a Transform by transitioning\nits translate, scale, skew and rotate components independently.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "transform",
                    "description": "The initial transform state",
                    "type": "Transform",
                    "optional": true,
                    "optdefault": "Transform.identity"
                }
            ]
        },
        "TweenTransition": {
            "name": "TweenTransition",
            "shortname": "TweenTransition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "transitions/TweenTransition.js",
            "line": 12,
            "description": "A state maintainer for a smooth transition between\n    numerically-specified states.  Example numeric states include floats or\n    Transfornm objects.\n   An initial state is set with the constructor or set(startValue). A\n    corresponding end state and transition are set with set(endValue,\n    transition). Subsequent calls to set(endValue, transition) begin at\n    the last state. Calls to get(timestamp) provide the _interpolated state\n    along the way.\n  Note that there is no event loop here - calls to get() are the only way\n    to find out state projected to the current (or provided) time and are\n    the only way to trigger callbacks. Usually this kind of object would\n    be part of the render() path of a visible component.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "TODO\n    beginning state",
                    "type": "Object"
                }
            ]
        },
        "WallTransition": {
            "name": "WallTransition",
            "shortname": "WallTransition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "transitions/WallTransition.js",
            "line": 17,
            "description": "WallTransition is a method of transitioning between two values (numbers,\n  or arrays of numbers) with a bounce. Unlike a SpringTransition\n  The transition will not overshoot the target, but bounce back against it.\n  The behavior of the bounce is specified by the transition options.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "state",
                    "description": "Initial state",
                    "type": "Number|Array",
                    "optional": true,
                    "optdefault": "0"
                }
            ]
        },
        "KeyCodes": {
            "name": "KeyCodes",
            "shortname": "KeyCodes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "utilities/KeyCodes.js",
            "line": 12,
            "description": "Collection to map keyboard codes in plain english",
            "static": 1
        },
        "Timer": {
            "name": "Timer",
            "shortname": "Timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "utilities/Timer.js",
            "line": 11,
            "description": "An internal library to reproduce javascript time-based scheduling.\n  Using standard javascript setTimeout methods can have a negative performance impact\n  when combined with the Famous rendering process, so instead require Timer and call\n  Timer.setTimeout, Timer.setInterval, etc.",
            "is_constructor": 1
        },
        "Utility": {
            "name": "Utility",
            "shortname": "Utility",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "utilities/Utility.js",
            "line": 11,
            "description": "This namespace holds standalone functionality.\n Currently includes name mapping for transition curves,\n name mapping for origin pairs, and the after() function.",
            "static": 1
        },
        "Deck": {
            "name": "Deck",
            "shortname": "Deck",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "views/Deck.js",
            "line": 17,
            "description": "A Sequential Layout that can be opened and closed with animations.\n\n  Takes the same options as SequentialLayout\n  as well as options for the open/close transition\n  and the rotation you want your Deck instance to layout in.",
            "is_constructor": 1,
            "extends": "SequentialLayout",
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options",
                    "type": "Options",
                    "optional": true,
                    "props": [
                        {
                            "name": "transition",
                            "description": "A transition object for changing between states.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "direction",
                            "description": "axis of expansion (Utility.Direction.X or .Y)",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "[options.transition={duration:",
                    "description": "500, curve: 'easeOutBounce'}\n  The transition that executes upon opening or closing your deck instance.",
                    "type": "Transition"
                },
                {
                    "name": "stackRotation",
                    "description": "The amount of rotation applied to the propogation\n  of the Deck instance's stack of renderables.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ]
        },
        "EdgeSwapper": {
            "name": "EdgeSwapper",
            "shortname": "EdgeSwapper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "views/EdgeSwapper.js",
            "line": 17,
            "description": "Container which handles swapping renderables from the edge of its parent context.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options.\n  Takes the same options as RenderController.",
                    "type": "Options",
                    "optional": true
                }
            ],
            "uses": [
                "RenderController"
            ]
        },
        "Flipper": {
            "name": "Flipper",
            "shortname": "Flipper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "views/Flipper.js",
            "line": 17,
            "description": "Allows you to link two renderables as front and back sides that can be\n 'flipped' back and forth along a chosen axis. Rendering optimizations are\n automatically handled.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "An object of options.",
                    "type": "Options",
                    "optional": true,
                    "props": [
                        {
                            "name": "transition",
                            "description": "The transition executed when flipping your Flipper instance.",
                            "type": "Transition",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "cull",
                            "description": "If true, culls the 'hidden' side untill you flip to it.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ]
        },
        "GridLayout": {
            "name": "GridLayout",
            "shortname": "GridLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "views/GridLayout.js",
            "line": 20,
            "description": "A layout which divides a context into several evenly-sized grid cells.\n  If dimensions are provided, the grid is evenly subdivided with children\n  cells representing their own context, otherwise the cellSize property is used to compute\n  dimensions so that items of cellSize will fit.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options.",
                    "type": "Options",
                    "optional": true,
                    "props": [
                        {
                            "name": "transition",
                            "description": "The transiton that controls the Gridlayout instance's reflow.",
                            "type": "Transition",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "[options.dimensions=[1,",
                    "description": "1]] A two value array which specifies the amount of columns\nand rows in your Gridlayout instance.",
                    "type": "Array.Number"
                },
                {
                    "name": "[options.cellSize=[250,",
                    "description": "250]]  A two-value array which specifies the width and height\nof each cell in your Gridlayout instance.",
                    "type": "Array.Number"
                }
            ]
        },
        "HeaderFooterLayout": {
            "name": "HeaderFooterLayout",
            "shortname": "HeaderFooterLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "views/HeaderFooterLayout.js",
            "line": 16,
            "description": "A layout which will arrange three renderables into a header and footer area of defined size,\n     and a content area of flexible size.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options.",
                    "type": "Options",
                    "optional": true,
                    "props": [
                        {
                            "name": "direction",
                            "description": "A direction of HeaderFooterLayout.DIRECTION_X\nlays your HeaderFooterLayout instance horizontally, and a direction of HeaderFooterLayout.DIRECTION_Y\nlays it out vertically.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "HeaderFooterLayout.DIRECTION_Y"
                        },
                        {
                            "name": "headerSize",
                            "description": "The amount of pixels allocated to the header node\nin the HeaderFooterLayout instance's direction.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "footerSize",
                            "description": "The amount of pixels allocated to the footer node\nin the HeaderFooterLayout instance's direction.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ]
        },
        "Lightbox": {
            "name": "Lightbox",
            "shortname": "Lightbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "views/Lightbox.js",
            "line": 10,
            "description": "Lightbox, using transitions, shows and hides different renderables. Lightbox can essentially be\nthought of as RenderController with a stateful implementation and interface.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options.",
                    "type": "Options",
                    "optional": true,
                    "props": [
                        {
                            "name": "inTransform",
                            "description": "The transform at the start of transitioning in a shown renderable.",
                            "type": "Transform",
                            "optional": true
                        },
                        {
                            "name": "outTransform",
                            "description": "The transform at the end of transitioning out a renderable.",
                            "type": "Transform",
                            "optional": true
                        },
                        {
                            "name": "showTransform",
                            "description": "The transform applied to your shown renderable in its state of equilibrium.",
                            "type": "Transform",
                            "optional": true
                        },
                        {
                            "name": "inOpacity",
                            "description": "A number between one and zero that defines the state of a shown renderables opacity upon initially\nbeing transitioned in.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "outOpacity",
                            "description": "A number between one and zero that defines the state of a shown renderables opacity upon being\nfully transitioned out.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "showOpacity",
                            "description": "A number between one and zero that defines the state of a shown renderables opacity\nonce succesfully transitioned in.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "inOrigin",
                            "description": "A two value array of numbers between one and zero that defines the state of a shown renderables\norigin upon intially being transitioned in.",
                            "type": "Array<Number>",
                            "optional": true
                        },
                        {
                            "name": "outOrigin",
                            "description": "A two value array of numbers between one and zero that defines the state of a shown renderable\nonce fully hidden.",
                            "type": "Array<Number>",
                            "optional": true
                        },
                        {
                            "name": "showOrigin",
                            "description": "A two value array of numbers between one and zero that defines the state of a shown renderables\norigin upon succesfully being shown.",
                            "type": "Array<Number>",
                            "optional": true
                        },
                        {
                            "name": "inTransition",
                            "description": "The transition in charge of showing a renderable.",
                            "type": "Transition",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "outTransition",
                            "description": "The transition in charge of removing your previous renderable when\nyou show a new one, or hiding your current renderable.",
                            "type": "Transition",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "overlap",
                            "description": "When showing a new renderable, overlap determines if the\n  out transition of the old one executes concurrently with the in transition of the new one,\n or synchronously beforehand.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "RenderController": {
            "name": "RenderController",
            "shortname": "RenderController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "EdgeSwapper"
            ],
            "file": "views/RenderController.js",
            "line": 17,
            "description": "A dynamic view that can show or hide different renerables with transitions.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options.",
                    "type": "Options",
                    "optional": true
                },
                {
                    "name": "inTransition",
                    "description": "The transition in charge of showing a renderable.",
                    "type": "Transition",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "outTransition",
                    "description": "The transition in charge of removing your previous renderable when\nyou show a new one, or hiding your current renderable.",
                    "type": "Transition",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "overlap",
                    "description": "When showing a new renderable, overlap determines if the\n     out transition of the old one executes concurrently with the in transition of the new one,\n      or synchronously beforehand.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        },
        "ScrollContainer": {
            "name": "ScrollContainer",
            "shortname": "ScrollContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "views/SequentialLayout.js",
            "line": 16,
            "description": "SequentialLayout will lay out a collection of renderables sequentially in the specified direction.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options.",
                    "type": "Options",
                    "optional": true,
                    "props": [
                        {
                            "name": "surface",
                            "description": "Options for the ScrollContainer instance's surface.",
                            "type": "Options",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "scrollview",
                            "description": "Options for the ScrollContainer instance's scrollview.",
                            "type": "Options",
                            "optional": true,
                            "optdefault": "{direction:Utility.Direction.X}"
                        }
                    ]
                }
            ]
        },
        "Scroller": {
            "name": "Scroller",
            "shortname": "Scroller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "views/Scroller.js",
            "line": 10,
            "description": "Scroller lays out a collection of renderables, and will browse through them based on \naccesed position. Scroller also broadcasts an 'edgeHit' event, with a position property of the location of the edge,\nwhen you've hit the 'edges' of it's renderable collection.",
            "is_constructor": 1,
            "itemtype": "event",
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options.",
                    "type": "Options",
                    "optional": true,
                    "props": [
                        {
                            "name": "direction",
                            "description": "Using the direction helper found in the famous Utility\nmodule, this option will lay out the Scroller instance's renderables either horizontally\n(x) or vertically (y). Utility's direction is essentially either zero (X) or one (Y), so feel free\nto just use integers as well.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "Utility.Direction.Y"
                        }
                    ]
                },
                {
                    "name": "clipSize",
                    "description": "The size of the area (in pixels) that Scroller will display content in.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "undefined"
                },
                {
                    "name": "margin",
                    "description": "The size of the area (in pixels) that Scroller will process renderables' associated calculations in.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ]
        },
        "Scrollview": {
            "name": "Scrollview",
            "shortname": "Scrollview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "views/Scrollview.js",
            "line": 25,
            "description": "Scrollview will lay out a collection of renderables sequentially in the specified direction, and will\nallow you to scroll through them with mousewheel or touch events.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options.",
                    "type": "Options",
                    "optional": true,
                    "props": [
                        {
                            "name": "direction",
                            "description": "Using the direction helper found in the famous Utility\nmodule, this option will lay out the Scrollview instance's renderables either horizontally\n(x) or vertically (y). Utility's direction is essentially either zero (X) or one (Y), so feel free\nto just use integers as well.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "Utility.Direction.Y"
                        },
                        {
                            "name": "rails",
                            "description": "When true, Scrollview's genericSync will only process input in it's primary access.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "clipSize",
                    "description": "The size of the area (in pixels) that Scrollview will display content in.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "undefined"
                },
                {
                    "name": "margin",
                    "description": "The size of the area (in pixels) that Scrollview will process renderables' associated calculations in.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "undefined"
                },
                {
                    "name": "friction",
                    "description": "Input resistance proportional to the velocity of the input.\nControls the feel of the Scrollview instance at low velocities.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.001"
                },
                {
                    "name": "drag",
                    "description": "Input resistance proportional to the square of the velocity of the input.\nAffects Scrollview instance more prominently at high velocities.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.0001"
                },
                {
                    "name": "edgeGrip",
                    "description": "A coefficient for resistance against after-touch momentum.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.5"
                },
                {
                    "name": "egePeriod",
                    "description": "Sets the period on the spring that handles the physics associated\nwith hitting the end of a scrollview.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "300"
                },
                {
                    "name": "edgeDamp",
                    "description": "Sets the damping on the spring that handles the physics associated\nwith hitting the end of a scrollview.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "paginated",
                    "description": "A paginated scrollview will scroll through items discretely\nrather than continously.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "pagePeriod",
                    "description": "Sets the period on the spring that handles the physics associated\nwith pagination.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "500"
                },
                {
                    "name": "pageDamp",
                    "description": "Sets the damping on the spring that handles the physics associated\nwith pagination.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.8"
                },
                {
                    "name": "pageStopSpeed",
                    "description": "The threshold for determining the amount of velocity\nrequired to trigger pagination. The lower the threshold, the easier it is to scroll continuosly.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "Infinity"
                },
                {
                    "name": "pageSwitchSpeed",
                    "description": "The threshold for momentum-based velocity pagination.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "speedLimit",
                    "description": "The highest scrolling speed you can reach.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "10"
                }
            ]
        },
        "NavigationBar": {
            "name": "NavigationBar",
            "shortname": "NavigationBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "widgets/NavigationBar.js",
            "line": 16,
            "description": "A view for display for displaying the title of the current page\n as well as icons for navigating backwards and opening\n further options",
            "extends": "View",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "overrides of deault options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "size",
                            "description": "Size of the navigation bar and it's componenets.",
                            "type": "Array.number",
                            "optional": true,
                            "optdefault": "(undefined,0.5)"
                        },
                        {
                            "name": "backClasses",
                            "description": "CSS Classes attached to back of Navigation.",
                            "type": "Array.string",
                            "optional": true,
                            "optdefault": "(back)"
                        },
                        {
                            "name": "backContent",
                            "description": "Content of the back button.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "(&#x25c0;)"
                        },
                        {
                            "name": "classes",
                            "description": "CSS Classes attached to the surfaces.",
                            "type": "Array.string",
                            "optional": true,
                            "optdefault": "(navigation)"
                        },
                        {
                            "name": "content",
                            "description": "Content to pass into title bar.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "classes",
                            "description": "CSS Classes attached to the More surface.",
                            "type": "Array.string",
                            "optional": true,
                            "optdefault": "(more)"
                        },
                        {
                            "name": "moreContent",
                            "description": "Content of the more button.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "(&#x271a;)"
                        }
                    ]
                }
            ]
        },
        "TabBar": {
            "name": "TabBar",
            "shortname": "TabBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "widgets/ToggleButton.js",
            "line": 15,
            "description": "A view for transistioning between two surfaces based\n on a 'on' and 'off' state",
            "extends": "View",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "overrides of deault options",
                    "type": "Object"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "autodoc/EventMapper.js",
            "line": 33,
            "description": "Trigger an event, sending to all mapped downstream handlers\n  listening for provided 'type' key.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "event data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "EventMapper"
        },
        {
            "file": "autodoc/EventMapper.js",
            "line": 48,
            "description": "Alias of emit.",
            "itemtype": "method",
            "name": "trigger",
            "class": "EventMapper"
        },
        {
            "file": "autodoc/VideoSurface.js",
            "line": 47,
            "description": "Set internal options, overriding any default options",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "autoplay",
                            "description": "HTML autoplay",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "VideoSurface"
        },
        {
            "file": "autodoc/VideoSurface.js",
            "line": 61,
            "description": "Set url of the video.",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "videoUrl",
                    "description": "URL",
                    "type": "String"
                }
            ],
            "class": "VideoSurface"
        },
        {
            "file": "autodoc/VideoSurface.js",
            "line": 72,
            "description": "Place the document element this component manages into the document.\n  Note: In the case of VideoSurface, simply changes the options on the target.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deploy",
            "params": [
                {
                    "name": "target",
                    "description": "document parent of this container",
                    "type": "Node"
                }
            ],
            "class": "VideoSurface"
        },
        {
            "file": "autodoc/VideoSurface.js",
            "line": 85,
            "description": "Remove this component and contained content from the document.\n  Note: This doesn't actually remove the <video> element from the\n  document.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "recall",
            "params": [
                {
                    "name": "target",
                    "description": "node to which the component was deployed",
                    "type": "Node"
                }
            ],
            "class": "VideoSurface"
        },
        {
            "file": "autodoc/ViewSequence.js",
            "line": 115,
            "description": "Return ViewSequence node previous to this node in the list, respecting looping if applied.",
            "itemtype": "method",
            "name": "getPrevious",
            "return": {
                "description": "previous node.",
                "type": "ViewSequence"
            },
            "class": "ViewSequence"
        },
        {
            "file": "autodoc/ViewSequence.js",
            "line": 138,
            "description": "Return ViewSequence node next after this node in the list, respecting looping if applied.",
            "itemtype": "method",
            "name": "getNext",
            "return": {
                "description": "previous node.",
                "type": "ViewSequence"
            },
            "class": "ViewSequence"
        },
        {
            "file": "autodoc/ViewSequence.js",
            "line": 161,
            "description": "Return index of this ViewSequence node.",
            "itemtype": "method",
            "name": "getIndex",
            "return": {
                "description": "index",
                "type": "Number"
            },
            "class": "ViewSequence"
        },
        {
            "file": "autodoc/ViewSequence.js",
            "line": 171,
            "description": "Return printable version of this ViewSequence node.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "this index as a string",
                "type": "String"
            },
            "class": "ViewSequence"
        },
        {
            "file": "autodoc/ViewSequence.js",
            "line": 181,
            "description": "Add one or more objects to the beginning of the sequence.",
            "itemtype": "method",
            "name": "unshift",
            "params": [
                {
                    "name": "value",
                    "description": "arguments array of objects",
                    "type": "...Object"
                }
            ],
            "class": "ViewSequence"
        },
        {
            "file": "autodoc/ViewSequence.js",
            "line": 192,
            "description": "Add one or more objects to the end of the sequence.",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "value",
                    "description": "arguments array of objects",
                    "type": "...Object"
                }
            ],
            "class": "ViewSequence"
        },
        {
            "file": "autodoc/ViewSequence.js",
            "line": 202,
            "description": "Remove objects from the sequence",
            "itemtype": "method",
            "name": "splice",
            "params": [
                {
                    "name": "index",
                    "description": "starting index for removal",
                    "type": "Number"
                },
                {
                    "name": "howMany",
                    "description": "how many elements to remove",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "arguments array of objects",
                    "type": "...Object"
                }
            ],
            "class": "ViewSequence"
        },
        {
            "file": "autodoc/ViewSequence.js",
            "line": 216,
            "description": "Exchange this element's sequence position with another's.",
            "itemtype": "method",
            "name": "swap",
            "params": [
                {
                    "name": "other",
                    "description": "element to swap with.",
                    "type": "ViewSequence"
                }
            ],
            "class": "ViewSequence"
        },
        {
            "file": "autodoc/ViewSequence.js",
            "line": 253,
            "description": "Return value of this ViewSequence node.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "value of thiss",
                "type": "Object"
            },
            "class": "ViewSequence"
        },
        {
            "file": "autodoc/ViewSequence.js",
            "line": 263,
            "description": "Call getSize() on the contained View.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "[width, height]",
                "type": "Array.Number"
            },
            "class": "ViewSequence"
        },
        {
            "file": "autodoc/ViewSequence.js",
            "line": 274,
            "description": "Generate a render spec from the contents of this component.\nSpecifically, this will render the value at the current index.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Number"
            },
            "class": "ViewSequence"
        },
        {
            "file": "autodoc/utils.js",
            "line": 1,
            "description": "Formats a number by adding commas as the thousands separator and truncating\ndecimal part to 3 places (arbitrary decision on my part).",
            "global": "",
            "params": [
                {
                    "name": "number",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Context"
        },
        {
            "file": "autodoc/utils.js",
            "line": 29,
            "description": "Appends a bunch of whitespace to the end of a string to get it to a desired\nlength. Has no effect if the string exceeds the specified length to begin\nwith.",
            "global": "",
            "params": [
                {
                    "name": "str",
                    "description": "The string to pad.",
                    "type": "String"
                },
                {
                    "name": "length",
                    "description": "The desired length of the string.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The string with its fresh new white padding.",
                "type": "String"
            },
            "examples": "padRight('foo', 5) // => 'foo  '\npadRight('', 5)    // => '     '\npadRight('foo', 2) // => 'foo'",
            "class": "Context"
        },
        {
            "file": "core/Context.js",
            "line": 63,
            "description": "Add renderables to this Context's render tree.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "obj",
                    "description": "renderable object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "RenderNode wrapping this object, if not already a RenderNode",
                "type": "RenderNode"
            },
            "class": "Context"
        },
        {
            "file": "core/Context.js",
            "line": 75,
            "description": "Move this Context to another containing document element.",
            "itemtype": "method",
            "name": "migrate",
            "params": [
                {
                    "name": "container",
                    "description": "Element to which content will be migrated",
                    "type": "Node"
                }
            ],
            "class": "Context"
        },
        {
            "file": "core/Context.js",
            "line": 88,
            "description": "Gets viewport size for Context.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "viewport size as [width, height]",
                "type": "Array.Number"
            },
            "class": "Context"
        },
        {
            "file": "core/Context.js",
            "line": 99,
            "description": "Sets viewport size for Context.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "size",
                    "description": "[width, height].  If unspecified, use size of root document element.",
                    "type": "Array.Number"
                }
            ],
            "class": "Context"
        },
        {
            "file": "core/Context.js",
            "line": 112,
            "description": "Commit this Context's content changes to the document.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "contextParameters",
                    "description": "engine commit specification",
                    "type": "Object"
                }
            ],
            "class": "Context"
        },
        {
            "file": "core/Context.js",
            "line": 136,
            "description": "Get current perspective of this context in pixels.",
            "itemtype": "method",
            "name": "getPerspective",
            "return": {
                "description": "depth perspective in pixels",
                "type": "Number"
            },
            "class": "Context"
        },
        {
            "file": "core/Context.js",
            "line": 146,
            "description": "Set current perspective of this context in pixels.",
            "itemtype": "method",
            "name": "getPerspective",
            "params": [
                {
                    "name": "perspective",
                    "description": "in pixels",
                    "type": "Number"
                },
                {
                    "name": "transition",
                    "description": "Transitionable object for applying the change",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function called on completion of transition",
                    "type": "Function(Object)"
                }
            ],
            "class": "Context"
        },
        {
            "file": "core/Context.js",
            "line": 158,
            "description": "Trigger an event, sending to all downstream handlers\n  listening for provided 'type' key.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "event data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "Context"
        },
        {
            "file": "core/Context.js",
            "line": 172,
            "description": "Bind a callback function to an event type handled by this object.",
            "itemtype": "method",
            "name": "\"on\"",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "callback",
                    "type": "Function(string, Object)"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "Context"
        },
        {
            "file": "core/Context.js",
            "line": 185,
            "description": "Unbind an event by type and handler.\n  This undoes the work of \"on\".",
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "function object to remove",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "internal event handler object (for chaining)",
                "type": "EventHandler"
            },
            "class": "Context"
        },
        {
            "file": "core/Context.js",
            "line": 199,
            "description": "Add event handler object to set of downstream handlers.",
            "itemtype": "method",
            "name": "pipe",
            "params": [
                {
                    "name": "target",
                    "description": "event handler target object",
                    "type": "EventHandler"
                }
            ],
            "return": {
                "description": "passed event handler",
                "type": "EventHandler"
            },
            "class": "Context"
        },
        {
            "file": "core/Context.js",
            "line": 211,
            "description": "Remove handler object from set of downstream handlers.\n  Undoes work of \"pipe\".",
            "itemtype": "method",
            "name": "unpipe",
            "params": [
                {
                    "name": "target",
                    "description": "target handler object",
                    "type": "EventHandler"
                }
            ],
            "return": {
                "description": "provided target",
                "type": "EventHandler"
            },
            "class": "Context"
        },
        {
            "file": "core/ElementAllocator.js",
            "line": 29,
            "description": "Move the document elements from their original container to a new one.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "migrate",
            "params": [
                {
                    "name": "container",
                    "description": "document element to which Famo.us content will be migrated",
                    "type": "Node"
                }
            ],
            "class": "ElementAllocator"
        },
        {
            "file": "core/ElementAllocator.js",
            "line": 53,
            "description": "Allocate an element of specified type from the pool.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "allocate",
            "params": [
                {
                    "name": "type",
                    "description": "type of element, e.g. 'div'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "allocated document element",
                "type": "Node"
            },
            "class": "ElementAllocator"
        },
        {
            "file": "core/ElementAllocator.js",
            "line": 78,
            "description": "De-allocate an element of specified type to the pool.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deallocate",
            "params": [
                {
                    "name": "element",
                    "description": "document element to deallocate",
                    "type": "Node"
                }
            ],
            "class": "ElementAllocator"
        },
        {
            "file": "core/ElementAllocator.js",
            "line": 93,
            "description": "Get count of total allocated nodes in the document.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getNodeCount",
            "return": {
                "description": "total node count",
                "type": "Number"
            },
            "class": "ElementAllocator"
        },
        {
            "file": "core/Engine.js",
            "line": 52,
            "class": "Engine"
        },
        {
            "file": "core/Engine.js",
            "line": 55,
            "description": "Inside requestAnimationFrame loop, step() is called, which:\n  calculates current FPS (throttling loop if it is over limit set in setFPSCap),\n  emits dataless 'prerender' event on start of loop,\n  calls in order any one-shot functions registered by nextTick on last loop,\n  calls Context.update on all Context objects registered,\n  and emits dataless 'postrender' event on end of loop.",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "step",
            "class": "Engine"
        },
        {
            "file": "core/Engine.js",
            "line": 132,
            "description": "Add event handler object to set of downstream handlers.",
            "itemtype": "method",
            "name": "pipe",
            "params": [
                {
                    "name": "target",
                    "description": "event handler target object",
                    "type": "EventHandler"
                }
            ],
            "return": {
                "description": "passed event handler",
                "type": "EventHandler"
            },
            "class": "Engine"
        },
        {
            "file": "core/Engine.js",
            "line": 145,
            "description": "Remove handler object from set of downstream handlers.\n  Undoes work of \"pipe\".",
            "itemtype": "method",
            "name": "unpipe",
            "params": [
                {
                    "name": "target",
                    "description": "target handler object",
                    "type": "EventHandler"
                }
            ],
            "return": {
                "description": "provided target",
                "type": "EventHandler"
            },
            "class": "Engine"
        },
        {
            "file": "core/Engine.js",
            "line": 159,
            "description": "Bind a callback function to an event type handled by this object.",
            "static": 1,
            "itemtype": "method",
            "name": "\"on\"",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "callback",
                    "type": "Function(string, Object)"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "Engine"
        },
        {
            "file": "core/Engine.js",
            "line": 177,
            "description": "Trigger an event, sending to all downstream handlers\n  listening for provided 'type' key.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "event data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "Engine"
        },
        {
            "file": "core/Engine.js",
            "line": 191,
            "description": "Unbind an event by type and handler.\n  This undoes the work of \"on\".",
            "static": 1,
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "function object to remove",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "internal event handler object (for chaining)",
                "type": "EventHandler"
            },
            "class": "Engine"
        },
        {
            "file": "core/Engine.js",
            "line": 206,
            "description": "Return the current calculated frames per second of the Engine.",
            "static": 1,
            "itemtype": "method",
            "name": "getFPS",
            "return": {
                "description": "calculated fps",
                "type": "Number"
            },
            "class": "Engine"
        },
        {
            "file": "core/Engine.js",
            "line": 218,
            "description": "Set the maximum fps at which the system should run. If internal render\n   loop is called at a greater frequency than this FPSCap, Engine will\n   throttle render and update until this rate is achieved.",
            "static": 1,
            "itemtype": "method",
            "name": "setFPSCap",
            "params": [
                {
                    "name": "fps",
                    "description": "maximum frames per second",
                    "type": "Number"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "core/Engine.js",
            "line": 232,
            "description": "Return engine options.",
            "static": 1,
            "itemtype": "method",
            "name": "getOptions",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "engine options",
                "type": "Object"
            },
            "class": "Engine"
        },
        {
            "file": "core/Engine.js",
            "line": 244,
            "description": "Set engine options",
            "static": 1,
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "fpsCap",
                            "description": "maximum fps at which the system should run",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "runLoop",
                            "description": "whether the run loop should continue",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "containerType",
                            "description": "type of container element.  Defaults to 'div'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"div\""
                        },
                        {
                            "name": "containerClass",
                            "description": "type of container element.  Defaults to 'famous-container'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"famous-container\""
                        }
                    ]
                }
            ],
            "class": "Engine"
        },
        {
            "file": "core/Engine.js",
            "line": 260,
            "description": "Creates a new Context for rendering and event handling with\n   provided document element as top of each tree. This will be tracked by the\n   process-wide Engine.",
            "static": 1,
            "itemtype": "method",
            "name": "createContext",
            "params": [
                {
                    "name": "el",
                    "description": "will be top of Famo.us document element tree",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "new Context within el",
                "type": "Context"
            },
            "class": "Engine"
        },
        {
            "file": "core/Engine.js",
            "line": 286,
            "description": "Registers an existing context to be updated within the run loop.",
            "static": 1,
            "itemtype": "method",
            "name": "registerContext",
            "params": [
                {
                    "name": "context",
                    "description": "Context to register",
                    "type": "Context"
                }
            ],
            "return": {
                "description": "provided context",
                "type": "FamousContext"
            },
            "class": "Engine"
        },
        {
            "file": "core/Engine.js",
            "line": 300,
            "description": "Queue a function to be executed on the next tick of the\n   Engine.",
            "static": 1,
            "itemtype": "method",
            "name": "nextTick",
            "params": [
                {
                    "name": "fn",
                    "description": "function accepting window object",
                    "type": "Function(Object)"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "core/Engine.js",
            "line": 313,
            "description": "Queue a function to be executed sometime soon, at a time that is\n   unlikely to affect frame rate.",
            "static": 1,
            "itemtype": "method",
            "name": "defer",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "core/Entity.js",
            "line": 22,
            "description": "Get entity from global index.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "entity reigstration id",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "entity in the global index",
                "type": "Surface"
            },
            "class": "Entity"
        },
        {
            "file": "core/Entity.js",
            "line": 34,
            "description": "Overwrite entity in the global index",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "entity reigstration id",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "entity to add to the global index",
                "type": "Surface"
            },
            "class": "Entity"
        },
        {
            "file": "core/Entity.js",
            "line": 46,
            "description": "Add entity to global index",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "entity",
                    "description": "to add to global index",
                    "type": "Surface"
                }
            ],
            "return": {
                "description": "new id",
                "type": "Number"
            },
            "class": "Entity"
        },
        {
            "file": "core/Entity.js",
            "line": 60,
            "description": "Remove entity from global index",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "unregister",
            "params": [
                {
                    "name": "id",
                    "description": "entity reigstration id",
                    "type": "Number"
                }
            ],
            "class": "Entity"
        },
        {
            "file": "core/EventEmitter.js",
            "line": 22,
            "description": "Trigger an event, sending to all downstream handlers\n  listening for provided 'type' key.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "event data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "EventEmitter"
        },
        {
            "file": "core/EventEmitter.js",
            "line": 42,
            "description": "Bind a callback function to an event type handled by this object.",
            "itemtype": "method",
            "name": "\"on\"",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "callback",
                    "type": "Function(string, Object)"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "EventEmitter"
        },
        {
            "file": "core/EventEmitter.js",
            "line": 58,
            "description": "Alias for \"on\".",
            "itemtype": "method",
            "name": "addListener",
            "class": "EventEmitter"
        },
        {
            "file": "core/EventEmitter.js",
            "line": 64,
            "description": "Unbind an event by type and handler.\n  This undoes the work of \"on\".",
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "function object to remove",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventEmitter"
            },
            "class": "EventEmitter"
        },
        {
            "file": "core/EventEmitter.js",
            "line": 80,
            "description": "Call event handlers with this set to owner.",
            "itemtype": "method",
            "name": "bindThis",
            "params": [
                {
                    "name": "owner",
                    "description": "object this EventEmitter belongs to",
                    "type": "Object"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "core/EventHandler.js",
            "line": 33,
            "description": "Assign an event handler to receive an object's input events.",
            "itemtype": "method",
            "name": "setInputHandler",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "object to mix trigger, subscribe, and unsubscribe functions into",
                    "type": "Object"
                },
                {
                    "name": "handler",
                    "description": "assigned event handler",
                    "type": "EventHandler"
                }
            ],
            "class": "EventHandler"
        },
        {
            "file": "core/EventHandler.js",
            "line": 50,
            "description": "Assign an event handler to receive an object's output events.",
            "itemtype": "method",
            "name": "setOutputHandler",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "object to mix pipe, unpipe, on, addListener, and removeListener functions into",
                    "type": "Object"
                },
                {
                    "name": "handler",
                    "description": "assigned event handler",
                    "type": "EventHandler"
                }
            ],
            "class": "EventHandler"
        },
        {
            "file": "core/EventHandler.js",
            "line": 68,
            "description": "Trigger an event, sending to all downstream handlers\n  listening for provided 'type' key.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "event data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "EventHandler"
        },
        {
            "file": "core/EventHandler.js",
            "line": 90,
            "description": "Alias for emit",
            "itemtype": "method",
            "name": "addListener",
            "class": "EventHandler"
        },
        {
            "file": "core/EventHandler.js",
            "line": 96,
            "description": "Add event handler object to set of downstream handlers.",
            "itemtype": "method",
            "name": "pipe",
            "params": [
                {
                    "name": "target",
                    "description": "event handler target object",
                    "type": "EventHandler"
                }
            ],
            "return": {
                "description": "passed event handler",
                "type": "EventHandler"
            },
            "class": "EventHandler"
        },
        {
            "file": "core/EventHandler.js",
            "line": 117,
            "description": "Remove handler object from set of downstream handlers.\n  Undoes work of \"pipe\".",
            "itemtype": "method",
            "name": "unpipe",
            "params": [
                {
                    "name": "target",
                    "description": "target handler object",
                    "type": "EventHandler"
                }
            ],
            "return": {
                "description": "provided target",
                "type": "EventHandler"
            },
            "class": "EventHandler"
        },
        {
            "file": "core/EventHandler.js",
            "line": 140,
            "description": "Bind a callback function to an event type handled by this object.",
            "itemtype": "method",
            "name": "\"on\"",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "callback",
                    "type": "Function(string, Object)"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "EventHandler"
        },
        {
            "file": "core/EventHandler.js",
            "line": 161,
            "description": "Alias for \"on\"",
            "itemtype": "method",
            "name": "addListener",
            "class": "EventHandler"
        },
        {
            "file": "core/EventHandler.js",
            "line": 167,
            "description": "Listen for events from an upstream event handler.",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "source",
                    "description": "source emitter object",
                    "type": "EventEmitter"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "EventHandler"
        },
        {
            "file": "core/EventHandler.js",
            "line": 186,
            "description": "Stop listening to events from an upstream event handler.",
            "itemtype": "method",
            "name": "unsubscribe",
            "params": [
                {
                    "name": "source",
                    "description": "source emitter object",
                    "type": "EventEmitter"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "EventHandler"
        },
        {
            "file": "core/Group.js",
            "line": 36,
            "class": "Group"
        },
        {
            "file": "core/Group.js",
            "line": 43,
            "description": "Add renderables to this component's render tree.",
            "itemtype": "method",
            "name": "add",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "renderable object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Render wrapping provided object, if not already a RenderNode",
                "type": "RenderNode"
            },
            "class": "Group"
        },
        {
            "file": "core/Group.js",
            "line": 55,
            "description": "Generate a render spec from the contents of this component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Number"
            },
            "class": "Group"
        },
        {
            "file": "core/Group.js",
            "line": 66,
            "description": "Place the document element this component manages into the document.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deploy",
            "params": [
                {
                    "name": "target",
                    "description": "document parent of this container",
                    "type": "Node"
                }
            ],
            "class": "Group"
        },
        {
            "file": "core/Group.js",
            "line": 77,
            "description": "Remove this component and contained content from the document",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "recall",
            "params": [
                {
                    "name": "target",
                    "description": "node to which the component was deployed",
                    "type": "Node"
                }
            ],
            "class": "Group"
        },
        {
            "file": "core/Group.js",
            "line": 90,
            "description": "Apply changes from this component to the corresponding document element.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "commit",
            "params": [
                {
                    "name": "context",
                    "description": "update spec passed in from above in the render tree.",
                    "type": "Object"
                }
            ],
            "class": "Group"
        },
        {
            "file": "core/Modifier.js",
            "line": 59,
            "description": "Function, object, or static transform matrix which provides the transform.\n  This is evaluated on every tick of the engine.",
            "itemtype": "method",
            "name": "transformFrom",
            "params": [
                {
                    "name": "transform",
                    "description": "transform provider object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "Modifier"
            },
            "class": "Modifier"
        },
        {
            "file": "core/Modifier.js",
            "line": 78,
            "description": "Set function, object, or number to provide opacity, in range [0,1].",
            "itemtype": "method",
            "name": "opacityFrom",
            "params": [
                {
                    "name": "opacity",
                    "description": "provider object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "Modifier"
            },
            "class": "Modifier"
        },
        {
            "file": "core/Modifier.js",
            "line": 96,
            "description": "Set function, object, or numerical array to provide origin, as [x,y],\n  where x and y are in the range [0,1].",
            "itemtype": "method",
            "name": "originFrom",
            "params": [
                {
                    "name": "origin",
                    "description": "provider object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "Modifier"
            },
            "class": "Modifier"
        },
        {
            "file": "core/Modifier.js",
            "line": 116,
            "description": "Set function, object, or numerical array to provide size, as [width, height].",
            "itemtype": "method",
            "name": "sizeFrom",
            "params": [
                {
                    "name": "size",
                    "description": "provider object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "Modifier"
            },
            "class": "Modifier"
        },
        {
            "file": "core/Modifier.js",
            "line": 134,
            "description": "Deprecated: Prefer transformFrom with static Transform, or use a TransitionableTransform.",
            "deprecated": true,
            "itemtype": "method",
            "name": "setTransform",
            "params": [
                {
                    "name": "transform",
                    "description": "Transform to transition to",
                    "type": "Transform"
                },
                {
                    "name": "transition",
                    "description": "Valid transitionable object",
                    "type": "Transitionable"
                },
                {
                    "name": "callback",
                    "description": "callback to call after transition completes",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this",
                "type": "Modifier"
            },
            "class": "Modifier"
        },
        {
            "file": "core/Modifier.js",
            "line": 157,
            "description": "Deprecated: Prefer opacityFrom with static opacity array, or use a Transitionable with that opacity.",
            "deprecated": true,
            "itemtype": "method",
            "name": "setOpacity",
            "params": [
                {
                    "name": "opacity",
                    "description": "Opacity value to transition to.",
                    "type": "Number"
                },
                {
                    "name": "transition",
                    "description": "Valid transitionable object",
                    "type": "Transitionable"
                },
                {
                    "name": "callback",
                    "description": "callback to call after transition completes",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this",
                "type": "Modifier"
            },
            "class": "Modifier"
        },
        {
            "file": "core/Modifier.js",
            "line": 179,
            "description": "Deprecated: Prefer originFrom with static origin array, or use a Transitionable with that origin.",
            "deprecated": true,
            "itemtype": "method",
            "name": "setOrigin",
            "params": [
                {
                    "name": "origin",
                    "description": "two element array with values between 0 and 1.",
                    "type": "Array.Number"
                },
                {
                    "name": "transition",
                    "description": "Valid transitionable object",
                    "type": "Transitionable"
                },
                {
                    "name": "callback",
                    "description": "callback to call after transition completes",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this",
                "type": "Modifier"
            },
            "class": "Modifier"
        },
        {
            "file": "core/Modifier.js",
            "line": 204,
            "description": "Deprecated: Prefer sizeFrom with static origin array, or use a Transitionable with that size.",
            "deprecated": true,
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "size",
                    "description": "two element array of [width, height]",
                    "type": "Array.Number"
                },
                {
                    "name": "transition",
                    "description": "Valid transitionable object",
                    "type": "Transitionable"
                },
                {
                    "name": "callback",
                    "description": "callback to call after transition completes",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this",
                "type": "Modifier"
            },
            "class": "Modifier"
        },
        {
            "file": "core/Modifier.js",
            "line": 226,
            "description": "Deprecated: Prefer to stop transform in your provider object.",
            "deprecated": true,
            "itemtype": "method",
            "name": "halt",
            "class": "Modifier"
        },
        {
            "file": "core/Modifier.js",
            "line": 242,
            "description": "Deprecated: Prefer to use your provided transform or output of your transform provider.",
            "deprecated": true,
            "itemtype": "method",
            "name": "getTransform",
            "return": {
                "description": "transform provider object",
                "type": "Object"
            },
            "class": "Modifier"
        },
        {
            "file": "core/Modifier.js",
            "line": 252,
            "description": "Deprecated: Prefer to determine the end state of your transform from your transform provider",
            "deprecated": true,
            "itemtype": "method",
            "name": "getFinalTransform",
            "return": {
                "description": "transform matrix",
                "type": "Transform"
            },
            "class": "Modifier"
        },
        {
            "file": "core/Modifier.js",
            "line": 262,
            "description": "Deprecated: Prefer to use your provided opacity or output of your opacity provider.",
            "deprecated": true,
            "itemtype": "method",
            "name": "getOpacity",
            "return": {
                "description": "opacity provider object",
                "type": "Object"
            },
            "class": "Modifier"
        },
        {
            "file": "core/Modifier.js",
            "line": 271,
            "description": "Deprecated: Prefer to use your provided origin or output of your origin provider.",
            "deprecated": true,
            "itemtype": "method",
            "name": "getOrigin",
            "return": {
                "description": "origin provider object",
                "type": "Object"
            },
            "class": "Modifier"
        },
        {
            "file": "core/Modifier.js",
            "line": 281,
            "description": "Deprecated: Prefer to use your provided size or output of your size provider.",
            "deprecated": true,
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "size provider object",
                "type": "Object"
            },
            "class": "Modifier"
        },
        {
            "file": "core/Modifier.js",
            "line": 299,
            "description": "Return render spec for this Modifier, applying to the provided\n   target component.  This is similar to render() for Surfaces.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "modify",
            "params": [
                {
                    "name": "target",
                    "description": "(already rendered) render spec to\n   which to apply the transform.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "render spec for this Modifier, including the\n   provided target",
                "type": "Object"
            },
            "class": "Modifier"
        },
        {
            "file": "core/OptionsManager.js",
            "line": 41,
            "description": "Create options manager from source dictionary with arguments overriden by patch dictionary.",
            "static": 1,
            "itemtype": "method",
            "name": "OptionsManager.patch",
            "params": [
                {
                    "name": "source",
                    "description": "source arguments",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "argument additions and overwrites",
                    "type": "...Object"
                }
            ],
            "return": {
                "description": "source object",
                "type": "Object"
            },
            "class": "OptionsManager"
        },
        {
            "file": "core/OptionsManager.js",
            "line": 63,
            "description": "Create OptionsManager from source with arguments overriden by patches.\n  Triggers 'change' event on this object's event handler if the state of\n  the OptionsManager changes as a result.",
            "itemtype": "method",
            "name": "patch",
            "params": [
                {
                    "name": "arguments",
                    "description": "list of patch objects",
                    "type": "...Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "OptionsManager"
            },
            "class": "OptionsManager"
        },
        {
            "file": "core/OptionsManager.js",
            "line": 89,
            "description": "Alias for patch",
            "itemtype": "method",
            "name": "setOptions",
            "class": "OptionsManager"
        },
        {
            "file": "core/OptionsManager.js",
            "line": 97,
            "description": "Return OptionsManager based on sub-object retrieved by key",
            "itemtype": "method",
            "name": "key",
            "params": [
                {
                    "name": "identifier",
                    "description": "key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "new options manager with the value",
                "type": "OptionsManager"
            },
            "class": "OptionsManager"
        },
        {
            "file": "core/OptionsManager.js",
            "line": 111,
            "description": "Look up value by key",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "associated object",
                "type": "Object"
            },
            "class": "OptionsManager"
        },
        {
            "file": "core/OptionsManager.js",
            "line": 122,
            "description": "Alias for get",
            "itemtype": "method",
            "name": "getOptions",
            "class": "OptionsManager"
        },
        {
            "file": "core/OptionsManager.js",
            "line": 128,
            "description": "Set key to value.  Outputs 'change' event if a value is overwritten.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "key string",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "new options manager based on the value object",
                "type": "OptionsManager"
            },
            "class": "OptionsManager"
        },
        {
            "file": "core/OptionsManager.js",
            "line": 144,
            "description": "Return entire object contents of this OptionsManager.",
            "itemtype": "method",
            "name": "value",
            "return": {
                "description": "current state of options",
                "type": "Object"
            },
            "class": "OptionsManager"
        },
        {
            "file": "core/OptionsManager.js",
            "line": 155,
            "description": "Bind a callback function to an event type handled by this object.",
            "itemtype": "method",
            "name": "\"on\"",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'change')",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "callback",
                    "type": "Function(string, Object)"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "OptionsManager"
        },
        {
            "file": "core/OptionsManager.js",
            "line": 169,
            "description": "Unbind an event by type and handler.\n  This undoes the work of \"on\".",
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'change')",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "function object to remove",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "internal event handler object (for chaining)",
                "type": "EventHandler"
            },
            "class": "OptionsManager"
        },
        {
            "file": "core/OptionsManager.js",
            "line": 184,
            "description": "Add event handler object to set of downstream handlers.",
            "itemtype": "method",
            "name": "pipe",
            "params": [
                {
                    "name": "target",
                    "description": "event handler target object",
                    "type": "EventHandler"
                }
            ],
            "return": {
                "description": "passed event handler",
                "type": "EventHandler"
            },
            "class": "OptionsManager"
        },
        {
            "file": "core/OptionsManager.js",
            "line": 197,
            "description": "Remove handler object from set of downstream handlers.\nUndoes work of \"pipe\"",
            "itemtype": "method",
            "name": "unpipe",
            "params": [
                {
                    "name": "target",
                    "description": "target handler object",
                    "type": "EventHandler"
                }
            ],
            "return": {
                "description": "provided target",
                "type": "EventHandler"
            },
            "class": "OptionsManager"
        },
        {
            "file": "core/RenderNode.js",
            "line": 38,
            "description": "Append a renderable to the list of this node's children.\n  This produces a new RenderNode in the tree.\n  Note: Does not double-wrap if child is a RenderNode already.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "child",
                    "description": "renderable object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "new render node wrapping child",
                "type": "RenderNode"
            },
            "class": "RenderNode"
        },
        {
            "file": "core/RenderNode.js",
            "line": 60,
            "description": "Return the single wrapped object.  Returns null if this node has multiple child nodes.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "contained renderable object",
                "type": "Ojbect"
            },
            "class": "RenderNode"
        },
        {
            "file": "core/RenderNode.js",
            "line": 71,
            "description": "Overwrite the list of children to contain the single provided object",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "child",
                    "description": "renderable object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this render node, or child if it is a RenderNode",
                "type": "RenderNode"
            },
            "class": "RenderNode"
        },
        {
            "file": "core/RenderNode.js",
            "line": 89,
            "description": "Get render size of contained object.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "size of this or size of single child.",
                "type": "Array.Number"
            },
            "class": "RenderNode"
        },
        {
            "file": "core/RenderNode.js",
            "line": 118,
            "description": "Commit the content change from this node to the document.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "commit",
            "params": [
                {
                    "name": "context",
                    "description": "render context",
                    "type": "Context"
                }
            ],
            "class": "RenderNode"
        },
        {
            "file": "core/RenderNode.js",
            "line": 141,
            "description": "Generate a render spec from the contents of the wrapped component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "render specification for the component subtree\n   only under this node.",
                "type": "Object"
            },
            "class": "RenderNode"
        },
        {
            "file": "core/Scene.js",
            "line": 47,
            "description": "Clone this scene",
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "deep copy of this scene",
                "type": "Scene"
            },
            "class": "Scene"
        },
        {
            "file": "core/Scene.js",
            "line": 136,
            "description": "Builds and renders a scene graph based on a canonical declarative scene definition.\nSee examples/Scene/example.js.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "definition",
                    "description": "definition in the format of a render spec.",
                    "type": "Object"
                }
            ],
            "class": "Scene"
        },
        {
            "file": "core/Scene.js",
            "line": 150,
            "description": "Add renderables to this component's render tree",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "obj",
                    "description": "renderable object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Render wrapping provided object, if not already a RenderNode",
                "type": "RenderNode"
            },
            "class": "Scene"
        },
        {
            "file": "core/Scene.js",
            "line": 162,
            "description": "Generate a render spec from the contents of this component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Number"
            },
            "class": "Scene"
        },
        {
            "file": "core/SpecParser.js",
            "line": 29,
            "description": "Convert a render spec coming from the context's render chain to an\n   update spec for the update chain. This is the only major entry point\n   for a consumer of this class.",
            "itemtype": "method",
            "name": "parse",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "spec",
                    "description": "input render spec",
                    "type": "RenderSpec"
                },
                {
                    "name": "context",
                    "description": "context to do the parse in",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the resulting update spec (if no callback\n  specified, else none)",
                "type": "Object"
            },
            "class": "SpecParser"
        },
        {
            "file": "core/SpecParser.js",
            "line": 47,
            "description": "Convert a renderSpec coming from the context's render chain to an update\n   spec for the update chain. This is the only major entrypoint for a\n   consumer of this class.",
            "itemtype": "method",
            "name": "parse",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "spec",
                    "description": "input render spec",
                    "type": "RenderSpec"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Context"
                }
            ],
            "return": {
                "description": "the resulting update spec",
                "type": "UpdateSpec"
            },
            "class": "SpecParser"
        },
        {
            "file": "core/SpecParser.js",
            "line": 65,
            "description": "Prepare SpecParser for re-use (or first use) by setting internal state\n to blank.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "reset",
            "class": "SpecParser"
        },
        {
            "file": "core/Surface.js",
            "line": 52,
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 68,
            "description": "Bind a callback function to an event type handled by this object.",
            "itemtype": "method",
            "name": "\"on\"",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "handler callback",
                    "type": "Function(string, Object)"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 82,
            "description": "Unbind an event by type and handler.\n  This undoes the work of \"on\"",
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "handler",
                    "type": "Function(string, Object)"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 94,
            "description": "Trigger an event, sending to all downstream handlers\n  listening for provided 'type' key.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "event data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 111,
            "description": "Add event handler object to set of downstream handlers.",
            "itemtype": "method",
            "name": "pipe",
            "params": [
                {
                    "name": "target",
                    "description": "event handler target object",
                    "type": "EventHandler"
                }
            ],
            "return": {
                "description": "passed event handler",
                "type": "EventHandler"
            },
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 123,
            "description": "Remove handler object from set of downstream handlers.\n  Undoes work of \"pipe\"",
            "itemtype": "method",
            "name": "unpipe",
            "params": [
                {
                    "name": "target",
                    "description": "target handler object",
                    "type": "EventHandler"
                }
            ],
            "return": {
                "description": "provided target",
                "type": "EventHandler"
            },
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 136,
            "description": "Return spec for this surface. Note that for a base surface, this is\n   simply an id.",
            "itemtype": "method",
            "name": "render",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "render spec for this surface (spec id)",
                "type": "Object"
            },
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 148,
            "description": "Set CSS-style properties on this Surface. Note that this will cause\n   dirtying and thus re-rendering, even if values do not change.",
            "itemtype": "method",
            "name": "setProperties",
            "params": [
                {
                    "name": "properties",
                    "description": "property dictionary of \"key\" => \"value\"",
                    "type": "Object"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 162,
            "description": "Get CSS-style properties on this Surface.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "Dictionary of this Surface's properties.",
                "type": "Object"
            },
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 173,
            "description": "Add CSS-style class to the list of classes on this Surface. Note\n  this will map directly to the HTML property of the actual\n  corresponding rendered <div>.",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "className",
                    "description": "name of class to add",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 188,
            "description": "Remove CSS-style class from the list of classes on this Surface.\n  Note this will map directly to the HTML property of the actual\n  corresponding rendered <div>.",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "className",
                    "description": "name of class to remove",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 204,
            "description": "Reset class list to provided dictionary.",
            "itemtype": "method",
            "name": "setClasses",
            "params": [
                {
                    "name": "classList",
                    "description": "",
                    "type": "Array.string"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 220,
            "description": "Get array of CSS-style classes attached to this div.",
            "itemtype": "method",
            "name": "getClasslist",
            "return": {
                "description": "array of class names",
                "type": "Array.string"
            },
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 230,
            "description": "Set or overwrite inner (HTML) content of this surface. Note that this\n   causes a re-rendering if the content has changed.",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "content",
                    "description": "HTML content",
                    "type": "String"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 244,
            "description": "Return inner (HTML) content of this surface.",
            "itemtype": "method",
            "name": "getContent",
            "return": {
                "description": "inner (HTML) content",
                "type": "String"
            },
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 255,
            "description": "Set options for this surface",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "overrides for default options.  See constructor.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 307,
            "description": "Return a Matrix's webkit css representation to be used with the\n   CSS3 -webkit-transform style.\n   Example: -webkit-transform: matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,716,243,0,1)",
            "itemtype": "method",
            "name": "_formatCSSTransform",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "m",
                    "description": "matrix",
                    "type": "FamousMatrix"
                }
            ],
            "return": {
                "description": "matrix3d CSS style representation of the transform",
                "type": "String"
            },
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 326,
            "description": "Directly apply given FamousMatrix to the document element as the\n  appropriate webkit CSS style.",
            "itemtype": "method",
            "name": "setMatrix",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "document element",
                    "type": "Element"
                },
                {
                    "name": "matrix",
                    "description": "",
                    "type": "FamousMatrix"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 370,
            "description": "One-time setup for an element to be ready for commits to document.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setup",
            "params": [
                {
                    "name": "allocator",
                    "description": "document element pool for this context",
                    "type": "ElementAllocator"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 404,
            "description": "Apply changes from this component to the corresponding document element.\nThis includes changes to classes, styles, size, content, opacity, origin,\nand matrix transforms.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "commit",
            "params": [
                {
                    "name": "context",
                    "description": "commit context",
                    "type": "Context"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 485,
            "description": "Remove all Famous-relevant attributes from a document element.\n  This is called by SurfaceManager's detach().\n  This is in some sense the reverse of .deploy().",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "cleanup",
            "params": [
                {
                    "name": "allocator",
                    "description": "",
                    "type": "ElementAllocator"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 523,
            "description": "Place the document element that this component manages into the document.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deploy",
            "params": [
                {
                    "name": "target",
                    "description": "document parent of this container",
                    "type": "Node"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 539,
            "description": "Remove any contained document content associated with this surface\n  from the actual document.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "recall",
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 552,
            "description": "Get the x and y dimensions of the surface.",
            "itemtype": "method",
            "name": "getSize",
            "params": [
                {
                    "name": "actual",
                    "description": "return computed size rather than provided",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "[x,y] size of surface",
                "type": "Array.Number"
            },
            "class": "Surface"
        },
        {
            "file": "core/Surface.js",
            "line": 563,
            "description": "Set x and y dimensions of the surface.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "size",
                    "description": "as [width, height]",
                    "type": "Array.Number"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "core/Transform.js",
            "line": 39,
            "description": "Multiply two or more Transform matrix types to return a Transform matrix.",
            "itemtype": "method",
            "name": "multiply4x4",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "left matrix",
                    "type": "Transform"
                },
                {
                    "name": "b",
                    "description": "right matrix",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "the resulting matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 69,
            "description": "Fast-multiply two or more Transform matrix types to return a\n   Matrix, assuming bottom row on each is [0 0 0 1].",
            "itemtype": "method",
            "name": "multiply",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "left matrix",
                    "type": "Transform"
                },
                {
                    "name": "b",
                    "description": "right matrix",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "the resulting matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 100,
            "description": "Return a Transform translated by additional amounts in each\n   dimension. This is equivalent to the result of\n\n   Matrix.multiply(Matrix.translate(t[0], t[1], t[2]), m).",
            "itemtype": "method",
            "name": "thenMove",
            "static": 1,
            "params": [
                {
                    "name": "m",
                    "description": "a matrix",
                    "type": "Transform"
                },
                {
                    "name": "t",
                    "description": "floats delta vector of length 2 or 3",
                    "type": "Array.Number"
                }
            ],
            "return": {
                "description": "the resulting translated matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 117,
            "description": "Return a Transform atrix which represents the result of a transform matrix\n   applied after a move. This is faster than the equivalent multiply.\n   This is equivalent to the result of:\n\n   Transform.multiply(m, Transform.translate(t[0], t[1], t[2])).",
            "itemtype": "method",
            "name": "moveThen",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "vector representing initial movement",
                    "type": "Array.Number"
                },
                {
                    "name": "m",
                    "description": "matrix to apply afterwards",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "the resulting matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 138,
            "description": "Return a Transform which represents a translation by specified\n   amounts in each dimension.",
            "itemtype": "method",
            "name": "translate",
            "static": 1,
            "params": [
                {
                    "name": "x",
                    "description": "x translation",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y translation",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z translation",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 154,
            "description": "Return a Transform scaled by a vector in each\n   dimension. This is a more performant equivalent to the result of\n\n   Transform.multiply(Transform.scale(s[0], s[1], s[2]), m).",
            "itemtype": "method",
            "name": "thenScale",
            "static": 1,
            "params": [
                {
                    "name": "m",
                    "description": "a matrix",
                    "type": "Transform"
                },
                {
                    "name": "s",
                    "description": "delta vector (array of floats &&\n   array.length == 3)",
                    "type": "Array.Number"
                }
            ],
            "return": {
                "description": "the resulting translated matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 176,
            "description": "Return a Transform which represents a scale by specified amounts\n   in each dimension.",
            "itemtype": "method",
            "name": "scale",
            "static": 1,
            "params": [
                {
                    "name": "x",
                    "description": "x scale factor",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y scale factor",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z scale factor",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 192,
            "description": "Return a Transform which represents a clockwise\n   rotation around the x axis.",
            "itemtype": "method",
            "name": "rotateX",
            "static": 1,
            "params": [
                {
                    "name": "theta",
                    "description": "radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 207,
            "description": "Return a Transform which represents a clockwise\n   rotation around the y axis.",
            "itemtype": "method",
            "name": "rotateY",
            "static": 1,
            "params": [
                {
                    "name": "theta",
                    "description": "radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 222,
            "description": "Return a Transform which represents a clockwise\n   rotation around the z axis.",
            "itemtype": "method",
            "name": "rotateZ",
            "static": 1,
            "params": [
                {
                    "name": "theta",
                    "description": "radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 237,
            "description": "Return a Transform which represents composed clockwise\n   rotations along each of the axes. Equivalent to the result of\n   Matrix.multiply(rotateX(phi), rotateY(theta), rotateZ(psi)).",
            "itemtype": "method",
            "name": "rotate",
            "static": 1,
            "params": [
                {
                    "name": "phi",
                    "description": "radians to rotate about the positive x axis",
                    "type": "Number"
                },
                {
                    "name": "theta",
                    "description": "radians to rotate about the positive y axis",
                    "type": "Number"
                },
                {
                    "name": "psi",
                    "description": "radians to rotate about the positive z axis",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 274,
            "description": "Return a Transform which represents an axis-angle rotation",
            "itemtype": "method",
            "name": "rotateAxis",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "unit vector representing the axis to rotate about",
                    "type": "Array.Number"
                },
                {
                    "name": "theta",
                    "description": "radians to rotate clockwise about the axis",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 307,
            "description": "Return a Transform which represents a transform matrix applied about\na separate origin point.",
            "itemtype": "method",
            "name": "aboutOrigin",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "origin point to apply matrix",
                    "type": "Array.Number"
                },
                {
                    "name": "m",
                    "description": "matrix to apply",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "the resulting matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 324,
            "description": "Return a Transform representation of a skew transformation",
            "itemtype": "method",
            "name": "skew",
            "static": 1,
            "params": [
                {
                    "name": "phi",
                    "description": "scale factor skew in the x axis",
                    "type": "Number"
                },
                {
                    "name": "theta",
                    "description": "scale factor skew in the y axis",
                    "type": "Number"
                },
                {
                    "name": "psi",
                    "description": "scale factor skew in the z axis",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 338,
            "description": "Returns a perspective Transform matrix",
            "itemtype": "method",
            "name": "perspective",
            "static": 1,
            "params": [
                {
                    "name": "focusZ",
                    "description": "z position of focal point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 350,
            "description": "Return translation vector component of given Transform",
            "itemtype": "method",
            "name": "getTranslate",
            "static": 1,
            "params": [
                {
                    "name": "m",
                    "description": "matrix",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "the translation vector [t_x, t_y, t_z]",
                "type": "Array.Number"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 362,
            "description": "Return inverse affine matrix for given Transform.\n  Note: This assumes m[3] = m[7] = m[11] = 0, and m[15] = 1.\n  Will provide incorrect results if not invertible or preconditions not met.",
            "itemtype": "method",
            "name": "inverse",
            "static": 1,
            "params": [
                {
                    "name": "m",
                    "description": "matrix",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "the resulting inverted matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 397,
            "description": "Returns the transpose of a 4x4 matrix",
            "itemtype": "method",
            "name": "transpose",
            "static": 1,
            "params": [
                {
                    "name": "m",
                    "description": "matrix",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "the resulting transposed matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 419,
            "description": "Decompose Transform into separate .translate, .rotate, .scale,\n   and .skew components.",
            "itemtype": "method",
            "name": "interpret",
            "static": 1,
            "params": [
                {
                    "name": "M",
                    "description": "tranform matrix",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "matrix spec object with component matrices .translate,\n   .rotate, .scale, .skew",
                "type": "Object"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 519,
            "description": "Weighted average between two matrices by averaging their\n    translation, rotation, scale, skew components.\n    f(M1,M2,t) = (1 - t) * M1 + t * M2",
            "itemtype": "method",
            "name": "average",
            "static": 1,
            "params": [
                {
                    "name": "M1",
                    "description": "f(M1,M2,0) = M1",
                    "type": "Transform"
                },
                {
                    "name": "M2",
                    "description": "f(M1,M2,1) = M2",
                    "type": "Transform"
                },
                {
                    "name": "t",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "resulting matrix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 552,
            "description": "Compose .translate, .rotate, .scale, .skew components into\nTransform matrix",
            "itemtype": "method",
            "name": "build",
            "static": 1,
            "params": [
                {
                    "name": "spec",
                    "description": "object with component matrices .translate,\n   .rotate, .scale, .skew",
                    "type": "MatrixSpec"
                }
            ],
            "return": {
                "description": "composed martix",
                "type": "Transform"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 569,
            "description": "Determine if two Transforms are component-wise equal\n  Warning: breaks on perspective Transforms",
            "itemtype": "method",
            "name": "equals",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "matrix",
                    "type": "Transform"
                },
                {
                    "name": "b",
                    "description": "matrix",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 583,
            "description": "Determine if two Transforms are component-wise unequal\n  Warning: breaks on perspective Transforms",
            "itemtype": "method",
            "name": "notEquals",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "matrix",
                    "type": "Transform"
                },
                {
                    "name": "b",
                    "description": "matrix",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 605,
            "description": "Constrain angle-trio components to range of [-pi, pi).",
            "itemtype": "method",
            "name": "normalizeRotation",
            "static": 1,
            "params": [
                {
                    "name": "rotation",
                    "description": "phi, theta, psi (array of floats\n   && array.length == 3)",
                    "type": "Array.Number"
                }
            ],
            "return": {
                "description": "new phi, theta, psi triplet\n   (array of floats && array.length == 3)",
                "type": "Array.Number"
            },
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 639,
            "description": "(Property) Array defining a translation forward in z by 1",
            "itemtype": "property",
            "name": "inFront",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "Transform"
        },
        {
            "file": "core/Transform.js",
            "line": 648,
            "description": "(Property) Array defining a translation backwards in z by 1",
            "itemtype": "property",
            "name": "behind",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "Transform"
        },
        {
            "file": "core/View.js",
            "line": 43,
            "description": "Look up options value by key",
            "itemtype": "method",
            "name": "getOptions",
            "params": [
                {
                    "name": "key",
                    "description": "key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "associated object",
                "type": "Object"
            },
            "class": "View"
        },
        {
            "file": "core/View.js",
            "line": 65,
            "description": "Add a child renderable to the view.\n  Note: This is meant to be used by an inheriting class\n  rather than from outside the prototype chain.",
            "itemtype": "method",
            "name": "add",
            "return": {
                "description": "",
                "type": "RenderNode"
            },
            "access": "protected",
            "tagname": "",
            "class": "View"
        },
        {
            "file": "core/View.js",
            "line": 78,
            "description": "Alias for add",
            "itemtype": "method",
            "name": "_add",
            "class": "View"
        },
        {
            "file": "core/View.js",
            "line": 84,
            "description": "Generate a render spec from the contents of this component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Number"
            },
            "class": "View"
        },
        {
            "file": "core/View.js",
            "line": 95,
            "description": "Return size of contained element.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "[width, height]",
                "type": "Array.Number"
            },
            "class": "View"
        },
        {
            "file": "core/ViewSequence.js",
            "line": 115,
            "description": "Return ViewSequence node previous to this node in the list, respecting looping if applied.",
            "itemtype": "method",
            "name": "getPrevious",
            "return": {
                "description": "previous node.",
                "type": "ViewSequence"
            },
            "class": "ViewSequence"
        },
        {
            "file": "core/ViewSequence.js",
            "line": 138,
            "description": "Return ViewSequence node next after this node in the list, respecting looping if applied.",
            "itemtype": "method",
            "name": "getNext",
            "return": {
                "description": "previous node.",
                "type": "ViewSequence"
            },
            "class": "ViewSequence"
        },
        {
            "file": "core/ViewSequence.js",
            "line": 161,
            "description": "Return index of this ViewSequence node.",
            "itemtype": "method",
            "name": "getIndex",
            "return": {
                "description": "index",
                "type": "Number"
            },
            "class": "ViewSequence"
        },
        {
            "file": "core/ViewSequence.js",
            "line": 171,
            "description": "Return printable version of this ViewSequence node.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "this index as a string",
                "type": "String"
            },
            "class": "ViewSequence"
        },
        {
            "file": "core/ViewSequence.js",
            "line": 181,
            "description": "Add one or more objects to the beginning of the sequence.",
            "itemtype": "method",
            "name": "unshift",
            "params": [
                {
                    "name": "value",
                    "description": "arguments array of objects",
                    "type": "...Object"
                }
            ],
            "class": "ViewSequence"
        },
        {
            "file": "core/ViewSequence.js",
            "line": 192,
            "description": "Add one or more objects to the end of the sequence.",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "value",
                    "description": "arguments array of objects",
                    "type": "...Object"
                }
            ],
            "class": "ViewSequence"
        },
        {
            "file": "core/ViewSequence.js",
            "line": 202,
            "description": "Remove objects from the sequence",
            "itemtype": "method",
            "name": "splice",
            "params": [
                {
                    "name": "index",
                    "description": "starting index for removal",
                    "type": "Number"
                },
                {
                    "name": "howMany",
                    "description": "how many elements to remove",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "arguments array of objects",
                    "type": "...Object"
                }
            ],
            "class": "ViewSequence"
        },
        {
            "file": "core/ViewSequence.js",
            "line": 216,
            "description": "Exchange this element's sequence position with another's.",
            "itemtype": "method",
            "name": "swap",
            "params": [
                {
                    "name": "other",
                    "description": "element to swap with.",
                    "type": "ViewSequence"
                }
            ],
            "class": "ViewSequence"
        },
        {
            "file": "core/ViewSequence.js",
            "line": 253,
            "description": "Return value of this ViewSequence node.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "value of thiss",
                "type": "Object"
            },
            "class": "ViewSequence"
        },
        {
            "file": "core/ViewSequence.js",
            "line": 263,
            "description": "Call getSize() on the contained View.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "[width, height]",
                "type": "Array.Number"
            },
            "class": "ViewSequence"
        },
        {
            "file": "core/ViewSequence.js",
            "line": 274,
            "description": "Generate a render spec from the contents of this component.\nSpecifically, this will render the value at the current index.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Number"
            },
            "class": "ViewSequence"
        },
        {
            "file": "events/EventArbiter.js",
            "line": 30,
            "description": "Set switch to this mode, passing events to the corresponding\n  EventHandler.  If mode has changed, emits 'change' event,\n  emits 'unpipe' event to the old mode's handler, and emits 'pipe'\n  event to the new mode's handler.",
            "itemtype": "method",
            "name": "setMode",
            "params": [
                {
                    "name": "mode",
                    "description": "indicating which event handler to send to.",
                    "type": "String | number"
                }
            ],
            "class": "EventArbiter"
        },
        {
            "file": "events/EventArbiter.js",
            "line": 51,
            "description": "Return the existing EventHandler corresponding to this\n  mode, creating one if it doesn't exist.",
            "itemtype": "method",
            "name": "forMode",
            "params": [
                {
                    "name": "mode",
                    "description": "mode to which this eventHandler corresponds",
                    "type": "String | number"
                }
            ],
            "return": {
                "description": "eventHandler corresponding to this mode",
                "type": "EventHandler"
            },
            "class": "EventArbiter"
        },
        {
            "file": "events/EventArbiter.js",
            "line": 66,
            "description": "Trigger an event, sending to currently selected handler, if\n  it is listening for provided 'type' key.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "eventType",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "event data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "EventArbiter"
        },
        {
            "file": "events/EventFilter.js",
            "line": 30,
            "description": "If filter condition is met, trigger an event, sending to all downstream handlers\n  listening for provided 'type' key.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "event data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "EventFilter"
        },
        {
            "file": "events/EventFilter.js",
            "line": 45,
            "description": "An alias of emit. Trigger determines whether to send\n events based on the return value of it's condition function\n when passed the event type and associated data.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type",
                    "description": "name of the event",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "associated data",
                    "type": "Object"
                }
            ],
            "class": "EventFilter"
        },
        {
            "file": "events/EventMapper.js",
            "line": 33,
            "description": "Trigger an event, sending to all mapped downstream handlers\n  listening for provided 'type' key.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "event type key (for example, 'click')",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "event data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventHandler"
            },
            "class": "EventMapper"
        },
        {
            "file": "events/EventMapper.js",
            "line": 48,
            "description": "Alias of emit.",
            "itemtype": "method",
            "name": "trigger",
            "class": "EventMapper"
        },
        {
            "file": "inputs/FastClick.js",
            "line": 11,
            "description": "FastClick is an override shim which maps event pairs of\n  'touchstart' and 'touchend' which differ by less than a certain\n  threshold to the 'click' event.\n  This is used to speed up clicks on some browsers.",
            "class": "GenericSync"
        },
        {
            "file": "inputs/GenericSync.js",
            "line": 57,
            "description": "Add another sync type to the sources for this class",
            "static": 1,
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "syncClass",
                    "description": "class to add to GenericSync's inputs.",
                    "type": "Object"
                }
            ],
            "class": "GenericSync"
        },
        {
            "file": "inputs/GenericSync.js",
            "line": 92,
            "description": "Set internal options, overriding any default options.\n  Note that these options will be passed to every class added\n  to 'syncClasses'",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "syncClasses",
                            "description": "array of classes in inputs/ which\n  will feed input to GenericSync.",
                            "type": "Array.Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "GenericSync"
        },
        {
            "file": "inputs/MouseSync.js",
            "line": 211,
            "description": "Return entire options dictionary, including defaults.",
            "itemtype": "method",
            "name": "getOptions",
            "return": {
                "description": "configuration options",
                "type": "Object"
            },
            "class": "MouseSync"
        },
        {
            "file": "inputs/MouseSync.js",
            "line": 221,
            "description": "Set internal options, overriding any default options",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "stallTime",
                            "description": "ms update gap until we consider velocity to be 0.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "rails",
                            "description": "whether to constrain to nearest axis.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "direction",
                            "description": "MouseSync.DIRECTION_X, DIRECTION_Y -\n   pay attention only to one specific direction.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "scale",
                            "description": "constant factor to scale velocity output",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "MouseSync"
        },
        {
            "file": "inputs/PinchSync.js",
            "line": 75,
            "description": "See TwoFingerSync.setOptions",
            "itemtype": "method",
            "name": "setOptions",
            "class": "PinchSync"
        },
        {
            "file": "inputs/PinchSync.js",
            "line": 80,
            "description": "See TwoFingerSync.getOptions",
            "itemtype": "method",
            "name": "getOptions",
            "class": "PinchSync"
        },
        {
            "file": "inputs/RotateSync.js",
            "line": 75,
            "description": "See TwoFingerSync.setOptions",
            "itemtype": "method",
            "name": "setOptions",
            "class": "RotateSync"
        },
        {
            "file": "inputs/RotateSync.js",
            "line": 80,
            "description": "See TwoFingerSync.getOptions",
            "itemtype": "method",
            "name": "getOptions",
            "class": "RotateSync"
        },
        {
            "file": "inputs/ScaleSync.js",
            "line": 88,
            "description": "See TwoFingerSync.setOptions",
            "itemtype": "method",
            "name": "setOptions",
            "class": "ScaleSync"
        },
        {
            "file": "inputs/ScaleSync.js",
            "line": 93,
            "description": "See TwoFingerSync.getOptions",
            "itemtype": "method",
            "name": "getOptions",
            "class": "ScaleSync"
        },
        {
            "file": "inputs/ScrollSync.js",
            "line": 173,
            "description": "Return entire options dictionary, including defaults.",
            "itemtype": "method",
            "name": "getOptions",
            "return": {
                "description": "configuration options",
                "type": "Object"
            },
            "class": "ScrollSync"
        },
        {
            "file": "inputs/ScrollSync.js",
            "line": 183,
            "description": "Set internal options, overriding any default options",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "minimimEndSpeed",
                            "description": "If final velocity smaller than this, round down to 0.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "stallTime",
                            "description": "ms of non-motion before 'end' emitted",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "rails",
                            "description": "whether to constrain to nearest axis.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "direction",
                            "description": "ScrollSync.DIRECTION_X, DIRECTION_Y -\n   pay attention to one specific direction.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "scale",
                            "description": "constant factor to scale velocity output",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "ScrollSync"
        },
        {
            "file": "inputs/TouchSync.js",
            "line": 185,
            "description": "Set internal options, overriding any default options",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "rails",
                            "description": "whether to constrain to nearest axis.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "direction",
                            "description": "TouchSync.DIRECTION_X, DIRECTION_Y -\n   pay attention to one specific direction.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "scale",
                            "description": "constant factor to scale velocity output",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "TouchSync"
        },
        {
            "file": "inputs/TouchSync.js",
            "line": 202,
            "description": "Return entire options dictionary, including defaults.",
            "itemtype": "method",
            "name": "getOptions",
            "return": {
                "description": "configuration options",
                "type": "Object"
            },
            "class": "TouchSync"
        },
        {
            "file": "inputs/TouchTracker.js",
            "line": 95,
            "description": "Record touch data, if selective is false.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "track",
            "params": [
                {
                    "name": "data",
                    "description": "touch data",
                    "type": "Object"
                }
            ],
            "class": "TouchTracker"
        },
        {
            "file": "inputs/TwoFingerSync.js",
            "line": 62,
            "description": "Return entire options dictionary, including defaults.",
            "itemtype": "method",
            "name": "getOptions",
            "return": {
                "description": "configuration options",
                "type": "Object"
            },
            "class": "TwoFingerSync"
        },
        {
            "file": "inputs/TwoFingerSync.js",
            "line": 72,
            "description": "Set internal options, overriding any default options",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "scale",
                            "description": "scale velocity by this factor",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "TwoFingerSync"
        },
        {
            "file": "math/Matrix.js",
            "line": 35,
            "description": "Return the values in the matrix as an array of numerical row arrays",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "matrix values as array of rows.",
                "type": "Array.array"
            },
            "class": "Matrix"
        },
        {
            "file": "math/Matrix.js",
            "line": 46,
            "description": "Set the nested array of rows in the matrix.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "values",
                    "description": "matrix values as array of rows.",
                    "type": "Array.array"
                }
            ],
            "class": "Matrix"
        },
        {
            "file": "math/Matrix.js",
            "line": 57,
            "description": "Take this matrix as A, input vector V as a column vector, and return matrix product (A)(V).\n  Note: This sets the internal vector register.  Current handles to the vector register\n  will see values changed.",
            "itemtype": "method",
            "name": "vectorMultiply",
            "params": [
                {
                    "name": "v",
                    "description": "input vector V",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "result of multiplication, as a handle to the internal vector register",
                "type": "Vector"
            },
            "class": "Matrix"
        },
        {
            "file": "math/Matrix.js",
            "line": 94,
            "description": "Multiply the provided matrix M2 with this matrix.  Result is (this) * (M2).\n  Note: This sets the internal matrix register.  Current handles to the register\n  will see values changed.",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "M2",
                    "description": "input matrix to multiply on the right",
                    "type": "Matrix"
                }
            ],
            "return": {
                "description": "result of multiplication, as a handle to the internal register",
                "type": "Matrix"
            },
            "class": "Matrix"
        },
        {
            "file": "math/Matrix.js",
            "line": 120,
            "description": "Creates a Matrix which is the transpose of this matrix.\n  Note: This sets the internal matrix register.  Current handles to the register\n  will see values changed.",
            "itemtype": "method",
            "name": "transpose",
            "return": {
                "description": "result of transpose, as a handle to the internal register",
                "type": "Matrix"
            },
            "class": "Matrix"
        },
        {
            "file": "math/Matrix.js",
            "line": 140,
            "description": "Clones the matrix",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "New copy of the original matrix",
                "type": "Matrix"
            },
            "class": "Matrix"
        },
        {
            "file": "math/Quaternion.js",
            "line": 37,
            "description": "Doc: TODO",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "q",
                    "description": "",
                    "type": "Quaternion"
                }
            ],
            "return": {
                "description": "",
                "type": "Quaternion"
            },
            "class": "Quaternion"
        },
        {
            "file": "math/Quaternion.js",
            "line": 68,
            "description": "Doc: TODO",
            "itemtype": "method",
            "name": "scalarDivide",
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Quaternion"
            },
            "class": "Quaternion"
        },
        {
            "file": "math/Quaternion.js",
            "line": 245,
            "description": "Docs: TODO",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "q",
                    "description": "",
                    "type": "Quaternion"
                }
            ],
            "return": {
                "description": "",
                "type": "Quaternion"
            },
            "class": "Quaternion"
        },
        {
            "file": "math/Quaternion.js",
            "line": 256,
            "description": "Doc: TODO",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "Quaternion"
            },
            "class": "Quaternion"
        },
        {
            "file": "math/Quaternion.js",
            "line": 266,
            "description": "Doc: TODO",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "",
                "type": "Quaternion"
            },
            "class": "Quaternion"
        },
        {
            "file": "math/Quaternion.js",
            "line": 280,
            "description": "Doc: TODO",
            "itemtype": "method",
            "name": "isEqual",
            "params": [
                {
                    "name": "q",
                    "description": "",
                    "type": "Quaternion"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Quaternion"
        },
        {
            "file": "math/Quaternion.js",
            "line": 291,
            "description": "Doc: TODO",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "q",
                    "description": "",
                    "type": "Quaternion"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Quaternion"
        },
        {
            "file": "math/Quaternion.js",
            "line": 303,
            "description": "Doc: TODO",
            "itemtype": "method",
            "name": "normSquared",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Quaternion"
        },
        {
            "file": "math/Quaternion.js",
            "line": 313,
            "description": "Doc: TODO",
            "itemtype": "method",
            "name": "norm",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Quaternion"
        },
        {
            "file": "math/Quaternion.js",
            "line": 323,
            "description": "Doc: TODO",
            "itemtype": "method",
            "name": "isZero",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Quaternion"
        },
        {
            "file": "math/Quaternion.js",
            "line": 333,
            "description": "Doc: TODO",
            "itemtype": "method",
            "name": "getTransform",
            "return": {
                "description": "",
                "type": "Transform"
            },
            "class": "Quaternion"
        },
        {
            "file": "math/Quaternion.js",
            "line": 369,
            "description": "Doc: TODO",
            "itemtype": "method",
            "name": "getMatrix",
            "return": {
                "description": "",
                "type": "Transform"
            },
            "class": "Quaternion"
        },
        {
            "file": "math/Quaternion.js",
            "line": 404,
            "description": "Doc: TODO",
            "itemtype": "method",
            "name": "slerp",
            "params": [
                {
                    "name": "q",
                    "description": "",
                    "type": "Quaternion"
                },
                {
                    "name": "t",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Transform"
            },
            "class": "Quaternion"
        },
        {
            "file": "math/Random.js",
            "line": 30,
            "description": "Get single random integer between min and max (inclusive), or array\n  of size dim if specified.",
            "itemtype": "method",
            "name": "integer",
            "params": [
                {
                    "name": "min",
                    "description": "lower bound, default 0",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "upper bound, default 1",
                    "type": "Number"
                },
                {
                    "name": "dim",
                    "description": "(optional) dimension of output array, if specified",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "random integer, or optionally, an array of random integers",
                "type": "Number | array<number>"
            },
            "class": "Random"
        },
        {
            "file": "math/Random.js",
            "line": 52,
            "description": "Get single random float between min and max (inclusive), or array\n  of size dim if specified",
            "itemtype": "method",
            "name": "range",
            "params": [
                {
                    "name": "min",
                    "description": "lower bound, default 0",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "upper bound, default 1",
                    "type": "Number"
                },
                {
                    "name": "dim",
                    "description": "dimension of output array, if specified",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "random float, or optionally an array",
                "type": "Number"
            },
            "class": "Random"
        },
        {
            "file": "math/Random.js",
            "line": 74,
            "description": "Return random number among the set {-1 ,1}",
            "itemtype": "method",
            "name": "sign",
            "params": [
                {
                    "name": "prob",
                    "description": "probability of returning 1, default 0.5",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "random sign (-1 or 1)",
                "type": "Number"
            },
            "class": "Random"
        },
        {
            "file": "math/Random.js",
            "line": 87,
            "description": "Return random boolean value, true or false.",
            "itemtype": "method",
            "name": "bool",
            "params": [
                {
                    "name": "prob",
                    "description": "probability of returning true, default 0.5",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "random boolean",
                "type": "Boolean"
            },
            "class": "Random"
        },
        {
            "file": "math/Utilities.js",
            "line": 19,
            "description": "Constrain input to range.",
            "itemtype": "method",
            "name": "clamp",
            "params": [
                {
                    "name": "value",
                    "description": "input",
                    "type": "Number"
                },
                {
                    "name": "range",
                    "description": "[min, max]",
                    "type": "Array.Number"
                }
            ],
            "static": 1,
            "class": "Utilities"
        },
        {
            "file": "math/Utilities.js",
            "line": 31,
            "description": "Euclidean length of numerical array.",
            "itemtype": "method",
            "name": "length",
            "params": [
                {
                    "name": "array",
                    "description": "array of numbers",
                    "type": "Array.Number"
                }
            ],
            "static": 1,
            "class": "Utilities"
        },
        {
            "file": "math/Vector.js",
            "line": 34,
            "description": "Add this element-wise to another Vector, element-wise.\n  Note: This sets the internal result register, so other references to that vector will change.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "v",
                    "description": "addend",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "vector sum",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 50,
            "description": "Subtract another vector from this vector, element-wise.\n  Note: This sets the internal result register, so other references to that vector will change.",
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "v",
                    "description": "subtrahend",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "vector difference",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 66,
            "description": "Scale Vector by floating point r.\n  Note: This sets the internal result register, so other references to that vector will change.",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "r",
                    "description": "scalar",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "vector result",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 83,
            "description": "Scale Vector by floating point 1/r.\n  Note: This sets the internal result register, so other references to that vector will change.",
            "itemtype": "method",
            "name": "div",
            "params": [
                {
                    "name": "r",
                    "description": "scalar",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "vector result",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 96,
            "description": "Given another vector v, return cross product (v)x(this).\n  Note: This sets the internal result register, so other references to that vector will change.",
            "itemtype": "method",
            "name": "cross",
            "params": [
                {
                    "name": "v",
                    "description": "Left Hand Vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "vector result",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 119,
            "description": "Component-wise equality test between this and Vector v.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "v",
                    "description": "vector to compare",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 129,
            "description": "Rotate clockwise around x-axis by theta radians.\n  Note: This sets the internal result register, so other references to that vector will change.",
            "itemtype": "method",
            "name": "rotateX",
            "params": [
                {
                    "name": "theta",
                    "description": "radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "rotated vector",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 151,
            "description": "Rotate clockwise around y-axis by theta radians.\n  Note: This sets the internal result register, so other references to that vector will change.",
            "itemtype": "method",
            "name": "rotateY",
            "params": [
                {
                    "name": "theta",
                    "description": "radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "rotated vector",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 173,
            "description": "Rotate clockwise around z-axis by theta radians.\n  Note: This sets the internal result register, so other references to that vector will change.",
            "itemtype": "method",
            "name": "rotateZ",
            "params": [
                {
                    "name": "theta",
                    "description": "radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "rotated vector",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 195,
            "description": "Return dot product of this with a second Vector",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "v",
                    "description": "second vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "dot product",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 205,
            "description": "Return squared length of this vector",
            "itemtype": "method",
            "name": "normSquared",
            "return": {
                "description": "squared length",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 214,
            "description": "Return length of this vector",
            "itemtype": "method",
            "name": "norm",
            "return": {
                "description": "length",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 223,
            "description": "Scale Vector to specified length.\n  If length is less than internal tolerance, set vector to [length, 0, 0].\n  Note: This sets the internal result register, so other references to that vector will change.",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "length",
                    "description": "target length, default 1.0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 240,
            "description": "Make a separate copy of the Vector.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 251,
            "description": "True if and only if every value is 0 (or falsy)",
            "itemtype": "method",
            "name": "isZero",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 281,
            "description": "Set this Vector to the values in the provided Array or Vector.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "v",
                    "description": "array, Vector, or number",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 302,
            "description": "Put result of last internal register calculation in specified output vector.",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "v",
                    "description": "destination vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "destination vector",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 314,
            "description": "Set this vector to [0,0,0]",
            "itemtype": "method",
            "name": "clear",
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 323,
            "description": "Scale this Vector down to specified \"cap\" length.\n  If Vector shorter than cap, or cap is Infinity, do nothing.\n  Note: This sets the internal result register, so other references to that vector will change.",
            "itemtype": "method",
            "name": "cap",
            "return": {
                "description": "capped vector",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 338,
            "description": "Return projection of this Vector onto another.\n  Note: This sets the internal result register, so other references to that vector will change.",
            "itemtype": "method",
            "name": "project",
            "params": [
                {
                    "name": "n",
                    "description": "vector to project upon",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "projected vector",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 350,
            "description": "Reflect this Vector across provided vector.\n  Note: This sets the internal result register, so other references to that vector will change.",
            "itemtype": "method",
            "name": "reflectAcross",
            "params": [
                {
                    "name": "n",
                    "description": "vector to reflect across",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "reflected vector",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "math/Vector.js",
            "line": 363,
            "description": "Convert Vector to three-element array.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "three-element array",
                "type": "Array<number>"
            },
            "class": "Vector"
        },
        {
            "file": "modifiers/Draggable.js",
            "line": 140,
            "description": "Set internal options, overriding any default options",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options.  See constructor.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Draggable"
        },
        {
            "file": "modifiers/Draggable.js",
            "line": 163,
            "description": "Get current delta in position from where this draggable started.",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "[x, y] position delta from start.",
                "type": "Array<number>"
            },
            "class": "Draggable"
        },
        {
            "file": "modifiers/Draggable.js",
            "line": 174,
            "description": "Transition the element to the desired relative position via provided transition.\n For example, calling this with [0,0] will not change the position.\n Callback will be executed on completion.",
            "itemtype": "method",
            "name": "setRelativePosition",
            "params": [
                {
                    "name": "p",
                    "description": "end state to which we interpolate",
                    "type": "Array<number>"
                },
                {
                    "name": "transition",
                    "description": "transition object specifying how object moves to new position",
                    "type": "Transition"
                },
                {
                    "name": "callback",
                    "description": "zero-argument function to call on observed completion",
                    "type": "Function"
                }
            ],
            "class": "Draggable"
        },
        {
            "file": "modifiers/Draggable.js",
            "line": 191,
            "description": "Transition the element to the desired absolute position via provided transition.\n Callback will be executed on completion.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "p",
                    "description": "end state to which we interpolate",
                    "type": "Array<number>"
                },
                {
                    "name": "transition",
                    "description": "transition object specifying how object moves to new position",
                    "type": "Transition"
                },
                {
                    "name": "callback",
                    "description": "zero-argument function to call on observed completion",
                    "type": "Function"
                }
            ],
            "class": "Draggable"
        },
        {
            "file": "modifiers/Draggable.js",
            "line": 206,
            "description": "Set this draggable to respond to user input.",
            "itemtype": "method",
            "name": "activate",
            "class": "Draggable"
        },
        {
            "file": "modifiers/Draggable.js",
            "line": 216,
            "description": "Set this draggable to ignore user input.",
            "itemtype": "method",
            "name": "deactivate",
            "class": "Draggable"
        },
        {
            "file": "modifiers/Draggable.js",
            "line": 226,
            "description": "Switch the input response stage between active and inactive.",
            "itemtype": "method",
            "name": "toggle",
            "class": "Draggable"
        },
        {
            "file": "modifiers/Draggable.js",
            "line": 236,
            "description": "Return render spec for this Modifier, applying to the provided\n   target component.  This is similar to render() for Surfaces.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "modify",
            "params": [
                {
                    "name": "target",
                    "description": "(already rendered) render spec to\n   which to apply the transform.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "render spec for this Modifier, including the\n   provided target",
                "type": "Object"
            },
            "class": "Draggable"
        },
        {
            "file": "modifiers/Fader.js",
            "line": 35,
            "description": "Set internal options, overriding any default options",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options.  See constructor.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Fader"
        },
        {
            "file": "modifiers/Fader.js",
            "line": 46,
            "description": "Fully displays the Fader instance's associated renderables.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "transition",
                    "description": "The transition that coordinates setting to the new state.",
                    "type": "Transition",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "A callback that executes once you've transitioned to the fully shown state.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Fader"
        },
        {
            "file": "modifiers/Fader.js",
            "line": 58,
            "description": "Fully fades the Fader instance's associated renderables.",
            "itemtype": "method",
            "name": "hide",
            "params": [
                {
                    "name": "transition",
                    "description": "The transition that coordinates setting to the new state.",
                    "type": "Transition",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "A callback that executes once you've transitioned to the fully faded state.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Fader"
        },
        {
            "file": "modifiers/Fader.js",
            "line": 70,
            "description": "Manually sets the opacity state of the fader to the passed-in one. Executes with an optional\ntransition and callback.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "state",
                    "description": "A number from zero to one: the amount of opacity you want to set to.",
                    "type": "Number"
                },
                {
                    "name": "transition",
                    "description": "The transition that coordinates setting to the new state.",
                    "type": "Transition",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "A callback that executes once you've finished executing the pulse.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Fader"
        },
        {
            "file": "modifiers/Fader.js",
            "line": 84,
            "description": "Halt the transition",
            "itemtype": "method",
            "name": "halt",
            "class": "Fader"
        },
        {
            "file": "modifiers/Fader.js",
            "line": 93,
            "description": "Tells you if your Fader instance is above its visibility threshold.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Whether or not your Fader instance is visible.",
                "type": "Boolean"
            },
            "class": "Fader"
        },
        {
            "file": "modifiers/Fader.js",
            "line": 103,
            "description": "Return render spec for this Modifier, applying to the provided\n   target component.  This is similar to render() for Surfaces.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "modify",
            "params": [
                {
                    "name": "target",
                    "description": "(already rendered) render spec to\n   which to apply the transform.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "render spec for this Modifier, including the\n   provided target",
                "type": "Object"
            },
            "class": "Fader"
        },
        {
            "file": "modifiers/ModifierChain.js",
            "line": 24,
            "description": "Add a modifier, or comma separated modifiers, to the modifier chain.",
            "itemtype": "method",
            "name": "addModifier",
            "params": [
                {
                    "name": "varargs",
                    "description": "args list of Modifiers",
                    "type": "...Modifier*"
                }
            ],
            "class": "ModifierChain"
        },
        {
            "file": "modifiers/ModifierChain.js",
            "line": 35,
            "description": "Remove a modifier from the modifier chain.",
            "itemtype": "method",
            "name": "removeModifier",
            "params": [
                {
                    "name": "modifier",
                    "description": "",
                    "type": "Modifier"
                }
            ],
            "class": "ModifierChain"
        },
        {
            "file": "modifiers/ModifierChain.js",
            "line": 48,
            "description": "Return render spec for this Modifier, applying to the provided\n   target component.  This is similar to render() for Surfaces.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "modify",
            "params": [
                {
                    "name": "input",
                    "description": "(already rendered) render spec to\n   which to apply the transform.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "render spec for this Modifier, including the\n   provided target",
                "type": "Object"
            },
            "class": "ModifierChain"
        },
        {
            "file": "modifiers/StateModifier.js",
            "line": 57,
            "description": "Set the transform matrix of this modifier, either statically or\n  through a provided Transitionable.",
            "itemtype": "method",
            "name": "setTransform",
            "params": [
                {
                    "name": "transform",
                    "description": "Transform to transition to.",
                    "type": "Transform"
                },
                {
                    "name": "transition",
                    "description": "Valid transitionable object",
                    "type": "Transitionable",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "callback to call after transition completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "this",
                "type": "StateModifier"
            },
            "class": "StateModifier"
        },
        {
            "file": "modifiers/StateModifier.js",
            "line": 73,
            "description": "Set the opacity of this modifier, either statically or\n  through a provided Transitionable.",
            "itemtype": "method",
            "name": "setOpacity",
            "params": [
                {
                    "name": "opacity",
                    "description": "Opacity value to transition to.",
                    "type": "Number"
                },
                {
                    "name": "transition",
                    "description": "Valid transitionable object",
                    "type": "Transitionable"
                },
                {
                    "name": "callback",
                    "description": "callback to call after transition completes",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this",
                "type": "StateModifier"
            },
            "class": "StateModifier"
        },
        {
            "file": "modifiers/StateModifier.js",
            "line": 89,
            "description": "Set the origin of this modifier, either statically or\n  through a provided Transitionable.",
            "itemtype": "method",
            "name": "setOrigin",
            "params": [
                {
                    "name": "origin",
                    "description": "two element array with values between 0 and 1.",
                    "type": "Array.Number"
                },
                {
                    "name": "transition",
                    "description": "Valid transitionable object",
                    "type": "Transitionable"
                },
                {
                    "name": "callback",
                    "description": "callback to call after transition completes",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this",
                "type": "StateModifier"
            },
            "class": "StateModifier"
        },
        {
            "file": "modifiers/StateModifier.js",
            "line": 116,
            "description": "Set the size of this modifier, either statically or\n  through a provided Transitionable.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "size",
                    "description": "two element array with values between 0 and 1.",
                    "type": "Array.Number"
                },
                {
                    "name": "transition",
                    "description": "Valid transitionable object",
                    "type": "Transitionable"
                },
                {
                    "name": "callback",
                    "description": "callback to call after transition completes",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this",
                "type": "StateModifier"
            },
            "class": "StateModifier"
        },
        {
            "file": "modifiers/StateModifier.js",
            "line": 143,
            "description": "Stop the transition.",
            "itemtype": "method",
            "name": "halt",
            "class": "StateModifier"
        },
        {
            "file": "modifiers/StateModifier.js",
            "line": 155,
            "description": "Get the current state of the transform matrix component.",
            "itemtype": "method",
            "name": "getTransform",
            "return": {
                "description": "transform provider object",
                "type": "Object"
            },
            "class": "StateModifier"
        },
        {
            "file": "modifiers/StateModifier.js",
            "line": 165,
            "description": "Get the destination state of the transform component.",
            "itemtype": "method",
            "name": "getFinalTransform",
            "return": {
                "description": "transform matrix",
                "type": "Transform"
            },
            "class": "StateModifier"
        },
        {
            "file": "modifiers/StateModifier.js",
            "line": 175,
            "description": "Get the current state of the opacity component.",
            "itemtype": "method",
            "name": "getOpacity",
            "return": {
                "description": "opacity provider object",
                "type": "Object"
            },
            "class": "StateModifier"
        },
        {
            "file": "modifiers/StateModifier.js",
            "line": 185,
            "description": "Get the current state of the origin component.",
            "itemtype": "method",
            "name": "getOrigin",
            "return": {
                "description": "origin provider object",
                "type": "Object"
            },
            "class": "StateModifier"
        },
        {
            "file": "modifiers/StateModifier.js",
            "line": 195,
            "description": "Get the current state of the size component.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "size provider object",
                "type": "Object"
            },
            "class": "StateModifier"
        },
        {
            "file": "modifiers/StateModifier.js",
            "line": 205,
            "description": "Return render spec for this StateModifier, applying to the provided\n   target component.  This is similar to render() for Surfaces.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "modify",
            "params": [
                {
                    "name": "target",
                    "description": "(already rendered) render spec to\n   which to apply the transform.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "render spec for this StateModifier, including the\n   provided target",
                "type": "Object"
            },
            "class": "StateModifier"
        },
        {
            "file": "physics/bodies/Body.js",
            "line": 67,
            "description": "Setter for moment of inertia, which is necessary to give proper\nangular inertia depending on the geometry of the body.",
            "itemtype": "method",
            "name": "setMomentsOfInertia",
            "class": "Body"
        },
        {
            "file": "physics/bodies/Body.js",
            "line": 78,
            "description": "Update the angular velocity from the angular momentum state.",
            "itemtype": "method",
            "name": "updateAngularVelocity",
            "class": "Body"
        },
        {
            "file": "physics/bodies/Body.js",
            "line": 87,
            "description": "Determine world coordinates from the local coordinate system. Useful\nif the Body has rotated in space.",
            "itemtype": "method",
            "name": "toWorldCoordinates",
            "params": [
                {
                    "name": "localPosition",
                    "description": "local coordinate vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "global coordinate vector",
                "type": "Vector"
            },
            "class": "Body"
        },
        {
            "file": "physics/bodies/Body.js",
            "line": 99,
            "description": "Calculates the kinetic and intertial energy of a body.",
            "return": {
                "description": "energy",
                "type": "Number"
            },
            "class": "Body"
        },
        {
            "file": "physics/bodies/Body.js",
            "line": 109,
            "description": "Extends Particle.reset to reset orientation, angular velocity\nand angular momentum.",
            "params": [
                {
                    "name": "p",
                    "description": "position",
                    "type": "Array|Vector",
                    "optional": true
                },
                {
                    "name": "v",
                    "description": "velocity",
                    "type": "Array|Vector",
                    "optional": true
                },
                {
                    "name": "q",
                    "description": "orientation",
                    "type": "Array|Quaternion",
                    "optional": true
                },
                {
                    "name": "L",
                    "description": "angular momentum",
                    "type": "Array|Vector",
                    "optional": true
                }
            ],
            "class": "Body"
        },
        {
            "file": "physics/bodies/Body.js",
            "line": 125,
            "description": "Setter for orientation",
            "params": [
                {
                    "name": "q",
                    "description": "orientation",
                    "type": "Array|Quaternion"
                }
            ],
            "class": "Body"
        },
        {
            "file": "physics/bodies/Body.js",
            "line": 134,
            "description": "Setter for angular velocity",
            "params": [
                {
                    "name": "w",
                    "description": "angular velocity",
                    "type": "Array|Vector"
                }
            ],
            "class": "Body"
        },
        {
            "file": "physics/bodies/Body.js",
            "line": 144,
            "description": "Setter for angular momentum",
            "params": [
                {
                    "name": "L",
                    "description": "angular momentum",
                    "type": "Array|Vector"
                }
            ],
            "class": "Body"
        },
        {
            "file": "physics/bodies/Body.js",
            "line": 154,
            "description": "Extends Particle.applyForce with an optional argument\nto apply the force at an off-centered location, resulting in a torque.",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "force",
                    "description": "force",
                    "type": "Vector"
                },
                {
                    "name": "location",
                    "description": "off-center location on the body",
                    "type": "Vector",
                    "optional": true
                }
            ],
            "class": "Body"
        },
        {
            "file": "physics/bodies/Body.js",
            "line": 167,
            "description": "Applied a torque force to a body, inducing a rotation.",
            "itemtype": "method",
            "name": "applyTorque",
            "params": [
                {
                    "name": "torque",
                    "description": "torque",
                    "type": "Vector"
                }
            ],
            "class": "Body"
        },
        {
            "file": "physics/bodies/Body.js",
            "line": 178,
            "description": "Extends Particle.getTransform to include a rotational component\nderived from the particle's orientation.",
            "itemtype": "method",
            "name": "getTransform",
            "return": {
                "description": "transform",
                "type": "Transform"
            },
            "class": "Body"
        },
        {
            "file": "physics/bodies/Body.js",
            "line": 192,
            "description": "Extends Particle._integrate to also update the rotational states\nof the body.",
            "itemtype": "method",
            "name": "getTransform",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "dt",
                    "description": "delta time",
                    "type": "Number"
                }
            ],
            "class": "Body"
        },
        {
            "file": "physics/bodies/Body.js",
            "line": 207,
            "description": "Updates the angular momentum via the its integrator.",
            "itemtype": "method",
            "name": "integrateAngularMomentum",
            "params": [
                {
                    "name": "dt",
                    "description": "delta time",
                    "type": "Number"
                }
            ],
            "class": "Body"
        },
        {
            "file": "physics/bodies/Body.js",
            "line": 217,
            "description": "Updates the orientation via the its integrator.",
            "itemtype": "method",
            "name": "integrateOrientation",
            "params": [
                {
                    "name": "dt",
                    "description": "delta time",
                    "type": "Number"
                }
            ],
            "class": "Body"
        },
        {
            "file": "physics/bodies/Circle.js",
            "line": 31,
            "description": "Basic setter for radius.",
            "itemtype": "method",
            "name": "setRadius",
            "params": [
                {
                    "name": "r",
                    "description": "radius",
                    "type": "Number"
                }
            ],
            "class": "Circle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 69,
            "itemtype": "property",
            "name": "Particle.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 77,
            "description": "The position of the particle",
            "itemtype": "attribute",
            "name": "position",
            "type": "Array",
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 84,
            "description": "The velocity of the particle",
            "itemtype": "attribute",
            "name": "velocity",
            "type": "Array",
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 91,
            "description": "The mass of the particle",
            "itemtype": "attribute",
            "name": "mass",
            "type": "Number",
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 98,
            "description": "The axis a particle can move along. Can be bitwise ORed\n   e.g., Particle.AXES.X, Particle.AXES.X | Particle.AXES.Y",
            "itemtype": "attribute",
            "name": "axis",
            "type": "Hexadecimal",
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 107,
            "description": "Kinetic energy threshold needed to update the body",
            "itemtype": "property",
            "name": "SLEEP_TOLERANCE",
            "type": "Number",
            "static": 1,
            "default": "1e-7",
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 117,
            "description": "Axes by which a body can translate",
            "itemtype": "property",
            "name": "AXES",
            "type": "Hexadecimal",
            "static": 1,
            "default": "1e-7",
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 147,
            "description": "Stops the particle from updating",
            "itemtype": "method",
            "name": "sleep",
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 157,
            "description": "Starts the particle update",
            "itemtype": "method",
            "name": "wake",
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 168,
            "itemtype": "attribute",
            "name": "isBody",
            "type": "Boolean",
            "static": 1,
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 175,
            "description": "Basic setter for position",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Array|Vector"
                }
            ],
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 184,
            "description": "1-dimensional setter for position",
            "itemtype": "method",
            "name": "setPosition1D",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 193,
            "description": "Basic getter function for position",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "position",
                "type": "Array"
            },
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 207,
            "description": "1-dimensional getter for position",
            "itemtype": "method",
            "name": "getPosition1D",
            "return": {
                "description": "value",
                "type": "Number"
            },
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 217,
            "description": "Defines the position from outside the Physics Engine",
            "itemtype": "method",
            "name": "positionFrom",
            "params": [
                {
                    "name": "positionGetter",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 226,
            "description": "Basic setter function for velocity Vector",
            "itemtype": "method",
            "name": "",
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 236,
            "description": "1-dimensional setter for velocity",
            "itemtype": "method",
            "name": "setVelocity1D",
            "params": [
                {
                    "name": "velocity",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 246,
            "description": "Basic getter function for velocity Vector",
            "itemtype": "method",
            "name": "getVelocity",
            "return": {
                "description": "velocity",
                "type": "Array"
            },
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 255,
            "description": "1-dimensional getter for velocity",
            "itemtype": "method",
            "name": "getVelocity1D",
            "return": {
                "description": "velocity",
                "type": "Number"
            },
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 264,
            "description": "Basic setter function for mass quantity",
            "itemtype": "method",
            "name": "setMass",
            "params": [
                {
                    "name": "mass",
                    "description": "mass",
                    "type": "Number"
                }
            ],
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 274,
            "description": "Basic getter function for mass quantity",
            "itemtype": "method",
            "name": "getMass",
            "return": {
                "description": "mass",
                "type": "Number"
            },
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 283,
            "description": "Reset position and velocity",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Array|Vector"
                },
                {
                    "name": "velocity",
                    "description": "",
                    "type": "Array|Vector"
                }
            ],
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 294,
            "description": "Add force vector to existing internal force Vector",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 305,
            "description": "Add impulse (change in velocity) Vector to this Vector's velocity.",
            "itemtype": "method",
            "name": "applyImpulse",
            "params": [
                {
                    "name": "impulse",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 316,
            "description": "Update a particle's velocity from its force accumulator",
            "itemtype": "method",
            "name": "integrateVelocity",
            "params": [
                {
                    "name": "dt",
                    "description": "Time differential",
                    "type": "Number"
                }
            ],
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 325,
            "description": "Update a particle's position from its velocity",
            "itemtype": "method",
            "name": "integratePosition",
            "params": [
                {
                    "name": "dt",
                    "description": "Time differential",
                    "type": "Number"
                }
            ],
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 334,
            "description": "Update the position and velocity of the particle",
            "itemtype": "method",
            "name": "_integrate",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "dt",
                    "description": "Time differential",
                    "type": "Number"
                }
            ],
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 345,
            "description": "Get kinetic energy of the particle.",
            "itemtype": "method",
            "name": "",
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 354,
            "description": "Generate transform from the current position state",
            "itemtype": "method",
            "name": "getTransform",
            "return": {
                "description": "Transform",
                "type": "Transform"
            },
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Particle.js",
            "line": 385,
            "description": "The modify interface of a Modifier",
            "itemtype": "method",
            "name": "modify",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Spec"
                }
            ],
            "return": {
                "description": "Spec",
                "type": "Spec"
            },
            "class": "Particle"
        },
        {
            "file": "physics/bodies/Rectangle.js",
            "line": 31,
            "description": "Basic setter for size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "size",
                    "description": "size = [width, height]",
                    "type": "Array"
                }
            ],
            "class": "Circle"
        },
        {
            "file": "physics/constraints/Collision.js",
            "line": 40,
            "itemtype": "property",
            "name": "Collision.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Collision"
        },
        {
            "file": "physics/constraints/Collision.js",
            "line": 48,
            "description": "The energy ratio lost in a collision (0 = stick, 1 = elastic)\n   Range : [0, 1]",
            "itemtype": "attribute",
            "name": "restitution",
            "type": "Number",
            "default": "0.5",
            "class": "Collision"
        },
        {
            "file": "physics/constraints/Collision.js",
            "line": 58,
            "description": "Baumgarte stabilization parameter.\n   Makes constraints \"loosely\" (0) or \"tightly\" (1) enforced\n   Range : [0, 1]",
            "itemtype": "attribute",
            "name": "drift",
            "type": "Number",
            "default": "0.5",
            "class": "Collision"
        },
        {
            "file": "physics/constraints/Collision.js",
            "line": 69,
            "description": "Amount of penetration in pixels to ignore before collision event triggers",
            "itemtype": "attribute",
            "name": "slop",
            "type": "Number",
            "default": "0",
            "class": "Collision"
        },
        {
            "file": "physics/constraints/Collision.js",
            "line": 93,
            "description": "Adds an impulse to a physics body's velocity due to the constraint",
            "itemtype": "method",
            "name": "applyConstraint",
            "params": [
                {
                    "name": "targets",
                    "description": "Array of bodies to apply the constraint to",
                    "type": "Array.Body"
                },
                {
                    "name": "source",
                    "description": "The source of the constraint",
                    "type": "Body"
                },
                {
                    "name": "dt",
                    "description": "Delta time",
                    "type": "Number"
                }
            ],
            "class": "Collision"
        },
        {
            "file": "physics/constraints/Constraint.js",
            "line": 37,
            "description": "Adds an impulse to a physics body's velocity due to the constraint",
            "itemtype": "method",
            "name": "applyConstraint",
            "class": "Constraint"
        },
        {
            "file": "physics/constraints/Constraint.js",
            "line": 44,
            "description": "Getter for energy",
            "itemtype": "method",
            "name": "getEnergy",
            "return": {
                "description": "energy",
                "type": "Number"
            },
            "class": "Constraint"
        },
        {
            "file": "physics/constraints/Constraint.js",
            "line": 54,
            "description": "Setter for energy",
            "itemtype": "method",
            "name": "setEnergy",
            "params": [
                {
                    "name": "energy",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Constraint"
        },
        {
            "file": "physics/constraints/Curve.js",
            "line": 40,
            "description": "/** @const */ var pi = Math.PI;\n\n/**\n * @property Curve.DEFAULT_OPTIONS\n * @type Object\n * @protected\n * @static",
            "class": "Curve"
        },
        {
            "file": "physics/constraints/Curve.js",
            "line": 51,
            "description": "An implicitly defined surface f(x,y,z) = 0 that body is constrained to\n  e.g. function(x,y,z) { x*x + y*y - r*r }\n  corresponds to a circle of radius r pixels",
            "itemtype": "attribute",
            "name": "equation",
            "type": "Function",
            "class": "Curve"
        },
        {
            "file": "physics/constraints/Curve.js",
            "line": 63,
            "description": "An implicitly defined second surface that the body is constrained to",
            "itemtype": "attribute",
            "name": "path",
            "type": "Function",
            "default": "the xy-plane",
            "optional": 1,
            "class": "Curve"
        },
        {
            "file": "physics/constraints/Curve.js",
            "line": 75,
            "description": "The spring-like reaction when the constraint is violated",
            "itemtype": "attribute",
            "name": "period",
            "type": "Number",
            "default": "0",
            "class": "Curve"
        },
        {
            "file": "physics/constraints/Curve.js",
            "line": 83,
            "description": "The damping-like reaction when the constraint is violated",
            "itemtype": "attribute",
            "name": "dampingRatio",
            "type": "Number",
            "default": "0",
            "class": "Curve"
        },
        {
            "file": "physics/constraints/Curve.js",
            "line": 92,
            "description": "Basic options setter",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Objects"
                }
            ],
            "class": "Curve"
        },
        {
            "file": "physics/constraints/Curve.js",
            "line": 102,
            "description": "Adds a curve impulse to a physics body.",
            "itemtype": "method",
            "name": "applyConstraint",
            "params": [
                {
                    "name": "targets",
                    "description": "Array of bodies to apply force to.",
                    "type": "Array.Body"
                },
                {
                    "name": "source",
                    "description": "Not applicable",
                    "type": "Body"
                },
                {
                    "name": "dt",
                    "description": "Delta time",
                    "type": "Number"
                }
            ],
            "class": "Curve"
        },
        {
            "file": "physics/constraints/Distance.js",
            "line": 40,
            "itemtype": "property",
            "name": "Distance.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Distance"
        },
        {
            "file": "physics/constraints/Distance.js",
            "line": 48,
            "description": "The location of the anchor",
            "itemtype": "attribute",
            "name": "anchor",
            "type": "Array",
            "optional": 1,
            "class": "Distance"
        },
        {
            "file": "physics/constraints/Distance.js",
            "line": 57,
            "description": "The amount of distance from the anchor the constraint should enforce",
            "itemtype": "attribute",
            "name": "length",
            "type": "Number",
            "default": "0",
            "class": "Distance"
        },
        {
            "file": "physics/constraints/Distance.js",
            "line": 66,
            "description": "The minimum distance before the constraint is activated\n   Use this property for a \"rope\" effect",
            "itemtype": "attribute",
            "name": "length",
            "type": "Number",
            "default": "0",
            "class": "Distance"
        },
        {
            "file": "physics/constraints/Distance.js",
            "line": 76,
            "description": "The spring-like reaction when the constraint is broken",
            "itemtype": "attribute",
            "name": "period",
            "type": "Number",
            "default": "0",
            "class": "Distance"
        },
        {
            "file": "physics/constraints/Distance.js",
            "line": 84,
            "description": "The damping-like reaction when the constraint is broken",
            "itemtype": "attribute",
            "name": "dampingRatio",
            "type": "Number",
            "default": "0",
            "class": "Distance"
        },
        {
            "file": "physics/constraints/Distance.js",
            "line": 93,
            "description": "/**\n     * Basic options setter\n     *\n     * @method setOptions\n     * @param options {Objects}",
            "class": "Distance"
        },
        {
            "file": "physics/constraints/Distance.js",
            "line": 117,
            "description": "Set the anchor position",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "anchor",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Distance"
        },
        {
            "file": "physics/constraints/Distance.js",
            "line": 128,
            "description": "Adds an impulse to a physics body's velocity due to the constraint",
            "itemtype": "method",
            "name": "applyConstraint",
            "params": [
                {
                    "name": "targets",
                    "description": "Array of bodies to apply the constraint to",
                    "type": "Array.Body"
                },
                {
                    "name": "source",
                    "description": "The source of the constraint",
                    "type": "Body"
                },
                {
                    "name": "dt",
                    "description": "Delta time",
                    "type": "Number"
                }
            ],
            "class": "Distance"
        },
        {
            "file": "physics/constraints/Snap.js",
            "line": 42,
            "itemtype": "property",
            "name": "Snap.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Snap"
        },
        {
            "file": "physics/constraints/Snap.js",
            "line": 50,
            "description": "The amount of time in milliseconds taken for one complete oscillation\nwhen there is no damping\n   Range : [150, Infinity]",
            "itemtype": "attribute",
            "name": "period",
            "type": "Number",
            "default": "300",
            "class": "Snap"
        },
        {
            "file": "physics/constraints/Snap.js",
            "line": 60,
            "description": "Additional damping of the spring\n   Range : [0, 1]\n   0 = note this will still be damped\n   1 = critically damped (the spring will never oscillate)",
            "itemtype": "attribute",
            "name": "dampingRatio",
            "type": "Number",
            "default": "300",
            "class": "Snap"
        },
        {
            "file": "physics/constraints/Snap.js",
            "line": 71,
            "description": "The rest length of the spring\n   Range : [0, Infinity]",
            "itemtype": "attribute",
            "name": "length",
            "type": "Number",
            "default": "0",
            "class": "Snap"
        },
        {
            "file": "physics/constraints/Snap.js",
            "line": 80,
            "description": "The location of the spring's anchor, if not another physics body",
            "itemtype": "attribute",
            "name": "anchor",
            "type": "Array",
            "default": "0.01",
            "optional": 1,
            "class": "Snap"
        },
        {
            "file": "physics/constraints/Snap.js",
            "line": 91,
            "description": "function _calcEnergy(impulse, disp, dt) {\n        return Math.abs(impulse.dot(disp)/dt);\n    }\n/**\n     * Basic options setter\n     *\n     * @method setOptions\n     * @param options {Objects} options",
            "class": "Snap"
        },
        {
            "file": "physics/constraints/Snap.js",
            "line": 114,
            "description": "Set the anchor position",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "v",
                    "description": "TODO",
                    "type": "Array"
                }
            ],
            "class": "Snap"
        },
        {
            "file": "physics/constraints/Snap.js",
            "line": 126,
            "description": "Calculates energy of spring",
            "itemtype": "method",
            "name": "getEnergy",
            "params": [
                {
                    "name": "target",
                    "description": "TODO",
                    "type": "Object"
                },
                {
                    "name": "source",
                    "description": "TODO",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "energy",
                "type": "Number"
            },
            "class": "Snap"
        },
        {
            "file": "physics/constraints/Snap.js",
            "line": 145,
            "description": "Adds a spring impulse to a physics body's velocity due to the constraint",
            "itemtype": "method",
            "name": "applyConstraint",
            "params": [
                {
                    "name": "targets",
                    "description": "Array of bodies to apply the constraint to",
                    "type": "Array.Body"
                },
                {
                    "name": "source",
                    "description": "The source of the constraint",
                    "type": "Body"
                },
                {
                    "name": "dt",
                    "description": "Delta time",
                    "type": "Number"
                }
            ],
            "class": "Snap"
        },
        {
            "file": "physics/constraints/Surface.js",
            "line": 36,
            "itemtype": "property",
            "name": "Surface.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Surface"
        },
        {
            "file": "physics/constraints/Surface.js",
            "line": 44,
            "description": "An implicitly defined surface f(x,y,z) = 0 that body is constrained to\n  e.g. function(x,y,z) { x*x + y*y + z*z - r*r }\n  corresponds to a sphere of radius r pixels",
            "itemtype": "attribute",
            "name": "equation",
            "type": "Function",
            "class": "Surface"
        },
        {
            "file": "physics/constraints/Surface.js",
            "line": 54,
            "description": "The spring-like reaction when the constraint is violated",
            "itemtype": "attribute",
            "name": "period",
            "type": "Number",
            "default": "0",
            "class": "Surface"
        },
        {
            "file": "physics/constraints/Surface.js",
            "line": 62,
            "description": "The damping-like reaction when the constraint is violated",
            "itemtype": "attribute",
            "name": "dampingRatio",
            "type": "Number",
            "default": "0",
            "class": "Surface"
        },
        {
            "file": "physics/constraints/Surface.js",
            "line": 71,
            "description": "/** @const */ var pi = Math.PI;\n\n/**\n * Basic options setter\n *\n * @method setOptions\n * @param options {Objects}",
            "class": "Surface"
        },
        {
            "file": "physics/constraints/Surface.js",
            "line": 84,
            "description": "Adds a surface impulse to a physics body.",
            "itemtype": "method",
            "name": "applyConstraint",
            "params": [
                {
                    "name": "targets",
                    "description": "Array of bodies to apply force to.",
                    "type": "Array.Body"
                },
                {
                    "name": "source",
                    "description": "Not applicable",
                    "type": "Body"
                },
                {
                    "name": "dt",
                    "description": "Delta time",
                    "type": "Number"
                }
            ],
            "class": "Surface"
        },
        {
            "file": "physics/constraints/Wall.js",
            "line": 51,
            "itemtype": "property",
            "name": "Wall.ON_CONTACT",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Wall"
        },
        {
            "file": "physics/constraints/Wall.js",
            "line": 59,
            "description": "Physical bodies bounce off the wall",
            "itemtype": "attribute",
            "name": "REFLECT",
            "class": "Wall"
        },
        {
            "file": "physics/constraints/Wall.js",
            "line": 65,
            "description": "Physical bodies are unaffected. Usecase is to fire events on contact.",
            "itemtype": "attribute",
            "name": "SILENT",
            "class": "Wall"
        },
        {
            "file": "physics/constraints/Wall.js",
            "line": 72,
            "itemtype": "property",
            "name": "Wall.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Wall"
        },
        {
            "file": "physics/constraints/Wall.js",
            "line": 80,
            "description": "The energy ratio lost in a collision (0 = stick, 1 = elastic)\n   Range : [0, 1]",
            "itemtype": "attribute",
            "name": "restitution",
            "type": "Number",
            "default": "0.5",
            "class": "Wall"
        },
        {
            "file": "physics/constraints/Wall.js",
            "line": 90,
            "description": "Baumgarte stabilization parameter.\n   Makes constraints \"loosely\" (0) or \"tightly\" (1) enforced\n   Range : [0, 1]",
            "itemtype": "attribute",
            "name": "drift",
            "type": "Number",
            "default": "0.5",
            "class": "Wall"
        },
        {
            "file": "physics/constraints/Wall.js",
            "line": 101,
            "description": "Amount of penetration in pixels to ignore before collision event triggers",
            "itemtype": "attribute",
            "name": "slop",
            "type": "Number",
            "default": "0",
            "class": "Wall"
        },
        {
            "file": "physics/constraints/Wall.js",
            "line": 110,
            "description": "The normal direction to the wall",
            "itemtype": "attribute",
            "name": "normal",
            "type": "Array",
            "required": 1,
            "class": "Wall"
        },
        {
            "file": "physics/constraints/Wall.js",
            "line": 119,
            "description": "The distance from the origin that the wall is placed",
            "itemtype": "attribute",
            "name": "distance",
            "type": "Number",
            "required": 1,
            "class": "Wall"
        },
        {
            "file": "physics/constraints/Wall.js",
            "line": 128,
            "description": "How to handle collision against the wall",
            "itemtype": "attribute",
            "name": "onContact",
            "type": "Number",
            "class": "Wall"
        },
        {
            "file": "physics/constraints/Wall.js",
            "line": 209,
            "description": "Adds an impulse to a physics body's velocity due to the wall constraint",
            "itemtype": "method",
            "name": "applyConstraint",
            "params": [
                {
                    "name": "targets",
                    "description": "Array of bodies to apply the constraint to",
                    "type": "Array.Body"
                },
                {
                    "name": "source",
                    "description": "The source of the constraint",
                    "type": "Body"
                },
                {
                    "name": "dt",
                    "description": "Delta time",
                    "type": "Number"
                }
            ],
            "class": "Wall"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 36,
            "itemtype": "property",
            "name": "Walls.ON_CONTACT",
            "type": "Object",
            "extends": "Wall.ON_CONTACT",
            "static": 1,
            "class": "Walls"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 43,
            "itemtype": "property",
            "name": "Walls.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Walls"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 50,
            "description": "An array of sides e.g., [Walls.LEFT, Walls.TOP]",
            "type": "Array",
            "itemtype": "attribute",
            "name": "sides",
            "default": "[Walls.LEFT, Walls.RIGHT, Walls.TOP, Walls.BOTTOM];",
            "class": "Walls"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 59,
            "description": "The size of the bounding box of the walls",
            "itemtype": "attribute",
            "name": "size",
            "type": "Array",
            "default": "[window.innerWidth, window.innerHeight, 0]",
            "class": "Walls"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 68,
            "description": "The center of the wall relative to the size",
            "itemtype": "attribute",
            "name": "origin",
            "type": "Array",
            "default": "[.5, .5, .5]",
            "class": "Walls"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 77,
            "description": "Baumgarte stabilization parameter.\n   Makes constraints \"loosely\" (0) or \"tightly\" (1) enforced\n   Range : [0, 1]",
            "itemtype": "attribute",
            "name": "drift",
            "type": "Number",
            "default": "0.5",
            "class": "Walls"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 88,
            "description": "Amount of penetration in pixels to ignore before collision event triggers",
            "itemtype": "attribute",
            "name": "slop",
            "type": "Number",
            "default": "0",
            "class": "Walls"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 97,
            "description": "The energy ratio lost in a collision (0 = stick, 1 = elastic)\n   Range : [0, 1]",
            "itemtype": "attribute",
            "name": "restitution",
            "type": "Number",
            "default": "0.5",
            "class": "Walls"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 107,
            "description": "How to handle collision against the wall",
            "itemtype": "attribute",
            "name": "onContact",
            "type": "Number",
            "class": "Walls"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 116,
            "description": "An enumeration of common types of walls\n   LEFT, RIGHT, TOP, BOTTOM, FRONT, BACK\n   TWO_DIMENSIONAL, THREE_DIMENSIONAL",
            "itemtype": "property",
            "name": "Walls.SIDES",
            "type": "Object",
            "final": 1,
            "static": 1,
            "class": "Walls"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 229,
            "description": "Adds an impulse to a physics body's velocity due to the walls constraint",
            "itemtype": "method",
            "name": "applyConstraint",
            "params": [
                {
                    "name": "targets",
                    "description": "Array of bodies to apply the constraint to",
                    "type": "Array.Body"
                },
                {
                    "name": "source",
                    "description": "The source of the constraint",
                    "type": "Body"
                },
                {
                    "name": "dt",
                    "description": "Delta time",
                    "type": "Number"
                }
            ],
            "class": "Walls"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 243,
            "description": "Apply a method to each wall making up the walls",
            "itemtype": "method",
            "name": "applyConstraint",
            "params": [
                {
                    "name": "fn",
                    "description": "Function that takes in a wall as its first parameter",
                    "type": "Function"
                }
            ],
            "class": "Walls"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 253,
            "description": "Rotates the walls by an angle in the XY-plane",
            "itemtype": "method",
            "name": "applyConstraint",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Walls"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 266,
            "description": "Rotates the walls by an angle in the YZ-plane",
            "itemtype": "method",
            "name": "applyConstraint",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Walls"
        },
        {
            "file": "physics/constraints/Walls.js",
            "line": 279,
            "description": "Rotates the walls by an angle in the XZ-plane",
            "itemtype": "method",
            "name": "applyConstraint",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Walls"
        },
        {
            "file": "physics/forces/Drag.js",
            "line": 32,
            "itemtype": "property",
            "name": "Drag.FORCE_FUNCTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Drag"
        },
        {
            "file": "physics/forces/Drag.js",
            "line": 40,
            "description": "A drag force proportional to the velocity",
            "itemtype": "attribute",
            "name": "LINEAR",
            "type": "Function",
            "params": [
                {
                    "name": "velocity",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "drag force",
                "type": "Vector"
            },
            "class": "Drag"
        },
        {
            "file": "physics/forces/Drag.js",
            "line": 51,
            "description": "A drag force proportional to the square of the velocity",
            "itemtype": "attribute",
            "name": "QUADRATIC",
            "type": "Function",
            "params": [
                {
                    "name": "velocity",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "drag force",
                "type": "Vector"
            },
            "class": "Drag"
        },
        {
            "file": "physics/forces/Drag.js",
            "line": 63,
            "itemtype": "property",
            "name": "Drag.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Drag"
        },
        {
            "file": "physics/forces/Drag.js",
            "line": 71,
            "description": "The strength of the force\n   Range : [0, 0.1]",
            "itemtype": "attribute",
            "name": "strength",
            "type": "Number",
            "default": "0.01",
            "class": "Drag"
        },
        {
            "file": "physics/forces/Drag.js",
            "line": 80,
            "description": "The type of opposing force",
            "itemtype": "attribute",
            "name": "forceFunction",
            "type": "Function",
            "class": "Drag"
        },
        {
            "file": "physics/forces/Drag.js",
            "line": 88,
            "description": "Adds a drag force to a physics body's force accumulator.",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "targets",
                    "description": "Array of bodies to apply drag force to.",
                    "type": "Array.Body"
                }
            ],
            "class": "Drag"
        },
        {
            "file": "physics/forces/Drag.js",
            "line": 105,
            "description": "Basic options setter",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Objects"
                }
            ],
            "class": "Drag"
        },
        {
            "file": "physics/forces/Force.js",
            "line": 27,
            "description": "Basic setter for options",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Objects"
                }
            ],
            "class": "Force"
        },
        {
            "file": "physics/forces/Force.js",
            "line": 37,
            "description": "Adds a force to a physics body's force accumulator.",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "body",
                    "description": "",
                    "type": "Body"
                }
            ],
            "class": "Force"
        },
        {
            "file": "physics/forces/Force.js",
            "line": 47,
            "description": "Getter for a force's potential energy.",
            "itemtype": "method",
            "name": "getEnergy",
            "return": {
                "description": "energy",
                "type": "Number"
            },
            "class": "Force"
        },
        {
            "file": "physics/forces/Repulsion.js",
            "line": 36,
            "itemtype": "property",
            "name": "Repulsion.DECAY_FUNCTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Repulsion"
        },
        {
            "file": "physics/forces/Repulsion.js",
            "line": 44,
            "description": "A linear decay function",
            "itemtype": "attribute",
            "name": "LINEAR",
            "type": "Function",
            "params": [
                {
                    "name": "r",
                    "description": "distance from the source body",
                    "type": "Number"
                },
                {
                    "name": "cutoff",
                    "description": "the effective radius of influence",
                    "type": "Number"
                }
            ],
            "class": "Repulsion"
        },
        {
            "file": "physics/forces/Repulsion.js",
            "line": 55,
            "description": "A Morse potential decay function (http://en.wikipedia.org/wiki/Morse_potential)",
            "itemtype": "attribute",
            "name": "MORSE",
            "type": "Function",
            "params": [
                {
                    "name": "r",
                    "description": "distance from the source body",
                    "type": "Number"
                },
                {
                    "name": "cutoff",
                    "description": "the minimum radius of influence",
                    "type": "Number"
                }
            ],
            "class": "Repulsion"
        },
        {
            "file": "physics/forces/Repulsion.js",
            "line": 68,
            "description": "An inverse distance decay function",
            "itemtype": "attribute",
            "name": "INVERSE",
            "type": "Function",
            "params": [
                {
                    "name": "r",
                    "description": "distance from the source body",
                    "type": "Number"
                },
                {
                    "name": "cutoff",
                    "description": "a distance shift to avoid singularities",
                    "type": "Number"
                }
            ],
            "class": "Repulsion"
        },
        {
            "file": "physics/forces/Repulsion.js",
            "line": 79,
            "description": "An inverse squared distance decay function",
            "itemtype": "attribute",
            "name": "INVERSE",
            "type": "Function",
            "params": [
                {
                    "name": "r",
                    "description": "distance from the source body",
                    "type": "Number"
                },
                {
                    "name": "cutoff",
                    "description": "a distance shift to avoid singularities",
                    "type": "Number"
                }
            ],
            "class": "Repulsion"
        },
        {
            "file": "physics/forces/Repulsion.js",
            "line": 91,
            "itemtype": "property",
            "name": "Repulsion.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Repulsion"
        },
        {
            "file": "physics/forces/Repulsion.js",
            "line": 99,
            "description": "The strength of the force\n   Range : [0, 100]",
            "itemtype": "attribute",
            "name": "strength",
            "type": "Number",
            "default": "1",
            "class": "Repulsion"
        },
        {
            "file": "physics/forces/Repulsion.js",
            "line": 108,
            "description": "The location of the force, if not another physics body",
            "itemtype": "attribute",
            "name": "anchor",
            "type": "Number",
            "default": "0.01",
            "optional": 1,
            "class": "Repulsion"
        },
        {
            "file": "physics/forces/Repulsion.js",
            "line": 118,
            "description": "The range of the repulsive force",
            "itemtype": "attribute",
            "name": "radii",
            "type": "Array",
            "default": "[0, Infinity]",
            "class": "Repulsion"
        },
        {
            "file": "physics/forces/Repulsion.js",
            "line": 126,
            "description": "A normalization for the force to avoid singularities at the origin",
            "itemtype": "attribute",
            "name": "cutoff",
            "type": "Number",
            "default": "0",
            "class": "Repulsion"
        },
        {
            "file": "physics/forces/Repulsion.js",
            "line": 134,
            "description": "The maximum magnitude of the force\n   Range : [0, Infinity]",
            "itemtype": "attribute",
            "name": "cap",
            "type": "Number",
            "default": "Infinity",
            "class": "Repulsion"
        },
        {
            "file": "physics/forces/Repulsion.js",
            "line": 143,
            "description": "The type of decay the repulsive force should have",
            "itemtype": "attribute",
            "name": "decayFunction",
            "type": "Function",
            "class": "Repulsion"
        },
        {
            "file": "physics/forces/Repulsion.js",
            "line": 166,
            "description": "Adds a drag force to a physics body's force accumulator.",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "targets",
                    "description": "Array of bodies to apply force to",
                    "type": "Array.Body"
                },
                {
                    "name": "source",
                    "description": "The source of the force",
                    "type": "Body"
                }
            ],
            "class": "Repulsion"
        },
        {
            "file": "physics/forces/RotationalDrag.js",
            "line": 32,
            "itemtype": "property",
            "name": "Repulsion.FORCE_FUNCTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "RotationalDrag"
        },
        {
            "file": "physics/forces/RotationalDrag.js",
            "line": 40,
            "description": "A drag force proprtional to the angular velocity",
            "itemtype": "attribute",
            "name": "LINEAR",
            "type": "Function",
            "params": [
                {
                    "name": "angularVelocity",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "drag force",
                "type": "Vector"
            },
            "class": "RotationalDrag"
        },
        {
            "file": "physics/forces/RotationalDrag.js",
            "line": 51,
            "description": "A drag force proprtional to the square of the angular velocity",
            "itemtype": "attribute",
            "name": "QUADRATIC",
            "type": "Function",
            "params": [
                {
                    "name": "angularVelocity",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "drag force",
                "type": "Vector"
            },
            "class": "RotationalDrag"
        },
        {
            "file": "physics/forces/RotationalDrag.js",
            "line": 63,
            "description": "Adds a rotational drag force to a physics body's torque accumulator.",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "targets",
                    "description": "Array of bodies to apply drag force to.",
                    "type": "Array.Body"
                }
            ],
            "class": "RotationalDrag"
        },
        {
            "file": "physics/forces/RotationalSpring.js",
            "line": 35,
            "description": "Adds a torque force to a physics body's torque accumulator.",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "targets",
                    "description": "Array of bodies to apply torque to.",
                    "type": "Array.Body"
                }
            ],
            "class": "RotationalSpring"
        },
        {
            "file": "physics/forces/RotationalSpring.js",
            "line": 72,
            "description": "Calculates the potential energy of the rotational spring.",
            "itemtype": "method",
            "name": "getEnergy",
            "params": [
                {
                    "name": "target",
                    "description": "The physics body attached to the spring",
                    "type": "Body"
                }
            ],
            "class": "RotationalSpring"
        },
        {
            "file": "physics/forces/Spring.js",
            "line": 37,
            "description": "/**\n     * @property Spring.FORCE_FUNCTIONS\n     * @type Object\n     * @protected\n     * @static",
            "class": "Spring"
        },
        {
            "file": "physics/forces/Spring.js",
            "line": 47,
            "description": "A FENE (Finitely Extensible Nonlinear Elastic) spring force\n     see: http://en.wikipedia.org/wiki/FENE",
            "itemtype": "attribute",
            "name": "FENE",
            "type": "Function",
            "params": [
                {
                    "name": "dist",
                    "description": "current distance target is from source body",
                    "type": "Number"
                },
                {
                    "name": "rMax",
                    "description": "maximum range of influence",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "unscaled force",
                "type": "Number"
            },
            "class": "Spring"
        },
        {
            "file": "physics/forces/Spring.js",
            "line": 62,
            "description": "A Hookean spring force, linear in the displacement\n     see: http://en.wikipedia.org/wiki/FENE",
            "itemtype": "attribute",
            "name": "FENE",
            "type": "Function",
            "params": [
                {
                    "name": "dist",
                    "description": "current distance target is from source body",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "unscaled force",
                "type": "Number"
            },
            "class": "Spring"
        },
        {
            "file": "physics/forces/Spring.js",
            "line": 75,
            "itemtype": "property",
            "name": "Spring.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Spring"
        },
        {
            "file": "physics/forces/Spring.js",
            "line": 83,
            "description": "The amount of time in milliseconds taken for one complete oscillation\nwhen there is no damping\n   Range : [150, Infinity]",
            "itemtype": "attribute",
            "name": "period",
            "type": "Number",
            "default": "300",
            "class": "Spring"
        },
        {
            "file": "physics/forces/Spring.js",
            "line": 93,
            "description": "The damping of the spring.\n   Range : [0, 1]\n   0 = no damping, and the spring will oscillate forever\n   1 = critically damped (the spring will never oscillate)",
            "itemtype": "attribute",
            "name": "dampingRatio",
            "type": "Number",
            "default": "0.1",
            "class": "Spring"
        },
        {
            "file": "physics/forces/Spring.js",
            "line": 104,
            "description": "The rest length of the spring\n   Range : [0, Infinity]",
            "itemtype": "attribute",
            "name": "length",
            "type": "Number",
            "default": "0",
            "class": "Spring"
        },
        {
            "file": "physics/forces/Spring.js",
            "line": 113,
            "description": "The maximum length of the spring (for a FENE spring)\n   Range : [0, Infinity]",
            "itemtype": "attribute",
            "name": "length",
            "type": "Number",
            "default": "Infinity",
            "class": "Spring"
        },
        {
            "file": "physics/forces/Spring.js",
            "line": 122,
            "description": "The location of the spring's anchor, if not another physics body",
            "itemtype": "attribute",
            "name": "anchor",
            "type": "Array",
            "optional": 1,
            "class": "Spring"
        },
        {
            "file": "physics/forces/Spring.js",
            "line": 131,
            "description": "The type of spring force",
            "itemtype": "attribute",
            "name": "forceFunction",
            "type": "Function",
            "class": "Spring"
        },
        {
            "file": "physics/forces/Spring.js",
            "line": 163,
            "description": "Basic options setter",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Objects"
                }
            ],
            "class": "Spring"
        },
        {
            "file": "physics/forces/Spring.js",
            "line": 184,
            "description": "Adds a spring force to a physics body's force accumulator.",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "targets",
                    "description": "Array of bodies to apply force to.",
                    "type": "Array.Body"
                }
            ],
            "class": "Spring"
        },
        {
            "file": "physics/forces/Spring.js",
            "line": 230,
            "description": "Calculates the potential energy of the spring.",
            "itemtype": "method",
            "name": "getEnergy",
            "params": [
                {
                    "name": "target",
                    "description": "The physics body attached to the spring",
                    "type": "Body"
                }
            ],
            "return": {
                "description": "energy",
                "type": "Number"
            },
            "class": "Spring"
        },
        {
            "file": "physics/forces/Spring.js",
            "line": 247,
            "description": "Sets the anchor to a new position",
            "itemtype": "method",
            "name": "setAnchor",
            "params": [
                {
                    "name": "anchor",
                    "description": "New anchor of the spring",
                    "type": "Array"
                }
            ],
            "class": "Spring"
        },
        {
            "file": "physics/forces/VectorField.js",
            "line": 37,
            "itemtype": "property",
            "name": "Spring.FORCE_FUNCTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "VectorField"
        },
        {
            "file": "physics/forces/VectorField.js",
            "line": 44,
            "description": "Constant force, e.g., gravity",
            "itemtype": "attribute",
            "name": "CONSTANT",
            "type": "Function",
            "params": [
                {
                    "name": "v",
                    "description": "Current position of physics body",
                    "type": "Vector"
                },
                {
                    "name": "options",
                    "description": "The direction of the force\n     Pass a {direction : Vector} into the VectorField options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "unscaled force",
                "type": "Number"
            },
            "class": "VectorField"
        },
        {
            "file": "physics/forces/VectorField.js",
            "line": 57,
            "description": "Linear force",
            "itemtype": "attribute",
            "name": "LINEAR",
            "type": "Function",
            "params": [
                {
                    "name": "v",
                    "description": "Current position of physics body",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "unscaled force",
                "type": "Number"
            },
            "class": "VectorField"
        },
        {
            "file": "physics/forces/VectorField.js",
            "line": 68,
            "description": "Radial force, e.g., Hookean spring",
            "itemtype": "attribute",
            "name": "RADIAL",
            "type": "Function",
            "params": [
                {
                    "name": "v",
                    "description": "Current position of physics body",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "unscaled force",
                "type": "Number"
            },
            "class": "VectorField"
        },
        {
            "file": "physics/forces/VectorField.js",
            "line": 79,
            "description": "Spherical force",
            "itemtype": "attribute",
            "name": "SPHERE_ATTRACTOR",
            "type": "Function",
            "params": [
                {
                    "name": "v",
                    "description": "Current position of physics body",
                    "type": "Vector"
                },
                {
                    "name": "options",
                    "description": "An object with the radius of the sphere\n     Pass a {radius : Number} into the VectorField options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "unscaled force",
                "type": "Number"
            },
            "class": "VectorField"
        },
        {
            "file": "physics/forces/VectorField.js",
            "line": 92,
            "description": "Point attractor force, e.g., Hookean spring with an anchor",
            "itemtype": "attribute",
            "name": "POINT_ATTRACTOR",
            "type": "Function",
            "params": [
                {
                    "name": "v",
                    "description": "Current position of physics body",
                    "type": "Vector"
                },
                {
                    "name": "options",
                    "description": "And object with the position of the attractor\n     Pass a {position : Vector} into the VectorField options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "unscaled force",
                "type": "Number"
            },
            "class": "VectorField"
        },
        {
            "file": "physics/forces/VectorField.js",
            "line": 106,
            "itemtype": "property",
            "name": "VectorField.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "VectorField"
        },
        {
            "file": "physics/forces/VectorField.js",
            "line": 114,
            "description": "The strength of the force\n   Range : [0, 10]",
            "itemtype": "attribute",
            "name": "strength",
            "type": "Number",
            "default": "1",
            "class": "VectorField"
        },
        {
            "file": "physics/forces/VectorField.js",
            "line": 123,
            "description": "Type of vectorfield\n   Range : [0, 100]",
            "itemtype": "attribute",
            "name": "field",
            "type": "Function",
            "class": "VectorField"
        },
        {
            "file": "physics/forces/VectorField.js",
            "line": 132,
            "description": "Basic options setter",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Objects"
                }
            ],
            "class": "VectorField"
        },
        {
            "file": "physics/forces/VectorField.js",
            "line": 165,
            "description": "Adds the vectorfield's force to a physics body's force accumulator.",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "targets",
                    "description": "Array of bodies to apply force to.",
                    "type": "Array.body"
                }
            ],
            "class": "VectorField"
        },
        {
            "file": "physics/integrators/SymplecticEuler.js",
            "line": 38,
            "itemtype": "property",
            "name": "SymplecticEuler.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "SymplecticEuler"
        },
        {
            "file": "physics/integrators/SymplecticEuler.js",
            "line": 46,
            "description": "The maximum velocity of a physics body\n     Range : [0, Infinity]",
            "itemtype": "attribute",
            "name": "velocityCap",
            "type": "Number",
            "class": "SymplecticEuler"
        },
        {
            "file": "physics/integrators/SymplecticEuler.js",
            "line": 55,
            "description": "The maximum angular velocity of a physics body\n     Range : [0, Infinity]",
            "itemtype": "attribute",
            "name": "angularVelocityCap",
            "type": "Number",
            "class": "SymplecticEuler"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 42,
            "itemtype": "property",
            "name": "PhysicsEngine.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 50,
            "description": "The number of iterations the engine takes to resolve constraints",
            "itemtype": "attribute",
            "name": "constraintSteps",
            "type": "Number",
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 57,
            "description": "The energy threshold before the Engine stops updating",
            "itemtype": "attribute",
            "name": "sleepTolerance",
            "type": "Number",
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 69,
            "description": "Options setter",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 78,
            "description": "Method to add a physics body to the engine. Necessary to update the\nbody over time.",
            "itemtype": "method",
            "name": "addBody",
            "params": [
                {
                    "name": "body",
                    "description": "",
                    "type": "Body"
                }
            ],
            "return": {
                "description": "body",
                "type": "Body"
            },
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 96,
            "description": "Remove a body from the engine. Detaches body from all forces and\nconstraints.",
            "itemtype": "method",
            "name": "removeBody",
            "params": [
                {
                    "name": "body",
                    "description": "",
                    "type": "Body"
                }
            ],
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 132,
            "description": "Attaches a force or constraint to a Body. Returns an AgentId of the\nattached agent which can be used to detach the agent.",
            "itemtype": "method",
            "name": "attach",
            "params": [
                {
                    "name": "agent",
                    "description": "A force, constraint, or array of them.",
                    "type": "Agent|Array.Agent"
                },
                {
                    "name": "targets",
                    "description": "The Body or Bodies affected by the agent",
                    "type": "Body|Array.Body",
                    "optional": true,
                    "optdefault": "All"
                },
                {
                    "name": "source",
                    "description": "The source of the agent",
                    "type": "Body",
                    "optional": true
                }
            ],
            "return": {
                "description": "AgentId",
                "type": "Number"
            },
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 152,
            "description": "Append a body to the targets of a previously defined physics agent.",
            "itemtype": "method",
            "name": "attachTo",
            "params": [
                {
                    "name": "agentID",
                    "description": "The agentId of a previously defined agent",
                    "type": "AgentId"
                },
                {
                    "name": "target",
                    "description": "The Body affected by the agent",
                    "type": "Body"
                }
            ],
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 163,
            "description": "Undoes PhysicsEngine.attach. Removes an agent and its associated\neffect on its affected Bodies.",
            "itemtype": "method",
            "name": "detach",
            "params": [
                {
                    "name": "agentID",
                    "description": "The agentId of a previously defined agent",
                    "type": "AgentId"
                }
            ],
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 181,
            "description": "Remove a single Body from a previously defined agent.",
            "itemtype": "method",
            "name": "detach",
            "params": [
                {
                    "name": "agentID",
                    "description": "The agentId of a previously defined agent",
                    "type": "AgentId"
                },
                {
                    "name": "target",
                    "description": "The body to remove from the agent",
                    "type": "Body"
                }
            ],
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 198,
            "description": "A convenience method to give the Physics Engine a clean slate of\nagents. Preserves all added Body objects.",
            "itemtype": "method",
            "name": "detachAll",
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 215,
            "description": "Returns the corresponding agent given its agentId.",
            "itemtype": "method",
            "name": "getAgent",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "AgentId"
                }
            ],
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 225,
            "description": "Returns all particles that are currently managed by the Physics Engine.",
            "itemtype": "method",
            "name": "getParticles",
            "return": {
                "description": "particles",
                "type": "Array.Particles"
            },
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 235,
            "description": "Returns all bodies, except particles, that are currently managed by the Physics Engine.",
            "itemtype": "method",
            "name": "getBodies",
            "return": {
                "description": "bodies",
                "type": "Array.Bodies"
            },
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 245,
            "description": "Returns all bodies that are currently managed by the Physics Engine.",
            "itemtype": "method",
            "name": "getBodies",
            "return": {
                "description": "bodies",
                "type": "Array.Bodies"
            },
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 255,
            "description": "Iterates over every Particle and applies a function whose first\nargument is the Particle",
            "itemtype": "method",
            "name": "forEachParticle",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to iterate over",
                    "type": "Function"
                },
                {
                    "name": "dt",
                    "description": "Delta time",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 269,
            "description": "Iterates over every Body that isn't a Particle and applies\na function whose first argument is the Body",
            "itemtype": "method",
            "name": "forEachBody",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to iterate over",
                    "type": "Function"
                },
                {
                    "name": "dt",
                    "description": "Delta time",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 284,
            "description": "Iterates over every Body and applies a function whose first\nargument is the Body",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to iterate over",
                    "type": "Function"
                },
                {
                    "name": "dt",
                    "description": "Delta time",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 373,
            "description": "Calculates the kinetic energy of all Body objects and potential energy\nof all attached agents.\n\nTODO: implement.",
            "itemtype": "method",
            "name": "getEnergy",
            "return": {
                "description": "energy",
                "type": "Number"
            },
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 385,
            "description": "Updates all Body objects managed by the physics engine over the\ntime duration since the last time step was called.",
            "itemtype": "method",
            "name": "step",
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 421,
            "description": "Tells whether the Physics Engine is sleeping or awake.",
            "itemtype": "method",
            "name": "isSleeping",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 430,
            "description": "Stops the Physics Engine from updating. Emits an 'end' event.",
            "itemtype": "method",
            "name": "sleep",
            "class": "PhysicsEngine"
        },
        {
            "file": "physics/PhysicsEngine.js",
            "line": 439,
            "description": "Starts the Physics Engine from updating. Emits an 'start' event.",
            "itemtype": "method",
            "name": "wake",
            "class": "PhysicsEngine"
        },
        {
            "file": "surfaces/CanvasSurface.js",
            "line": 40,
            "description": "Set inner document content.  Note that this is a noop for CanvasSurface.",
            "itemtype": "method",
            "name": "setContent",
            "class": "CanvasSurface"
        },
        {
            "file": "surfaces/CanvasSurface.js",
            "line": 48,
            "description": "Place the document element this component manages into the document.\n   This will draw the content to the document.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deploy",
            "params": [
                {
                    "name": "target",
                    "description": "document parent of this container",
                    "type": "Node"
                }
            ],
            "class": "CanvasSurface"
        },
        {
            "file": "surfaces/CanvasSurface.js",
            "line": 68,
            "description": "Remove this component and contained content from the document",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "recall",
            "params": [
                {
                    "name": "target",
                    "description": "node to which the component was deployed",
                    "type": "Node"
                }
            ],
            "class": "CanvasSurface"
        },
        {
            "file": "surfaces/CanvasSurface.js",
            "line": 89,
            "description": "Returns the canvas element's context",
            "itemtype": "method",
            "name": "getContext",
            "params": [
                {
                    "name": "contextId",
                    "description": "context identifier",
                    "type": "String"
                }
            ],
            "class": "CanvasSurface"
        },
        {
            "file": "surfaces/CanvasSurface.js",
            "line": 100,
            "description": "Set the size of the surface and canvas element.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "size",
                    "description": "[width, height] of surface",
                    "type": "Array.number"
                },
                {
                    "name": "canvasSize",
                    "description": "[width, height] of canvas surface",
                    "type": "Array.number"
                }
            ],
            "class": "CanvasSurface"
        },
        {
            "file": "surfaces/ContainerSurface.js",
            "line": 52,
            "description": "Add renderables to this object's render tree",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "obj",
                    "description": "renderable object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "RenderNode wrapping this object, if not already a RenderNode",
                "type": "RenderNode"
            },
            "class": "ContainerSurface"
        },
        {
            "file": "surfaces/ContainerSurface.js",
            "line": 64,
            "description": "Return spec for this surface.  Note: Can result in a size recalculation.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "render spec for this surface (spec id)",
                "type": "Object"
            },
            "class": "ContainerSurface"
        },
        {
            "file": "surfaces/ContainerSurface.js",
            "line": 77,
            "description": "Place the document element this component manages into the document.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deploy",
            "params": [
                {
                    "name": "target",
                    "description": "document parent of this container",
                    "type": "Node"
                }
            ],
            "class": "ContainerSurface"
        },
        {
            "file": "surfaces/ContainerSurface.js",
            "line": 89,
            "description": "Apply changes from this component to the corresponding document element.\nThis includes changes to classes, styles, size, content, opacity, origin,\nand matrix transforms.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "commit",
            "params": [
                {
                    "name": "context",
                    "description": "commit context",
                    "type": "Context"
                },
                {
                    "name": "transform",
                    "description": "unused TODO",
                    "type": "Transform"
                },
                {
                    "name": "opacity",
                    "description": "unused TODO",
                    "type": "Number"
                },
                {
                    "name": "origin",
                    "description": "unused TODO",
                    "type": "Array.Number"
                },
                {
                    "name": "size",
                    "description": "unused TODO",
                    "type": "Array.Number"
                }
            ],
            "return": {
                "description": "TODO returns an undefined value",
                "type": "Undefined"
            },
            "class": "ContainerSurface"
        },
        {
            "file": "surfaces/ImageSurface.js",
            "line": 34,
            "description": "Set content URL.  This will cause a re-rendering.",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "imageUrl",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ImageSurface"
        },
        {
            "file": "surfaces/ImageSurface.js",
            "line": 44,
            "description": "Place the document element that this component manages into the document.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deploy",
            "params": [
                {
                    "name": "target",
                    "description": "document parent of this container",
                    "type": "Node"
                }
            ],
            "class": "ImageSurface"
        },
        {
            "file": "surfaces/ImageSurface.js",
            "line": 55,
            "description": "Remove this component and contained content from the document",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "recall",
            "params": [
                {
                    "name": "target",
                    "description": "node to which the component was deployed",
                    "type": "Node"
                }
            ],
            "class": "ImageSurface"
        },
        {
            "file": "surfaces/InputSurface.js",
            "line": 40,
            "description": "Set placeholder text.  Note: Triggers a repaint.",
            "itemtype": "method",
            "name": "setPlaceholder",
            "params": [
                {
                    "name": "str",
                    "description": "Value to set the placeholder to.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this, allowing method chaining.",
                "type": "InputSurface"
            },
            "class": "InputSurface"
        },
        {
            "file": "surfaces/InputSurface.js",
            "line": 53,
            "description": "Focus on the current input, pulling up the keyboard on mobile.",
            "itemtype": "method",
            "name": "focus",
            "return": {
                "description": "this, allowing method chaining.",
                "type": "InputSurface"
            },
            "class": "InputSurface"
        },
        {
            "file": "surfaces/InputSurface.js",
            "line": 64,
            "description": "Blur the current input, hiding the keyboard on mobile.",
            "itemtype": "method",
            "name": "focus",
            "return": {
                "description": "this, allowing method chaining.",
                "type": "InputSurface"
            },
            "class": "InputSurface"
        },
        {
            "file": "surfaces/InputSurface.js",
            "line": 75,
            "description": "Set the placeholder conent.\n  Note: Triggers a repaint next tick.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "str",
                    "description": "Value to set the main input value to.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this, allowing method chaining.",
                "type": "InputSurface"
            },
            "class": "InputSurface"
        },
        {
            "file": "surfaces/InputSurface.js",
            "line": 89,
            "description": "Set the type of element to display conent.\n  Note: Triggers a repaint next tick.",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "str",
                    "description": "type of the input surface (e.g. 'button', 'text')",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this, allowing method chaining.",
                "type": "InputSurface"
            },
            "class": "InputSurface"
        },
        {
            "file": "surfaces/InputSurface.js",
            "line": 103,
            "description": "Get the value of the inner content of the element (e.g. the entered text)",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "value of element",
                "type": "String"
            },
            "class": "InputSurface"
        },
        {
            "file": "surfaces/InputSurface.js",
            "line": 118,
            "description": "Set the name attribute of the element.\n  Note: Triggers a repaint next tick.",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "str",
                    "description": "element name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this, allowing method chaining.",
                "type": "InputSurface"
            },
            "class": "InputSurface"
        },
        {
            "file": "surfaces/InputSurface.js",
            "line": 132,
            "description": "Get the name attribute of the element.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "name of element",
                "type": "String"
            },
            "class": "InputSurface"
        },
        {
            "file": "surfaces/InputSurface.js",
            "line": 142,
            "description": "Place the document element this component manages into the document.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deploy",
            "params": [
                {
                    "name": "target",
                    "description": "document parent of this container",
                    "type": "Node"
                }
            ],
            "class": "InputSurface"
        },
        {
            "file": "surfaces/VideoSurface.js",
            "line": 47,
            "description": "Set internal options, overriding any default options",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "overrides of default options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "autoplay",
                            "description": "HTML autoplay",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "VideoSurface"
        },
        {
            "file": "surfaces/VideoSurface.js",
            "line": 61,
            "description": "Set url of the video.",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "videoUrl",
                    "description": "URL",
                    "type": "String"
                }
            ],
            "class": "VideoSurface"
        },
        {
            "file": "surfaces/VideoSurface.js",
            "line": 72,
            "description": "Place the document element this component manages into the document.\n  Note: In the case of VideoSurface, simply changes the options on the target.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deploy",
            "params": [
                {
                    "name": "target",
                    "description": "document parent of this container",
                    "type": "Node"
                }
            ],
            "class": "VideoSurface"
        },
        {
            "file": "surfaces/VideoSurface.js",
            "line": 85,
            "description": "Remove this component and contained content from the document.\n  Note: This doesn't actually remove the <video> element from the\n  document.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "recall",
            "params": [
                {
                    "name": "target",
                    "description": "node to which the component was deployed",
                    "type": "Node"
                }
            ],
            "class": "VideoSurface"
        },
        {
            "file": "transitions/CachedMap.js",
            "line": 23,
            "description": "Creates a mapping function with a cache.\nThis is the main entrypoint for this object.",
            "static": 1,
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "mappingFunction",
                    "description": "mapping",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "memoized mapping function",
                "type": "Function"
            },
            "class": "CachedMap"
        },
        {
            "file": "transitions/CachedMap.js",
            "line": 36,
            "description": "Retrieve items from cache or from mapping functin.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "input",
                    "description": "input key",
                    "type": "Object"
                }
            ],
            "class": "CachedMap"
        },
        {
            "file": "transitions/Easing.js",
            "line": 19,
            "itemtype": "property",
            "name": "inQuad",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 27,
            "itemtype": "property",
            "name": "outQuad",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 35,
            "itemtype": "property",
            "name": "inOutQuad",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 44,
            "itemtype": "property",
            "name": "inCubic",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 52,
            "itemtype": "property",
            "name": "outCubic",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 60,
            "itemtype": "property",
            "name": "inOutCubic",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 69,
            "itemtype": "property",
            "name": "inQuart",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 77,
            "itemtype": "property",
            "name": "outQuart",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 85,
            "itemtype": "property",
            "name": "inOutQuart",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 94,
            "itemtype": "property",
            "name": "inQuint",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 102,
            "itemtype": "property",
            "name": "outQuint",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 110,
            "itemtype": "property",
            "name": "inQuad",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 119,
            "itemtype": "property",
            "name": "inSine",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 127,
            "itemtype": "property",
            "name": "outSine",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 135,
            "itemtype": "property",
            "name": "inOutSine",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 143,
            "itemtype": "property",
            "name": "inExpo",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 151,
            "itemtype": "property",
            "name": "outExpo",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 159,
            "itemtype": "property",
            "name": "inOutExpo",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 170,
            "itemtype": "property",
            "name": "inCirc",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 178,
            "itemtype": "property",
            "name": "outCirc",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 186,
            "itemtype": "property",
            "name": "inOutCirc",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 195,
            "itemtype": "property",
            "name": "inElastic",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 206,
            "itemtype": "property",
            "name": "outElastic",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 217,
            "itemtype": "property",
            "name": "inOutElastic",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 229,
            "itemtype": "property",
            "name": "inBack",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 238,
            "itemtype": "property",
            "name": "outBack",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 247,
            "itemtype": "property",
            "name": "inOutBack",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 257,
            "itemtype": "property",
            "name": "inBounce",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 265,
            "itemtype": "property",
            "name": "outBounce",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/Easing.js",
            "line": 281,
            "itemtype": "property",
            "name": "inOutBounce",
            "static": 1,
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/MultipleTransition.js",
            "line": 31,
            "description": "Get the state of each transition.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "state  state array",
                "type": "Number|Array"
            },
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/MultipleTransition.js",
            "line": 45,
            "description": "Set the end states with a shared transition, with optional callback.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "endState",
                    "description": "Final State.  Use a multi-element argument for multiple transitions.",
                    "type": "Number|Array"
                },
                {
                    "name": "transition",
                    "description": "Transition definition, shared among all instances",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "called when all endStates have been reached.",
                    "type": "Function"
                }
            ],
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/MultipleTransition.js",
            "line": 62,
            "description": "Reset all transitions to start state.",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "startState",
                    "description": "Start state",
                    "type": "Number|Array"
                }
            ],
            "class": "MultipleTransition"
        },
        {
            "file": "transitions/SnapTransition.js",
            "line": 47,
            "itemtype": "property",
            "name": "SnapTransition.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "SnapTransition"
        },
        {
            "file": "transitions/SnapTransition.js",
            "line": 55,
            "description": "The amount of time in milliseconds taken for one complete oscillation\nwhen there is no damping\n   Range : [0, Infinity]",
            "itemtype": "attribute",
            "name": "period",
            "type": "Number",
            "default": "100",
            "class": "SnapTransition"
        },
        {
            "file": "transitions/SnapTransition.js",
            "line": 66,
            "description": "The damping of the snap.\n   Range : [0, 1]",
            "itemtype": "attribute",
            "name": "dampingRatio",
            "type": "Number",
            "default": "0.2",
            "class": "SnapTransition"
        },
        {
            "file": "transitions/SnapTransition.js",
            "line": 76,
            "description": "The initial velocity of the transition.",
            "itemtype": "attribute",
            "name": "velocity",
            "type": "Number|Array",
            "default": "0",
            "class": "SnapTransition"
        },
        {
            "file": "transitions/SnapTransition.js",
            "line": 167,
            "description": "Resets the state and velocity",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "state",
                    "description": "State",
                    "type": "Number|Array"
                },
                {
                    "name": "velocity",
                    "description": "Velocity",
                    "type": "Number|Array",
                    "optional": true
                }
            ],
            "class": "SnapTransition"
        },
        {
            "file": "transitions/SnapTransition.js",
            "line": 187,
            "description": "Getter for velocity",
            "itemtype": "method",
            "name": "getVelocity",
            "return": {
                "description": "velocity",
                "type": "Number|Array"
            },
            "class": "SnapTransition"
        },
        {
            "file": "transitions/SnapTransition.js",
            "line": 198,
            "description": "Setter for velocity",
            "itemtype": "method",
            "name": "setVelocity",
            "return": {
                "description": "velocity",
                "type": "Number|Array"
            },
            "class": "SnapTransition"
        },
        {
            "file": "transitions/SnapTransition.js",
            "line": 209,
            "description": "Detects whether a transition is in progress",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "SnapTransition"
        },
        {
            "file": "transitions/SnapTransition.js",
            "line": 220,
            "description": "Halt the transition",
            "itemtype": "method",
            "name": "halt",
            "class": "SnapTransition"
        },
        {
            "file": "transitions/SnapTransition.js",
            "line": 229,
            "description": "Get the current position of the transition\ns     *",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "state",
                "type": "Number|Array"
            },
            "class": "SnapTransition"
        },
        {
            "file": "transitions/SnapTransition.js",
            "line": 241,
            "description": "Set the end position and transition, with optional callback on completion.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "state",
                    "description": "Final state",
                    "type": "Number|Array"
                },
                {
                    "name": "definition",
                    "description": "Transition definition",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "SnapTransition"
        },
        {
            "file": "transitions/SpringTransition.js",
            "line": 46,
            "itemtype": "property",
            "name": "SpringTransition.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "SpringTransition"
        },
        {
            "file": "transitions/SpringTransition.js",
            "line": 54,
            "description": "The amount of time in milliseconds taken for one complete oscillation\nwhen there is no damping\n   Range : [0, Infinity]",
            "itemtype": "attribute",
            "name": "period",
            "type": "Number",
            "default": "300",
            "class": "SpringTransition"
        },
        {
            "file": "transitions/SpringTransition.js",
            "line": 65,
            "description": "The damping of the snap.\n   Range : [0, 1]\n   0 = no damping, and the spring will oscillate forever\n   1 = critically damped (the spring will never oscillate)",
            "itemtype": "attribute",
            "name": "dampingRatio",
            "type": "Number",
            "default": "0.5",
            "class": "SpringTransition"
        },
        {
            "file": "transitions/SpringTransition.js",
            "line": 77,
            "description": "The initial velocity of the transition.",
            "itemtype": "attribute",
            "name": "velocity",
            "type": "Number|Array",
            "default": "0",
            "class": "SpringTransition"
        },
        {
            "file": "transitions/SpringTransition.js",
            "line": 173,
            "description": "Resets the position and velocity",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "pos",
                    "description": "positional state",
                    "type": "Number|Array.Number"
                },
                {
                    "name": "vel",
                    "description": "velocity",
                    "type": "Number|Array"
                }
            ],
            "class": "SpringTransition"
        },
        {
            "file": "transitions/SpringTransition.js",
            "line": 193,
            "description": "Getter for velocity",
            "itemtype": "method",
            "name": "getVelocity",
            "return": {
                "description": "velocity",
                "type": "Number|Array"
            },
            "class": "SpringTransition"
        },
        {
            "file": "transitions/SpringTransition.js",
            "line": 204,
            "description": "Setter for velocity",
            "itemtype": "method",
            "name": "setVelocity",
            "return": {
                "description": "velocity",
                "type": "Number|Array"
            },
            "class": "SpringTransition"
        },
        {
            "file": "transitions/SpringTransition.js",
            "line": 215,
            "description": "Detects whether a transition is in progress",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "SpringTransition"
        },
        {
            "file": "transitions/SpringTransition.js",
            "line": 226,
            "description": "Halt the transition",
            "itemtype": "method",
            "name": "halt",
            "class": "SpringTransition"
        },
        {
            "file": "transitions/SpringTransition.js",
            "line": 235,
            "description": "Get the current position of the transition",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "state",
                "type": "Number|Array"
            },
            "class": "SpringTransition"
        },
        {
            "file": "transitions/SpringTransition.js",
            "line": 247,
            "description": "Set the end position and transition, with optional callback on completion.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "endState",
                    "description": "Final state",
                    "type": "Number|Array"
                },
                {
                    "name": "definition",
                    "description": "Transition definition",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Callback",
                    "type": "Function"
                }
            ],
            "class": "SpringTransition"
        },
        {
            "file": "transitions/Transitionable.js",
            "line": 106,
            "description": "Add transition to end state to the queue of pending transitions. Special\n   Use: calling without a transition resets the object to that state with\n   no pending actions",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "endState!~YUIDOC_LINE~!",
                    "description": "end state to which we interpolate",
                    "type": "number|FamousMatrix|Array.Number|Object.<number, number>"
                },
                {
                    "name": "transition",
                    "description": "object of type {duration: number, curve:\n   f[0,1] -> [0,1] or name}. If transition is omitted, change will be\n   instantaneous.",
                    "type": "Transition="
                },
                {
                    "name": "callback",
                    "description": "Zero-argument function to call on observed\n   completion (t=1)",
                    "type": "Function()="
                }
            ],
            "class": "Transitionable"
        },
        {
            "file": "transitions/Transitionable.js",
            "line": 135,
            "description": "Cancel all transitions and reset to a stable state",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "startState!~YUIDOC_LINE~!",
                    "description": "stable state to set to",
                    "type": "number|Array.Number|Object.<number, number>"
                }
            ],
            "class": "Transitionable"
        },
        {
            "file": "transitions/Transitionable.js",
            "line": 153,
            "description": "Add delay action to the pending action queue queue.",
            "itemtype": "method",
            "name": "delay",
            "params": [
                {
                    "name": "duration",
                    "description": "delay time (ms)",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "Zero-argument function to call on observed\n   completion (t=1)",
                    "type": "Function"
                }
            ],
            "class": "Transitionable"
        },
        {
            "file": "transitions/Transitionable.js",
            "line": 170,
            "description": "Get interpolated state of current action at provided time. If the last\n   action has completed, invoke its callback.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "timestamp",
                    "description": "Evaluate the curve at a normalized version of this\n   time. If omitted, use current time. (Unix epoch time)",
                    "type": "Number="
                }
            ],
            "return": {
                "description": "beginning state\n   interpolated to this point in time.",
                "type": "number|Object.<number|string, number>"
            },
            "class": "Transitionable"
        },
        {
            "file": "transitions/Transitionable.js",
            "line": 190,
            "description": "Is there at least one action pending completion?",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Transitionable"
        },
        {
            "file": "transitions/Transitionable.js",
            "line": 201,
            "description": "Halt transition at current state and erase all pending actions.",
            "itemtype": "method",
            "name": "halt",
            "class": "Transitionable"
        },
        {
            "file": "transitions/TransitionableTransform.js",
            "line": 43,
            "description": "An optimized way of setting only the translation component of a Transform",
            "itemtype": "method",
            "name": "setTranslate",
            "chainable": 1,
            "params": [
                {
                    "name": "translate",
                    "description": "New translation state",
                    "type": "Array"
                },
                {
                    "name": "transition",
                    "description": "Transition definition",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "TransitionableTransform"
            },
            "class": "TransitionableTransform"
        },
        {
            "file": "transitions/TransitionableTransform.js",
            "line": 63,
            "description": "An optimized way of setting only the scale component of a Transform",
            "itemtype": "method",
            "name": "setTranslate",
            "chainable": 1,
            "params": [
                {
                    "name": "scale",
                    "description": "New scale state",
                    "type": "Array"
                },
                {
                    "name": "transition",
                    "description": "Transition definition",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "TransitionableTransform"
            },
            "class": "TransitionableTransform"
        },
        {
            "file": "transitions/TransitionableTransform.js",
            "line": 83,
            "description": "An optimized way of setting only the rotational component of a Transform",
            "itemtype": "method",
            "name": "setTranslate",
            "chainable": 1,
            "params": [
                {
                    "name": "eulerAngles",
                    "description": "Euler angles for new rotation state",
                    "type": "Array"
                },
                {
                    "name": "transition",
                    "description": "Transition definition",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "TransitionableTransform"
            },
            "class": "TransitionableTransform"
        },
        {
            "file": "transitions/TransitionableTransform.js",
            "line": 106,
            "description": "An optimized way of setting only the skew component of a Transform",
            "itemtype": "method",
            "name": "setTranslate",
            "chainable": 1,
            "params": [
                {
                    "name": "skewAngles",
                    "description": "New skew state",
                    "type": "Array"
                },
                {
                    "name": "transition",
                    "description": "Transition definition",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "TransitionableTransform"
            },
            "class": "TransitionableTransform"
        },
        {
            "file": "transitions/TransitionableTransform.js",
            "line": 128,
            "description": "Setter for a TransitionableTransform with optional parameters to transition\nbetween Transforms",
            "itemtype": "method",
            "name": "setTranslate",
            "chainable": 1,
            "params": [
                {
                    "name": "transform",
                    "description": "New transform state",
                    "type": "Array"
                },
                {
                    "name": "transition",
                    "description": "Transition definition",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "TransitionableTransform"
            },
            "class": "TransitionableTransform"
        },
        {
            "file": "transitions/TransitionableTransform.js",
            "line": 152,
            "description": "Sets the default transition to use for transitioning betwen Transform states",
            "itemtype": "method",
            "name": "setDefaultTransition",
            "params": [
                {
                    "name": "transition",
                    "description": "Transition definition",
                    "type": "Object"
                }
            ],
            "class": "TransitionableTransform"
        },
        {
            "file": "transitions/TransitionableTransform.js",
            "line": 166,
            "description": "Getter. Returns the current state of the Transform",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "",
                "type": "Transform"
            },
            "class": "TransitionableTransform"
        },
        {
            "file": "transitions/TransitionableTransform.js",
            "line": 180,
            "description": "Get the destination state of the Transform",
            "itemtype": "method",
            "name": "getFinal",
            "return": {
                "description": "Transform",
                "type": "Transform"
            },
            "class": "TransitionableTransform"
        },
        {
            "file": "transitions/TransitionableTransform.js",
            "line": 191,
            "description": "Determine if the TransitionalTransform is currently transitioning",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "TransitionableTransform"
        },
        {
            "file": "transitions/TransitionableTransform.js",
            "line": 202,
            "description": "Halts the transition",
            "itemtype": "method",
            "name": "halt",
            "class": "TransitionableTransform"
        },
        {
            "file": "transitions/TweenTransition.js",
            "line": 51,
            "description": "Transition curves mapping independent variable t from domain [0,1] to a\n   range within [0,1]. Includes functions 'linear', 'easeIn', 'easeOut',\n   'easeInOut', 'easeOutBounce', 'spring'.",
            "itemtype": "property",
            "name": "Curve",
            "type": "Object",
            "final": 1,
            "class": "TweenTransition"
        },
        {
            "file": "transitions/TweenTransition.js",
            "line": 90,
            "description": "Add \"unit\" curve to internal dictionary of registered curves.",
            "itemtype": "method",
            "name": "registerCurve",
            "static": 1,
            "params": [
                {
                    "name": "curveName",
                    "description": "dictionary key",
                    "type": "String"
                },
                {
                    "name": "curve",
                    "description": "function of one numeric variable mapping [0,1]\n   to range inside [0,1]",
                    "type": "UnitCurve"
                }
            ],
            "return": {
                "description": "false if key is taken, else true",
                "type": "Boolean"
            },
            "class": "TweenTransition"
        },
        {
            "file": "transitions/TweenTransition.js",
            "line": 112,
            "description": "Remove object with key \"curveName\" from internal dictionary of registered\n   curves.",
            "itemtype": "method",
            "name": "unregisterCurve",
            "static": 1,
            "params": [
                {
                    "name": "curveName",
                    "description": "dictionary key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "false if key has no dictionary value",
                "type": "Boolean"
            },
            "class": "TweenTransition"
        },
        {
            "file": "transitions/TweenTransition.js",
            "line": 133,
            "description": "Retrieve function with key \"curveName\" from internal dictionary of\n   registered curves. Default curves are defined in the\n   TweenTransition.Curves array, where the values represent\n   unitCurve functions.",
            "itemtype": "method",
            "name": "getCurve",
            "static": 1,
            "params": [
                {
                    "name": "curveName",
                    "description": "dictionary key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "curve function of one numeric variable mapping [0,1]\n   to range inside [0,1]",
                "type": "UnitCurve"
            },
            "class": "TweenTransition"
        },
        {
            "file": "transitions/TweenTransition.js",
            "line": 151,
            "description": "Retrieve all available curves.",
            "itemtype": "method",
            "name": "getCurves",
            "static": 1,
            "return": {
                "description": "curve functions of one numeric variable mapping [0,1]\n   to range inside [0,1]",
                "type": "Object"
            },
            "class": "TweenTransition"
        },
        {
            "file": "transitions/TweenTransition.js",
            "line": 194,
            "description": "Set internal options, overriding any default options.",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "options object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "curve",
                            "description": "function mapping [0,1] to [0,1] or identifier",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "description": "duration in ms",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "speed",
                            "description": "speed in pixels per ms",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "TweenTransition"
        },
        {
            "file": "transitions/TweenTransition.js",
            "line": 211,
            "description": "Add transition to end state to the queue of pending transitions. Special\n   Use: calling without a transition resets the object to that state with\n   no pending actions",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "endValue!~YUIDOC_LINE~!",
                    "description": "end state to which we _interpolate",
                    "type": "number|FamousMatrix|Array.Number|Object.<number, number>"
                },
                {
                    "name": "transition",
                    "description": "object of type {duration: number, curve:\n   f[0,1] -> [0,1] or name}. If transition is omitted, change will be\n   instantaneous.",
                    "type": "Transition="
                },
                {
                    "name": "callback",
                    "description": "Zero-argument function to call on observed\n   completion (t=1)",
                    "type": "Function()="
                }
            ],
            "class": "TweenTransition"
        },
        {
            "file": "transitions/TweenTransition.js",
            "line": 257,
            "description": "Cancel all transitions and reset to a stable state",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "startValue!~YUIDOC_LINE~!",
                    "description": "starting state",
                    "type": "number|Array.Number|Object.<number, number>"
                },
                {
                    "name": "startVelocity!~YUIDOC_LINE~!",
                    "description": "starting velocity",
                    "type": "Number"
                }
            ],
            "class": "TweenTransition"
        },
        {
            "file": "transitions/TweenTransition.js",
            "line": 284,
            "description": "Get current velocity",
            "itemtype": "method",
            "name": "getVelocity",
            "return": {
                "description": "velocity",
                "type": "Number"
            },
            "class": "TweenTransition"
        },
        {
            "file": "transitions/TweenTransition.js",
            "line": 295,
            "description": "Get interpolated state of current action at provided time. If the last\n   action has completed, invoke its callback.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "timestamp",
                    "description": "Evaluate the curve at a normalized version of this\n   time. If omitted, use current time. (Unix epoch time)",
                    "type": "Number="
                }
            ],
            "return": {
                "description": "beginning state\n   _interpolated to this point in time.",
                "type": "number|Object.<number|string, number>"
            },
            "class": "TweenTransition"
        },
        {
            "file": "transitions/TweenTransition.js",
            "line": 336,
            "description": "Update internal state to the provided timestamp. This may invoke the last\n   callback and begin a new action.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "timestamp",
                    "description": "Evaluate the curve at a normalized version of this\n   time. If omitted, use current time. (Unix epoch time)",
                    "type": "Number="
                }
            ],
            "class": "TweenTransition"
        },
        {
            "file": "transitions/TweenTransition.js",
            "line": 377,
            "description": "Is there at least one action pending completion?",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "TweenTransition"
        },
        {
            "file": "transitions/TweenTransition.js",
            "line": 389,
            "description": "Halt transition at current state and erase all pending actions.",
            "itemtype": "method",
            "name": "halt",
            "class": "TweenTransition"
        },
        {
            "file": "transitions/WallTransition.js",
            "line": 51,
            "itemtype": "property",
            "name": "WallTransition.DEFAULT_OPTIONS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "WallTransition"
        },
        {
            "file": "transitions/WallTransition.js",
            "line": 59,
            "description": "The amount of time in milliseconds taken for one complete oscillation\nwhen there is no damping\n   Range : [0, Infinity]",
            "itemtype": "attribute",
            "name": "period",
            "type": "Number",
            "default": "300",
            "class": "WallTransition"
        },
        {
            "file": "transitions/WallTransition.js",
            "line": 70,
            "description": "The damping of the snap.\n   Range : [0, 1]\n   0 = no damping, and the spring will oscillate forever\n   1 = critically damped (the spring will never oscillate)",
            "itemtype": "attribute",
            "name": "dampingRatio",
            "type": "Number",
            "default": "0.5",
            "class": "WallTransition"
        },
        {
            "file": "transitions/WallTransition.js",
            "line": 82,
            "description": "The initial velocity of the transition.",
            "itemtype": "attribute",
            "name": "velocity",
            "type": "Number|Array",
            "default": "0",
            "class": "WallTransition"
        },
        {
            "file": "transitions/WallTransition.js",
            "line": 91,
            "description": "The percentage of momentum transferred to the wall",
            "itemtype": "attribute",
            "name": "restitution",
            "type": "Number",
            "default": "0.5",
            "class": "WallTransition"
        },
        {
            "file": "transitions/WallTransition.js",
            "line": 198,
            "description": "Resets the state and velocity",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "state",
                    "description": "State",
                    "type": "Number|Array"
                },
                {
                    "name": "velocity",
                    "description": "Velocity",
                    "type": "Number|Array",
                    "optional": true
                }
            ],
            "class": "WallTransition"
        },
        {
            "file": "transitions/WallTransition.js",
            "line": 218,
            "description": "Getter for velocity",
            "itemtype": "method",
            "name": "getVelocity",
            "return": {
                "description": "velocity",
                "type": "Number|Array"
            },
            "class": "WallTransition"
        },
        {
            "file": "transitions/WallTransition.js",
            "line": 229,
            "description": "Setter for velocity",
            "itemtype": "method",
            "name": "setVelocity",
            "return": {
                "description": "velocity",
                "type": "Number|Array"
            },
            "class": "WallTransition"
        },
        {
            "file": "transitions/WallTransition.js",
            "line": 240,
            "description": "Detects whether a transition is in progress",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "WallTransition"
        },
        {
            "file": "transitions/WallTransition.js",
            "line": 251,
            "description": "Halt the transition",
            "itemtype": "method",
            "name": "halt",
            "class": "WallTransition"
        },
        {
            "file": "transitions/WallTransition.js",
            "line": 260,
            "description": "Getter",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "state",
                "type": "Number|Array"
            },
            "class": "WallTransition"
        },
        {
            "file": "transitions/WallTransition.js",
            "line": 272,
            "description": "Set the end position and transition, with optional callback on completion.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "state",
                    "description": "Final state",
                    "type": "Number|Array"
                },
                {
                    "name": "definition",
                    "description": "Transition definition",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "WallTransition"
        },
        {
            "file": "utilities/Timer.js",
            "line": 32,
            "description": "Add a function to be run on every prerender",
            "itemtype": "method",
            "name": "addTimerFunction",
            "params": [
                {
                    "name": "fn",
                    "description": "function to be run every prerender",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "function passed in as parameter",
                "type": "Function"
            },
            "class": "Timer"
        },
        {
            "file": "utilities/Timer.js",
            "line": 46,
            "description": "Wraps a function to be invoked after a certain amount of time.\n After a set duration has passed, it executes the function and\n removes it as a listener to 'prerender'.",
            "itemtype": "method",
            "name": "setTimeout",
            "params": [
                {
                    "name": "fn",
                    "description": "function to be run after a specified duration",
                    "type": "Function"
                },
                {
                    "name": "duration",
                    "description": "milliseconds from now to execute the function",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "function passed in as parameter",
                "type": "Function"
            },
            "class": "Timer"
        },
        {
            "file": "utilities/Timer.js",
            "line": 70,
            "description": "Wraps a function to be invoked after a certain amount of time.\n After a set duration has passed, it executes the function and\n resets the execution time.",
            "itemtype": "method",
            "name": "setInterval",
            "params": [
                {
                    "name": "fn",
                    "description": "function to be run after a specified duration",
                    "type": "Function"
                },
                {
                    "name": "duration",
                    "description": "interval to execute function in milliseconds",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "function passed in as parameter",
                "type": "Function"
            },
            "class": "Timer"
        },
        {
            "file": "utilities/Timer.js",
            "line": 94,
            "description": "Wraps a function to be invoked after a certain amount of prerender ticks.\n Similar use to setTimeout but tied to the engine's run speed.",
            "itemtype": "method",
            "name": "after",
            "params": [
                {
                    "name": "fn",
                    "description": "function to be run after a specified amount of ticks",
                    "type": "Function"
                },
                {
                    "name": "numTicks",
                    "description": "number of prerender frames to wait",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "function passed in as parameter",
                "type": "Function"
            },
            "class": "Timer"
        },
        {
            "file": "utilities/Timer.js",
            "line": 117,
            "description": "Wraps a function to be continually invoked after a certain amount of prerender ticks.\n Similar use to setInterval but tied to the engine's run speed.",
            "itemtype": "method",
            "name": "every",
            "params": [
                {
                    "name": "fn",
                    "description": "function to be run after a specified amount of ticks",
                    "type": "Function"
                },
                {
                    "name": "numTicks",
                    "description": "number of prerender frames to wait",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "function passed in as parameter",
                "type": "Function"
            },
            "class": "Timer"
        },
        {
            "file": "utilities/Timer.js",
            "line": 141,
            "description": "Remove a function that gets called every prerender",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "fn",
                    "description": "event linstener",
                    "type": "Function"
                }
            ],
            "class": "Timer"
        },
        {
            "file": "utilities/Timer.js",
            "line": 152,
            "description": "Executes a function after a certain amount of time. Makes sure\n the function is not run multiple times.",
            "itemtype": "method",
            "name": "debounce",
            "params": [
                {
                    "name": "func",
                    "description": "function to run after certain amount of time",
                    "type": "Function"
                },
                {
                    "name": "wait",
                    "description": "amount of time",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "function that is not able to debounce",
                "type": "Function"
            },
            "class": "Timer"
        },
        {
            "file": "utilities/Utility.js",
            "line": 21,
            "description": "Table of direction array positions",
            "itemtype": "property",
            "name": "Direction",
            "type": "Object",
            "final": 1,
            "class": "Utility"
        },
        {
            "file": "utilities/Utility.js",
            "line": 33,
            "description": "Return wrapper around callback function. Once the wrapper is called N\n  times, invoke the callback function. Arguments and scope preserved.",
            "itemtype": "method",
            "name": "after",
            "params": [
                {
                    "name": "count",
                    "description": "number of calls before callback function invoked",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "wrapped callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "wrapped callback with coundown feature",
                "type": "Function"
            },
            "class": "Utility"
        },
        {
            "file": "utilities/Utility.js",
            "line": 52,
            "description": "Load a URL and return its contents in a callback",
            "itemtype": "method",
            "name": "loadURL",
            "params": [
                {
                    "name": "url",
                    "description": "URL of object",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback to dispatch with content",
                    "type": "Function"
                }
            ],
            "class": "Utility"
        },
        {
            "file": "utilities/Utility.js",
            "line": 71,
            "description": "Create a document fragment from a string of HTML",
            "itemtype": "method",
            "name": "createDocumentFragmentFromHTML",
            "params": [
                {
                    "name": "html",
                    "description": "HTML to convert to DocumentFragment",
                    "type": "String"
                }
            ],
            "return": {
                "description": "DocumentFragment representing input HTML",
                "type": "DocumentFragment"
            },
            "class": "Utility"
        },
        {
            "file": "views/Deck.js",
            "line": 73,
            "description": "Returns the width and the height of the Deck instance.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "A two value array of Deck's current width and height (in that order).\n  Scales as Deck opens and closes.",
                "type": "Array"
            },
            "class": "Deck"
        },
        {
            "file": "views/Deck.js",
            "line": 99,
            "description": "An accesor method to find out if the messaged Deck instance is open or closed.",
            "itemtype": "method",
            "name": "isOpen",
            "return": {
                "description": "Returns true if the instance is open or false if it's closed.",
                "type": "Boolean"
            },
            "class": "Deck"
        },
        {
            "file": "views/Deck.js",
            "line": 109,
            "description": "Sets the Deck instance to an open state.",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "callback",
                    "description": "Executes after transitioning to a fully open state.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Deck"
        },
        {
            "file": "views/Deck.js",
            "line": 120,
            "description": "Sets the Deck instance to an open state.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "callback",
                    "description": "Executes after transitioning to a fully closed state.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Deck"
        },
        {
            "file": "views/Deck.js",
            "line": 131,
            "description": "Sets the Deck instance from its current state to the opposite state.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "callback",
                    "description": "Executes after transitioning to the toggled state.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Deck"
        },
        {
            "file": "views/EdgeSwapper.js",
            "line": 44,
            "description": "Displays the passed-in content with the EdgeSwapper instance's default transition.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "content",
                    "description": "The renderable you want to display.",
                    "type": "Object"
                }
            ],
            "class": "EdgeSwapper"
        },
        {
            "file": "views/EdgeSwapper.js",
            "line": 62,
            "description": "Patches the EdgeSwapper instance's options with the passed-in ones.",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options for the Edgeswapper instance.",
                    "type": "Options"
                }
            ],
            "class": "EdgeSwapper"
        },
        {
            "file": "views/EdgeSwapper.js",
            "line": 72,
            "description": "Generate a render spec from the contents of this component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Number"
            },
            "class": "EdgeSwapper"
        },
        {
            "file": "views/EdgeSwapper.js",
            "line": 83,
            "description": "Apply changes from this component to the corresponding document element.\nThis includes changes to classes, styles, size, content, opacity, origin,\nand matrix transforms.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "commit",
            "params": [
                {
                    "name": "context",
                    "description": "commit context",
                    "type": "Context"
                }
            ],
            "class": "EdgeSwapper"
        },
        {
            "file": "views/Flipper.js",
            "line": 46,
            "description": "Flips from the current side to the opposite one with the Flipper instance's default transition.",
            "itemtype": "method",
            "name": "setDefaultTransition",
            "params": [
                {
                    "name": "side",
                    "description": "Can be either one or zero (one represents the back, zero represents the front).\n  Defaults to the default transition (true).",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "Executes after transitioning to the toggled state.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Flipper"
        },
        {
            "file": "views/Flipper.js",
            "line": 60,
            "description": "Patches the Flipper instance's options with the passed-in ones.",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options for the Flipper instance.",
                    "type": "Options"
                }
            ],
            "class": "Flipper"
        },
        {
            "file": "views/Flipper.js",
            "line": 70,
            "description": "Adds the passed-in renderable to the view associated with the 'front' of the Flipper instance.",
            "itemtype": "method",
            "name": "setFront",
            "chainable": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "The renderable you want to add to the front.",
                    "type": "Object"
                }
            ],
            "class": "Flipper"
        },
        {
            "file": "views/Flipper.js",
            "line": 81,
            "description": "Adds the passed-in renderable to the view associated with the 'back' of the Flipper instance.",
            "itemtype": "method",
            "name": "setBack",
            "chainable": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "The renderable you want to add to the back.",
                    "type": "Object"
                }
            ],
            "class": "Flipper"
        },
        {
            "file": "views/Flipper.js",
            "line": 92,
            "description": "Generate a render spec from the contents of this component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Number"
            },
            "class": "Flipper"
        },
        {
            "file": "views/GridLayout.js",
            "line": 114,
            "description": "Generate a render spec from the contents of this component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Object"
            },
            "class": "GridLayout"
        },
        {
            "file": "views/GridLayout.js",
            "line": 125,
            "description": "Patches the GridLayout instance's options with the passed-in ones.",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options for the GridLayout instance.",
                    "type": "Options"
                }
            ],
            "class": "GridLayout"
        },
        {
            "file": "views/GridLayout.js",
            "line": 135,
            "description": "Sets the collection of renderables under the Gridlayout instance's control.",
            "itemtype": "method",
            "name": "sequenceFrom",
            "params": [
                {
                    "name": "sequence",
                    "description": "Either an array of renderables or a Famous viewSequence.",
                    "type": "Array|ViewSequence"
                }
            ],
            "class": "GridLayout"
        },
        {
            "file": "views/GridLayout.js",
            "line": 146,
            "description": "Apply changes from this component to the corresponding document element.\nThis includes changes to classes, styles, size, content, opacity, origin,\nand matrix transforms.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "commit",
            "params": [
                {
                    "name": "context",
                    "description": "commit context",
                    "type": "Context"
                }
            ],
            "class": "GridLayout"
        },
        {
            "file": "views/HeaderFooterLayout.js",
            "line": 42,
            "description": "When used as a value for your HeaderFooterLayout's direction option, causes it to lay out horizontally.",
            "itemtype": "attribute",
            "name": "DIRECTION_X",
            "type": "Number",
            "static": 1,
            "default": "0",
            "access": "protected",
            "tagname": "",
            "class": "HeaderFooterLayout"
        },
        {
            "file": "views/HeaderFooterLayout.js",
            "line": 53,
            "description": "When used as a value for your HeaderFooterLayout's direction option, causes it to lay out vertically.",
            "itemtype": "attribute",
            "name": "DIRECTION_Y",
            "type": "Number",
            "static": 1,
            "default": "1",
            "access": "protected",
            "tagname": "",
            "class": "HeaderFooterLayout"
        },
        {
            "file": "views/HeaderFooterLayout.js",
            "line": 72,
            "description": "Generate a render spec from the contents of this component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Object"
            },
            "class": "HeaderFooterLayout"
        },
        {
            "file": "views/HeaderFooterLayout.js",
            "line": 83,
            "description": "Patches the HeaderFooterLayout instance's options with the passed-in ones.",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options for the HeaderFooterLayout instance.",
                    "type": "Options"
                }
            ],
            "class": "HeaderFooterLayout"
        },
        {
            "file": "views/HeaderFooterLayout.js",
            "line": 108,
            "description": "Apply changes from this component to the corresponding document element.\nThis includes changes to classes, styles, size, content, opacity, origin,\nand matrix transforms.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "commit",
            "params": [
                {
                    "name": "context",
                    "description": "commit context",
                    "type": "Context"
                }
            ],
            "class": "HeaderFooterLayout"
        },
        {
            "file": "views/Lightbox.js",
            "line": 66,
            "description": "Patches the Lightbox instance's options with the passed-in ones.",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options for the Lightbox instance.",
                    "type": "Options"
                }
            ],
            "class": "Lightbox"
        },
        {
            "file": "views/Lightbox.js",
            "line": 76,
            "description": "Show displays the targeted renderable with a transition and an optional callback to\nexecute afterwards.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "renderable",
                    "description": "The renderable you want to show.",
                    "type": "Object"
                },
                {
                    "name": "transition",
                    "description": "Overwrites the default transition in to display the\npassed-in renderable.",
                    "type": "Transition",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Executes after transitioning in the renderable.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Lightbox"
        },
        {
            "file": "views/Lightbox.js",
            "line": 129,
            "description": "Hide hides the currently displayed renderable with an out transition.",
            "itemtype": "method",
            "name": "hide",
            "params": [
                {
                    "name": "transition",
                    "description": "Overwrites the default transition in to hide the\ncurrently controlled renderable.",
                    "type": "Transition",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Executes after transitioning out the renderable.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Lightbox"
        },
        {
            "file": "views/Lightbox.js",
            "line": 161,
            "description": "Generate a render spec from the contents of this component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Number"
            },
            "class": "Lightbox"
        },
        {
            "file": "views/RenderController.js",
            "line": 73,
            "description": "As your RenderController shows a new renderable, it executes a transition in. This transition in\nwill affect a default interior state and modify it as you bring renderables in and out. However, if you want to control\nthe transform, opacity, and origin state yourself, you may call certain methods (such as inTransformFrom) to obtain state from an outside source,\nthat may either be a function or a Famous transitionable. inTransformFrom sets the accessor for the state of\nthe transform used in transitioning in renderables.",
            "itemtype": "method",
            "name": "inTransformFrom",
            "params": [
                {
                    "name": "transform",
                    "description": "A function that returns a transform from outside closure, or a\na transitionable that manages a full transform (a sixteen value array).",
                    "type": "Function|Transitionable"
                }
            ],
            "chainable": 1,
            "class": "RenderController"
        },
        {
            "file": "views/RenderController.js",
            "line": 93,
            "description": "inOpacityFrom sets the accessor for the state of the opacity used in transitioning in renderables.",
            "itemtype": "method",
            "name": "inOpacityFrom",
            "params": [
                {
                    "name": "opacity",
                    "description": "A function that returns an opacity from outside closure, or a\na transitionable that manages opacity (a number between zero and one).",
                    "type": "Function|Transitionable"
                }
            ],
            "chainable": 1,
            "class": "RenderController"
        },
        {
            "file": "views/RenderController.js",
            "line": 108,
            "description": "inOriginFrom sets the accessor for the state of the origin used in transitioning in renderables.",
            "itemtype": "method",
            "name": "inOriginFrom",
            "params": [
                {
                    "name": "origin",
                    "description": "A function that returns an origin from outside closure, or a\na transitionable that manages origin (a two value array of numbers between zero and one).",
                    "type": "Function|Transitionable"
                }
            ],
            "chainable": 1,
            "class": "RenderController"
        },
        {
            "file": "views/RenderController.js",
            "line": 123,
            "description": "outTransformFrom sets the accessor for the state of the transform used in transitioning out renderables.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "transform",
                    "description": "A function that returns a transform from outside closure, or a\na transitionable that manages a full transform (a sixteen value array).",
                    "type": "Function|Transitionable"
                }
            ],
            "chainable": 1,
            "class": "RenderController"
        },
        {
            "file": "views/RenderController.js",
            "line": 138,
            "description": "outOpacityFrom sets the accessor for the state of the opacity used in transitioning out renderables.",
            "itemtype": "method",
            "name": "inOpacityFrom",
            "params": [
                {
                    "name": "opacity",
                    "description": "A function that returns an opacity from outside closure, or a\na transitionable that manages opacity (a number between zero and one).",
                    "type": "Function|Transitionable"
                }
            ],
            "chainable": 1,
            "class": "RenderController"
        },
        {
            "file": "views/RenderController.js",
            "line": 153,
            "description": "outOriginFrom sets the accessor for the state of the origin used in transitioning out renderables.",
            "itemtype": "method",
            "name": "inOriginFrom",
            "params": [
                {
                    "name": "origin",
                    "description": "A function that returns an origin from outside closure, or a\na transitionable that manages origin (a two value array of numbers between zero and one).",
                    "type": "Function|Transitionable"
                }
            ],
            "chainable": 1,
            "class": "RenderController"
        },
        {
            "file": "views/RenderController.js",
            "line": 168,
            "description": "Show displays the targeted renderable with a transition and an optional callback to\nexecute afterwards.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "renderable",
                    "description": "The renderable you want to show.",
                    "type": "Object"
                },
                {
                    "name": "transition",
                    "description": "Overwrites the default transition in to display the\npassed-in renderable.",
                    "type": "Transition",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Executes after transitioning in the renderable.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "RenderController"
        },
        {
            "file": "views/RenderController.js",
            "line": 239,
            "description": "Hide hides the currently displayed renderable with an out transition.",
            "itemtype": "method",
            "name": "hide",
            "params": [
                {
                    "name": "transition",
                    "description": "Overwrites the default transition in to hide the\ncurrently controlled renderable.",
                    "type": "Transition",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Executes after transitioning out the renderable.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "RenderController"
        },
        {
            "file": "views/RenderController.js",
            "line": 285,
            "description": "Generate a render spec from the contents of this component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Number"
            },
            "class": "RenderController"
        },
        {
            "file": "views/ScrollContainer.js",
            "line": 51,
            "description": "Patches the ScrollContainer instance's options with the passed-in ones.",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options for the ScrollContainer instance.",
                    "type": "Options"
                }
            ],
            "class": "ScrollContainer"
        },
        {
            "file": "views/ScrollContainer.js",
            "line": 61,
            "description": "Sets the collection of renderables under the ScrollContainer instance scrollview's control.",
            "itemtype": "method",
            "name": "sequenceFrom",
            "params": [
                {
                    "name": "sequence",
                    "description": "Either an array of renderables or a Famous ViewSequence.",
                    "type": "Array|ViewSequence"
                }
            ],
            "class": "ScrollContainer"
        },
        {
            "file": "views/ScrollContainer.js",
            "line": 71,
            "description": "Generate a render spec from the contents of this component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Number"
            },
            "class": "ScrollContainer"
        },
        {
            "file": "views/Scroller.js",
            "line": 81,
            "description": "Patches the Scroller instance's options with the passed-in ones.",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options for the Scroller instance.",
                    "type": "Options"
                }
            ],
            "class": "Scroller"
        },
        {
            "file": "views/Scroller.js",
            "line": 90,
            "description": "Tells you if the Scroller instance is on an edge.",
            "itemtype": "method",
            "name": "onEdge",
            "return": {
                "description": "Whether the Scroller instance is on an edge or not.",
                "type": "Boolean"
            },
            "class": "Scroller"
        },
        {
            "file": "views/Scroller.js",
            "line": 99,
            "description": "Allows you to overwrite the way Scroller lays out it's renderables. Scroller will\npass an offset into the function. By default the Scroller instance just translates each node\nin it's direction by the passed-in offset.\nScroller will translate each renderable down",
            "itemtype": "method",
            "name": "outputFrom",
            "params": [
                {
                    "name": "fn",
                    "description": "A function that takes an offset and returns a transform.",
                    "type": "Function"
                },
                {
                    "name": "masterFn",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Scroller"
        },
        {
            "file": "views/Scroller.js",
            "line": 121,
            "description": "The Scroller instance's method for reading from an external position. Scroller uses\nthe external position to actually scroll through it's renderables.",
            "itemtype": "method",
            "name": "positionFrom",
            "params": [
                {
                    "name": "position",
                    "description": "Can be either a function that returns a position,\nor an object with a get method that returns a position.",
                    "type": "Getter"
                }
            ],
            "class": "Scroller"
        },
        {
            "file": "views/Scroller.js",
            "line": 138,
            "description": "Sets the collection of renderables under the Scroller instance's control.",
            "itemtype": "method",
            "name": "sequenceFrom",
            "params": [
                {
                    "name": "items",
                    "description": "Either an array of renderables or a Famous viewSequence.",
                    "type": "Array|ViewSequence"
                }
            ],
            "chainable": 1,
            "class": "Scroller"
        },
        {
            "file": "views/Scroller.js",
            "line": 151,
            "description": "Returns the width and the height of the Scroller instance.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "A two value array of the Scroller instance's current width and height (in that order).",
                "type": "Array"
            },
            "class": "Scroller"
        },
        {
            "file": "views/Scroller.js",
            "line": 161,
            "description": "Generate a render spec from the contents of this component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Number"
            },
            "class": "Scroller"
        },
        {
            "file": "views/Scroller.js",
            "line": 174,
            "description": "Apply changes from this component to the corresponding document element.\nThis includes changes to classes, styles, size, content, opacity, origin,\nand matrix transforms.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "commit",
            "params": [
                {
                    "name": "context",
                    "description": "commit context",
                    "type": "Context"
                }
            ],
            "class": "Scroller"
        },
        {
            "file": "views/Scrollview.js",
            "line": 101,
            "class": "Scrollview"
        },
        {
            "file": "views/Scrollview.js",
            "line": 120,
            "class": "Scrollview"
        },
        {
            "file": "views/Scrollview.js",
            "line": 316,
            "description": "Returns the position associated with the Scrollview instance's current node\n(generally the node currently at the top).",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "node",
                    "description": "If specified, returns the position of the node at that index in the\nScrollview instance's currently managed collection.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The position of either the specified node, or the Scrollview's current Node,\nin pixels translated.",
                "type": "Number"
            },
            "class": "Scrollview"
        },
        {
            "file": "views/Scrollview.js",
            "line": 329,
            "description": "Sets position of the physics particle that controls Scrollview instance's \"position\"",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "The amount of pixels you want your scrollview to progress by.",
                    "type": "Number"
                }
            ],
            "class": "Scrollview"
        },
        {
            "file": "views/Scrollview.js",
            "line": 338,
            "description": "Returns the Scrollview instance's velocity.",
            "itemtype": "method",
            "name": "getVelocity",
            "return": {
                "description": "The velocity.",
                "type": "Number"
            },
            "class": "Scrollview"
        },
        {
            "file": "views/Scrollview.js",
            "line": 348,
            "description": "Sets the Scrollview instance's velocity. Until affected by input or another call of setVelocity\nthe Scrollview instance will scroll at the passed-in velocity.",
            "itemtype": "method",
            "name": "setVelocity",
            "params": [
                {
                    "name": "v",
                    "description": "TThe magnitude of the velocity.",
                    "type": "Number"
                }
            ],
            "class": "Scrollview"
        },
        {
            "file": "views/Scrollview.js",
            "line": 358,
            "description": "Patches the Scrollview instance's options with the passed-in ones.",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options for the Scrollview instance.",
                    "type": "Options"
                }
            ],
            "class": "Scrollview"
        },
        {
            "file": "views/Scrollview.js",
            "line": 387,
            "description": "goToPreviousPage paginates your Scrollview instance backwards by one item.",
            "itemtype": "method",
            "name": "goToPreviousPage",
            "return": {
                "description": "The previous node.",
                "type": "ViewSequence"
            },
            "class": "Scrollview"
        },
        {
            "file": "views/Scrollview.js",
            "line": 408,
            "description": "goToNextPage paginates your Scrollview instance forwards by one item.",
            "itemtype": "method",
            "name": "goToNextPage",
            "return": {
                "description": "The next node.",
                "type": "ViewSequence"
            },
            "class": "Scrollview"
        },
        {
            "file": "views/Scrollview.js",
            "line": 430,
            "description": "Sets the collection of renderables under the Scrollview instance's control, by\nsetting its current node to the passed in ViewSequence. If you\npass in an array, the Scrollview instance will set its node as a ViewSequence instantiated with\nthe passed-in array.",
            "itemtype": "method",
            "name": "sequenceFrom",
            "params": [
                {
                    "name": "node",
                    "description": "Either an array of renderables or a Famous viewSequence.",
                    "type": "Array|ViewSequence"
                }
            ],
            "class": "Scrollview"
        },
        {
            "file": "views/Scrollview.js",
            "line": 445,
            "description": "Returns the width and the height of the Scrollview instance.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "A two value array of the Scrollview instance's current width and height (in that order).",
                "type": "Array"
            },
            "class": "Scrollview"
        },
        {
            "file": "views/Scrollview.js",
            "line": 455,
            "description": "Generate a render spec from the contents of this component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Number"
            },
            "class": "Scrollview"
        },
        {
            "file": "views/SequentialLayout.js",
            "line": 53,
            "description": "Returns the width and the height of the SequentialLayout instance.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "A two value array of the SequentialLayout instance's current width and height (in that order).",
                "type": "Array"
            },
            "class": "ScrollContainer"
        },
        {
            "file": "views/SequentialLayout.js",
            "line": 64,
            "description": "Sets the collection of renderables under the SequentialLayout instance's control.",
            "itemtype": "method",
            "name": "sequenceFrom",
            "params": [
                {
                    "name": "items",
                    "description": "Either an array of renderables or a Famous viewSequence.",
                    "type": "Array|ViewSequence"
                }
            ],
            "chainable": 1,
            "class": "ScrollContainer"
        },
        {
            "file": "views/SequentialLayout.js",
            "line": 77,
            "description": "Patches the SequentialLayout instance's options with the passed-in ones.",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "An object of configurable options for the SequentialLayout instance.",
                    "type": "Options"
                }
            ],
            "chainable": 1,
            "class": "ScrollContainer"
        },
        {
            "file": "views/SequentialLayout.js",
            "line": 89,
            "description": "setOutputFunction is used to apply a user-defined output transform on each processed renderable.\nFor a good example, check out SequentialLayout's own DEFAULT_OUTPUT_FUNCTION in the code.",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "outputFunction",
                    "description": "An output processer for each renderable in the SequentialLayout\ninstance.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "ScrollContainer"
        },
        {
            "file": "views/SequentialLayout.js",
            "line": 103,
            "description": "Generate a render spec from the contents of this component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Number"
            },
            "class": "ScrollContainer"
        },
        {
            "file": "widgets/NavigationBar.js",
            "line": 128,
            "description": "Set the title of the NavigationBar",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "content",
                    "description": "JSON object containing title information",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "NavigationBar"
        },
        {
            "file": "widgets/Slider.js",
            "line": 17,
            "class": "TabBar"
        },
        {
            "file": "widgets/TabBar.js",
            "line": 53,
            "description": "Update the options for all components of the view",
            "itemtype": "method",
            "name": "_updateOptions",
            "params": [
                {
                    "name": "data",
                    "description": "component options",
                    "type": "Object"
                }
            ],
            "class": "TabBar"
        },
        {
            "file": "widgets/TabBar.js",
            "line": 79,
            "description": "Return an array of the proper dimensions for the tabs",
            "itemtype": "method",
            "name": "_resolveGridDimensions",
            "params": [
                {
                    "name": "count",
                    "description": "number of buttons",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "direction of the layout",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the dimensions of the tab section",
                "type": "Array"
            },
            "class": "TabBar"
        },
        {
            "file": "widgets/TabBar.js",
            "line": 94,
            "description": "Create a new button with the specified id.  If one already exists with\n that id, unbind all listeners.",
            "itemtype": "method",
            "name": "defineSection",
            "params": [
                {
                    "name": "id",
                    "description": "name of the button",
                    "type": "String"
                },
                {
                    "name": "content",
                    "description": "data for the creation of a new ToggleButton",
                    "type": "Object"
                }
            ],
            "class": "TabBar"
        },
        {
            "file": "widgets/TabBar.js",
            "line": 127,
            "description": "Select a particular button and dispatch the id of the selection\n to any listeners.  Deselect all others",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "id",
                    "description": "button id",
                    "type": "String"
                }
            ],
            "class": "TabBar"
        },
        {
            "file": "widgets/ToggleButton.js",
            "line": 65,
            "description": "Transition towards the 'on' state and dispatch an event to\n listeners to announce it was selected",
            "itemtype": "method",
            "name": "select",
            "class": "TabBar"
        },
        {
            "file": "widgets/ToggleButton.js",
            "line": 78,
            "description": "Transition towards the 'f' state and dispatch an event to\n listeners to announce it was deselected",
            "itemtype": "method",
            "name": "deselect",
            "class": "TabBar"
        },
        {
            "file": "widgets/ToggleButton.js",
            "line": 90,
            "description": "Return the state of the button",
            "itemtype": "method",
            "name": "isSelected",
            "return": {
                "description": "selected state",
                "type": "Boolean"
            },
            "class": "TabBar"
        },
        {
            "file": "widgets/ToggleButton.js",
            "line": 101,
            "description": "Override the current options",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "JSON",
                    "type": "Object"
                }
            ],
            "class": "TabBar"
        },
        {
            "file": "widgets/ToggleButton.js",
            "line": 136,
            "description": "Return the size defined in the options object",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "two element array [height, width]",
                "type": "Array"
            },
            "class": "TabBar"
        },
        {
            "file": "widgets/ToggleButton.js",
            "line": 147,
            "description": "Generate a render spec from the contents of this component.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Render spec for this component",
                "type": "Number"
            },
            "class": "TabBar"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " autodoc/utils.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " autodoc/utils.js:29"
        },
        {
            "message": "unknown tag: examples",
            "line": " autodoc/utils.js:29"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " physics/bodies/Particle.js:226"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " physics/bodies/Particle.js:345"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " transitions/TweenTransition.js:284"
        },
        {
            "message": "Missing item type\nFormats a number by adding commas as the thousands separator and truncating\ndecimal part to 3 places (arbitrary decision on my part).",
            "line": " autodoc/utils.js:1"
        },
        {
            "message": "Missing item type\nAppends a bunch of whitespace to the end of a string to get it to a desired\nlength. Has no effect if the string exceeds the specified length to begin\nwith.",
            "line": " autodoc/utils.js:29"
        },
        {
            "message": "Missing item type",
            "line": " core/Engine.js:52"
        },
        {
            "message": "Missing item type",
            "line": " core/Group.js:36"
        },
        {
            "message": "Missing item type",
            "line": " core/Surface.js:52"
        },
        {
            "message": "Missing item type\nFastClick is an override shim which maps event pairs of\n  'touchstart' and 'touchend' which differ by less than a certain\n  threshold to the 'click' event.\n  This is used to speed up clicks on some browsers.",
            "line": " inputs/FastClick.js:11"
        },
        {
            "message": "Missing item type\nCalculates the kinetic and intertial energy of a body.",
            "line": " physics/bodies/Body.js:99"
        },
        {
            "message": "Missing item type\nExtends Particle.reset to reset orientation, angular velocity\nand angular momentum.",
            "line": " physics/bodies/Body.js:109"
        },
        {
            "message": "Missing item type\nSetter for orientation",
            "line": " physics/bodies/Body.js:125"
        },
        {
            "message": "Missing item type\nSetter for angular velocity",
            "line": " physics/bodies/Body.js:134"
        },
        {
            "message": "Missing item type\nSetter for angular momentum",
            "line": " physics/bodies/Body.js:144"
        },
        {
            "message": "Missing item type\n/** @const */ var pi = Math.PI;\n\n/**\n * @property Curve.DEFAULT_OPTIONS\n * @type Object\n * @protected\n * @static",
            "line": " physics/constraints/Curve.js:40"
        },
        {
            "message": "Missing item type\n/**\n     * Basic options setter\n     *\n     * @method setOptions\n     * @param options {Objects}",
            "line": " physics/constraints/Distance.js:93"
        },
        {
            "message": "Missing item type\nfunction _calcEnergy(impulse, disp, dt) {\n        return Math.abs(impulse.dot(disp)/dt);\n    }\n/**\n     * Basic options setter\n     *\n     * @method setOptions\n     * @param options {Objects} options",
            "line": " physics/constraints/Snap.js:91"
        },
        {
            "message": "Missing item type\n/** @const */ var pi = Math.PI;\n\n/**\n * Basic options setter\n *\n * @method setOptions\n * @param options {Objects}",
            "line": " physics/constraints/Surface.js:71"
        },
        {
            "message": "Missing item type\n/**\n     * @property Spring.FORCE_FUNCTIONS\n     * @type Object\n     * @protected\n     * @static",
            "line": " physics/forces/Spring.js:37"
        },
        {
            "message": "Missing item type",
            "line": " views/Scrollview.js:101"
        },
        {
            "message": "Missing item type",
            "line": " views/Scrollview.js:120"
        },
        {
            "message": "Missing item type",
            "line": " widgets/Slider.js:17"
        }
    ]
}